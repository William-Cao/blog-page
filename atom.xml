<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  <subtitle>What&#39;s past is prologue.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.williamife.com/"/>
  <updated>2021-03-19T16:03:37.486Z</updated>
  <id>https://www.williamife.com/</id>
  
  <author>
    <name>William Cao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见的前端架构风格和案例</title>
    <link href="https://www.williamife.com/2021/03/19/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E5%92%8C%E6%A1%88%E4%BE%8B/"/>
    <id>https://www.williamife.com/2021/03/19/常见的前端架构风格和案例/</id>
    <published>2021-03-19T15:00:00.000Z</published>
    <updated>2021-03-19T16:03:37.486Z</updated>
    
    <content type="html"><![CDATA[<p>  <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c8205f9b6694a13920a77a86789c787~tplv-k3u1fbpfcp-watermark.image" alt></p><p><strong>所谓软件架构风格，是指描述某个特定应用领域中系统组织方式的惯用模式。架构风格定义一个词汇表和一组约束，词汇表中包含一些组件及连接器，约束则指出系统如何将构建和连接器组合起来。软件架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将系统中的各个模块和子系统有机的结合为一个完整的系统。</strong></p><p><em>透过现象看本质，我们来探讨下前端领域一些流行技术栈背后的架构思想。</em></p><h1 id="一、分层风格"><a href="#一、分层风格" class="headerlink" title="一、分层风格"></a>一、分层风格</h1><blockquote><p>分层架构是最常见的软件架构，你要不知道用什么架构，或者不知道怎么解决问题，那就尝试加多一层。一个分层系统是按照层次来组织的，每一层为在其之上的层提供服务，并且使用在其之下的层所提供的服务。</p></blockquote><p>分层通常可以解决什么问题？</p><ul><li><p><strong>是隔离业务复杂度与技术复杂度的利器。</strong> 典型的例子是网络协议, 越高层越面向人类，越底层越面向机器。一层一层往上，很多技术的细节都被隐藏了，比如我们使用<code>HTTP</code>时，不需要考虑<code>TCP</code>的握手和包传输细节，<code>TCP</code>不需要关心<code>IP</code>的寻址和路由。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fbf7536bf9546b2a061ea2fb4e31ddd~tplv-k3u1fbpfcp-watermark.image" alt></p></li><li><p><strong>分离关注点和复用。减少跨越多层的耦合, 当一层变动时不会影响到其他层。</strong> 例如我们前端项目建议拆分逻辑层和视图层，一方面可以降低逻辑和视图之间的耦合，当视图层元素变动时可以尽量减少对逻辑层的影响；另外一个好处是, 当逻辑抽取出去后，可以被不同平台的视图复用。</p></li></ul><p>关注点分离之后，软件的结构会变得容易理解和开发, 每一层可以被复用, 容易被测试, 其他层的接口通过模拟解决. 但是分层架构，也不是全是优点，分层的抽象可能会丢失部分效率和灵活性, 比如编程语言就有所谓的<code>层次</code>，语言抽象的层次越高，运行效率会相应衰减:</p><p>  <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6d2f83608134a6f95b3c205808b2891~tplv-k3u1fbpfcp-watermark.image" alt></p><h2 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h2><p>前端石器时代，我们页面交互和渲染，是通过服务端渲染或者直接操作DOM实现的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.tab-list'</span>).on(<span class="string">'click'</span>,<span class="string">'.tab'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  $(<span class="string">'.tab'</span>).removeClass(<span class="string">'active'</span>)</span><br><span class="line">  $(<span class="string">'.tab-content'</span>).removeClass(<span class="string">'active'</span>)</span><br><span class="line">  $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于<code>SPA</code>类型项目的出现，<code>DOM tree</code>的结构变得越来越复杂，它的改变也变得越来越频繁，大量的DOM操作产生了，对DOM节点的增删改，还有许多的事件监听、事件回调、事件销毁需要处理。由于DOM tree结构的频繁变化，会导致大量的<code>reflow</code>从而影响性能。</p><p>然后React就搞了一层<code>VirtualDOM</code>。 所谓的<code>VirtualDOM</code>，也就是虚拟节点。它通过 JS 的 Object 对象模拟 DOM 中的节点，然后再通过特定的 render 方法将其渲染成真实的 DOM 节点。</p><p>  <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/053e360b92f142b4840437daf2e93621~tplv-k3u1fbpfcp-watermark.image" alt></p><p>所以说 <code>VirtualDOM</code> 更大的意义在于开发方式的转变: <code>声明式、数据驱动</code>, 让开发者不需要关心 DOM 的操作细节 <strong>(属性操作、事件绑定、DOM 节点变更)</strong> ，另外有了VirtualDOM这一层抽象层，使得多平台渲染成为可能。</p><p>当然VirtualDOM或者React，不是唯一一个这样的解决方案。其他前端框架，例如<code>Vue、Angular</code>基本都是这样一个发展历程。我们通过<code>RN</code>可以开发跨平台的移动应用，但是众所周知，它运行效率或者灵活性暂时是无法与原生应用比拟的。</p><h2 id="多端统一开发框架"><a href="#多端统一开发框架" class="headerlink" title="多端统一开发框架"></a>多端统一开发框架</h2><p><strong>chameleon、Taro、uni-app、mpvue、WePY</strong></p><blockquote><p>软件架构设计里面最基础的概念“拆分”和“合并”，拆分的意义是“分而治之”，将复杂问题拆分成单一问题解决，比如后端业务系统的”微服务化“设计；“合并”的意义是将同样的业务需求抽象收敛到一块，达成高效率高质量的目的，例如后端业务系统中的“中台服务”设计。</p></blockquote><p>现如今市面上端的形态多种多样，Web、App 端(React Native)、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。</p><p>多端统一开发框架属于后者，通过定义统一的语言框架 + 统一多态协议，从多端（对应多个独立服务）业务中抽离出自成体系、连续性强、可维护强的“前端中台服务”。</p><p><strong><a href="https://cml.js.org/docs/" target="_blank" rel="noopener">chameleon</a></strong></p><p>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6453b96f206447e7bbc46094d9d28940~tplv-k3u1fbpfcp-watermark.image" alt></p><p><strong><a href="https://jelly.jd.com/article/5c2dea3517b02c004733147d" target="_blank" rel="noopener">Taro</a></strong></p><p>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1639e4029594ef889bfd59048fe30fd~tplv-k3u1fbpfcp-watermark.image" alt></p><h1 id="二、管道-过滤器"><a href="#二、管道-过滤器" class="headerlink" title="二、管道/过滤器"></a>二、管道/过滤器</h1><p>在<code>管道/过滤器</code>架构风格中，每个组件都有一组输入和输出，每个组件职责都很单一，数据输入组件，经过内部处理，然后将处理过的数据输出。所以这些组件也称为过滤器，连接器按照业务需求将组件连接起来，其形状就像<code>管道</code>一样，这种架构风格由此得名。</p><h2 id="Unix管道"><a href="#Unix管道" class="headerlink" title="Unix管道"></a>Unix管道</h2><p>  <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/271d4633fb1a43f0b234e6f5a12e9268~tplv-k3u1fbpfcp-watermark.image" alt></p><p> <em>在\</em>unix中经常会看到stdin，stdout和stderr，这3个可以称为终端（Terminal）的标准输入（standard input），标准输出（ standard out）和标准错误输出（standard error）。*</p><p>这里面最经典的案例是<em>Unix Shell</em>命令，Unix的哲学之一就是<code>“让程序只做好一件事”</code>，所以我们常用的Unix命令功能都非常单一，但是Unix Shell还有一件法宝就是管道，通过管道我们可以将命令通过标准输入输出串联起来实现复杂的功能:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 获取网页，并进行拼写检查。代码来源于wiki</span><br><span class="line">curl "http://en.wikipedia.org/wiki/Pipeline_(Unix)" | \</span><br><span class="line">sed 's/[^a-zA-Z ]/ /g' | \</span><br><span class="line">tr 'A-Z ' 'a-z\n' | \</span><br><span class="line">grep '[a-z]' | \</span><br><span class="line">sort -u | \</span><br><span class="line">comm -23 - /usr/share/dict/words | \</span><br><span class="line">less</span><br></pre></td></tr></table></figure><h2 id="ReactiveX"><a href="#ReactiveX" class="headerlink" title="ReactiveX"></a>ReactiveX</h2><p>另一个和<code>Unix管道</code>相似的例子是<code>ReactiveX</code>, 例如<code>RxJS</code>。很多教程将Rx比喻成河流，这个河流的开头就是一个事件源，这个事件源按照一定的频率发布事件。Rx真正强大的其实是它的操作符，有了这些操作符，你可以对这条河流做一切可以做的事情，例如分流、节流、建大坝、转换、统计、合并、产生河流的河流…</p><p><em>这些操作符和Unix的命令一样，职责都很单一，只干好一件事情。但我们管道将它们组合起来的时候，就迸发了无限的能力.</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; throttleTime, map, scan &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line">fromEvent(<span class="built_in">document</span>, <span class="string">'click'</span>)</span><br><span class="line">  .pipe(</span><br><span class="line">    throttleTime(<span class="number">1000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">event</span> =&gt;</span> event.clientX),</span><br><span class="line">    scan(<span class="function">(<span class="params">count, clientX</span>) =&gt;</span> count + clientX, <span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">  .subscribe(<span class="function"><span class="params">count</span> =&gt;</span> <span class="built_in">console</span>.log(count));</span><br></pre></td></tr></table></figure><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><p>除了上述的<code>RxJS</code>，管道模式在前端领域也有很多应用，主要集中在前端工程化领域。例如’老牌’的项目构建工具<code>Gulp</code>, Gulp使用管道化模式来处理各种文件类型，管道中的每一个步骤称为<code>Transpiler</code>(转译器), 它们以 NodeJS的Stream作为输入输出。整个过程高效而简单。</p><figure class="highlight js"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gulpfile.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> pug = <span class="built_in">require</span>(<span class="string">'gulp-pug'</span>);</span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="keyword">const</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</span><br><span class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">html</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'client/templates/*.pug'</span>)</span><br><span class="line">    .pipe(pug())</span><br><span class="line">    .pipe(dest(<span class="string">'build/html'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'client/templates/*.less'</span>)</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(minifyCSS())</span><br><span class="line">    .pipe(dest(<span class="string">'build/css'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">js</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'client/javascript/*.js'</span>, &#123; <span class="attr">sourcemaps</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .pipe(concat(<span class="string">'app.min.js'</span>))</span><br><span class="line">    .pipe(dest(<span class="string">'build/js'</span>, &#123; <span class="attr">sourcemaps</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.js = js;</span><br><span class="line">exports.css = css;</span><br><span class="line">exports.html = html;</span><br><span class="line">exports.default = parallel(html, css, js);</span><br></pre></td></tr></table></figure><p>不确定是否受到Gulp的影响，现代的<code>Webpack</code>打包工具，也使用同样的模式来实现对文件的处理，即<code>Loader</code>，<code>Loader</code> 用于对模块的源代码进行转换，通过Loader的组合，可以实现复杂的文件转译需求。</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">          loader: <span class="string">"style-loader"</span> <span class="comment">// 将 JS 字符串生成为 style 节点</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          loader: <span class="string">"css-loader"</span> <span class="comment">// 将 CSS 转化成 CommonJS 模块</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          loader: <span class="string">"sass-loader"</span> <span class="comment">// 将 Sass 编译成 CSS</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="管道中间件"><a href="#管道中间件" class="headerlink" title="管道中间件"></a>管道中间件</h2><blockquote><p>中间件(middleware)就是一个函数，用来完成各种特定的任务。它最大的特点就是，一个中间件处理完，可以把相应数据再传递给下一个中间件。</p></blockquote><p>如果开发过Express、Koa或者Redux， 你可能会发现中间件模式和上述的管道模式有一定的相似性。</p><p><strong>Koa2的洋葱圈模型，如下图。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f2b0939641840d093df3e817dc598a0~tplv-k3u1fbpfcp-watermark.image" alt title>                </div>                <div class="image-caption"></div>            </figure><p>洋葱圈模型有以下特点:</p><ul><li><code>中间件没有显式的输入输出</code> 这些中间件之间通常通过集中式的上下文对象来共享状态</li><li><code>有一个循环的过程</code> 管道中，数据处理完毕后交给下游了，后面就不管了。而中间件还有一个回归的过程，当下游处理完毕后会进行回溯，所以有机会干预下游的处理结果。</li></ul><p>我们暂且把它当作一个特殊形式的管道模式吧。这种模式通常用于后端，它可以干净地分离出请求的不同阶段，也就是分离关注点。比如我们可以创建这些中间件：</p><ul><li>日志： 记录开始时间，计算响应时间，输出请求日志</li><li>认证： 验证用户是否登录</li><li>授权： 验证用户是否有执行该操作的权限</li><li>缓存： 是否有缓存结果，有的话就直接返回，当下游响应完成后，再判断一下响应是否可以被缓存</li><li>执行： 执行实际的请求处理、响应</li></ul><p>这个简易的 gif 说明了 async 函数如何使我们能够恰当地利用堆栈流来实现请求和响应流：<br>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e59f1dcc5da42c7bcaa9b5cfc886871~tplv-k3u1fbpfcp-watermark.image" alt><br><a href="https://www.jianshu.com/p/12849bd34a1f" target="_blank" rel="noopener">koa2洋葱模型源码分析</a></p><h1 id="三、事件驱动"><a href="#三、事件驱动" class="headerlink" title="三、事件驱动"></a>三、事件驱动</h1><blockquote><p>事件驱动编程最好的方法论是发布订阅模式，对于前端开发来说是再熟悉不过的概念了。 它定义了一种一对多的依赖关系， 在事件驱动系统风格中，组件不直接调用另一个组件，而是触发或广播一个或多个事件。系统中的其他组件在一个或多个事件中注册。当一个事件被触发，系统会自动通知在这个事件中注册的所有组件。</p></blockquote><p>这样就分离了关注点，订阅者依赖于事件而不是依赖于发布者，发布者也不需要关心订阅者，两者解除了耦合。<br>生活中也有很多发布-订阅的例子，比如微信公众号信息订阅，当新增一个订阅者的时候，发布者并不需要作出任何调整，同样发布者调整的时候也不会影响到订阅者，只要协议没有变化。我们可以发现，发布者和订阅者之间其实是一种弱化的动态的关联关系。</p><p><em>解除耦合目的是一方面, 另一方面也可能由基因决定的，一些事情天然就不适合或不支持用同步的方式去调用，或者这些行为是异步触发的。</em></p><h2 id="Node-js事件驱动模型"><a href="#Node-js事件驱动模型" class="headerlink" title="Node.js事件驱动模型"></a>Node.js事件驱动模型</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbdaa3bc36fd429aaebeeaec1680b525~tplv-k3u1fbpfcp-watermark.image" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>Application应用层，即JavaScript 交互层，常见的就是 Node.js 的模块，比如 http，fs等</li><li>V8这一层是V8引擎层，这一层的主要作用是解析JavaScript，同时和应用层和NodeApi层交互</li><li>NodeApi为上层模块提供系统调用，和操作系统进行交互 。</li><li>Libuv是跨平台的底层封装，实现了线程池、事件循环、文件操作等，是 Node.js 实现异步的核心。</li></ul><p><code>libuv</code>是一个高性能事件驱动库，屏蔽了各种操作系统的差异从而提供了统一的<code>AP</code>I。libuv严格使用<code>异步、事件驱动</code>的编程风格。其核心工作是提供事件循环及 基于I/O 或其他活动事件的回调机制。libuv库包含了诸如计时器、非阻塞网络支持、异步文件系统访问、线程创建、子进程等核心工具。<br>  <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/560d4bb2886f47e88a205a8dc99d5f97~tplv-k3u1fbpfcp-watermark.image" alt><br><a href="https://www.williamife.com/2019/03/28/%E6%B5%85%E8%B0%88IO%E6%A8%A1%E5%9E%8B%E4%B8%8EEvent%20Loop/">I/O模型、Libuv和Eventloop</a></p><h1 id="四、复制风格"><a href="#四、复制风格" class="headerlink" title="四、复制风格"></a>四、复制风格</h1><blockquote><p>基于复制(Replication)风格的系统，会利用多个实例提供相同的服务，来改善服务的可访问性和可伸缩性，以及性能。这种架构风格可以改善用户可察觉的性能，简单服务响应的延迟。</p></blockquote><p>  <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4866b08820da45fca3699375d8042b39~tplv-k3u1fbpfcp-watermark.image" alt></p><p>这种风格在后端用得比较多，举前端比较熟悉的例子，NodeJS是单线程的，为了利用多核资源，NodeJS标准库提供了一个cluster模块，它可以根据CPU数创建多个Worker进程，这些Worker进程可以共享一个服务器端口，对外提供同质的服务, Master进程会根据一定的策略将资源分配给Worker:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fork workers.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">    cluster.fork();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.on(<span class="string">'exit'</span>, (worker, code, signal) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Workers可以共享任意的TCP连接 </span></span><br><span class="line">  <span class="comment">// 比如共享HTTP服务器 </span></span><br><span class="line">  http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(<span class="string">'hello world\n'</span>);</span><br><span class="line">  &#125;).listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用多核能力可以提升应用的性能和可靠性。我们也可以利用<code>PM2</code>这样的进程管理工具，来简化<code>Node集群</code>的管理，它支持很多有用的特性，例如<code>集群节点重启、日志归集、性能监视</code>等。</p><p><code>复制风格</code>常用于<code>网络服务器</code>。浏览器和Node都有Worker的概念，但是一般都只推荐在CPU密集型的场景使用它们，因为浏览器或者NodeJS内置的异步操作已经非常高效。实际上前端应用CPU密集型场景并不多，或者目前阶段不是特别实用。除此之外你还要权衡进程间通信的效率、Worker管理复杂度、异常处理等事情。</p><p>有一个典型的CPU密集型的场景，即源文件转译。典型的例子是<code>CodeSandbox</code>, 它就是利用浏览器的Worker机制来提高源文件的转译性能的:</p><p>  <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b96e364650de4296ae0f316ff1695f97~tplv-k3u1fbpfcp-watermark.image" alt></p><p>除了处理CPU密集型任务，对于浏览器来说，Worker也是一个重要的安全机制，用于隔离不安全代码的执行，或者限制访问浏览器DOM相关的东西。</p><h1 id="五、微内核架构"><a href="#五、微内核架构" class="headerlink" title="五、微内核架构"></a>五、微内核架构</h1><blockquote><p>微核架构（microkernel architecture）又称为”插件架构”（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。</p></blockquote><p>  <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f0f8247d7ac4440a1a134c12980f630~tplv-k3u1fbpfcp-watermark.image" alt></p><p><code>内核</code>（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。微内核结构的难点在于建立一套粒度合适的插件协议、以及对插件之间进行适当的隔离和解耦。从而才能保证良好的扩展性、灵活性和可迁移性。</p><p>前端领域比较典型的例子是<code>Webpack、Babel、PostCSS</code>以及<code>ESLint</code>, 这些应用需要应对复杂的定制需求，而且这些需求时刻在变，只有微内核架构才能保证灵活和可扩展性。</p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>Webpack的核心是一个<code>Compiler</code>，这个Compiler主要功能是集成插件系统、维护模块对象图, 对于模块代码具体编译工作、模块的打包、优化、分析、聚合统统都是基于外部插件完成的.<br>如上文说的Loader运用了管道模式，负责对源文件进行转译；那Plugin则可以将行为注入到Compiler运行的整个生命周期的钩子中, 完全访问Compiler的当前状态。</p><p>  <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5941cd43e9f4d11a714407104f172cc~tplv-k3u1fbpfcp-watermark.image" alt></p><p>这里还有一篇文章<a href="https://yunsong0922.github.io/2018/12/09/%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E5%BA%94%E7%94%A8%E7%A0%94%E7%A9%B6/" target="_blank" rel="noopener">微内核架构应用研究</a>专门写了前端微内核架构模式的一些应用，推荐阅读一下。</p><h1 id="六、微前端"><a href="#六、微前端" class="headerlink" title="六、微前端"></a>六、微前端</h1><blockquote><p>微前端旨在将单体前端分解成更小、更简单的模块，这些模块可以被独立的团队进行开发、测试和部署，最后再组合成一个大型的整体。</p></blockquote><p>  <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c2787d139ac44ef8a73ce09bba9b04d~tplv-k3u1fbpfcp-watermark.image" alt></p><p>微前端下各个应用模块是独立运行、独立开发、独立部署的，相对应的会配备更加自治的团队(一个团队干好一件事情)。微前端的实施还需要有稳固的前端基础设施和研发体系的支撑。<br>如果你想深入学习微前端架构，建议阅读<code>Phodal</code>的<a href="https://juejin.cn/user/3650034292754584/posts" target="_blank" rel="noopener">相关文章</a>，还有他的书《前端架构：从入门到微前端》。</p><h1 id="七、组件化"><a href="#七、组件化" class="headerlink" title="七、组件化"></a>七、组件化</h1><blockquote><p>在给定的软件系统中，基于组件的架构侧重于对广泛使用的功能进行关注点分离。即将不同的复杂性、关注点分离出来，分别进行处理，让每一小部分都拥有自己的关注焦点。通过定义、实现松散耦合的独立组件，将其组合到系统中，以降低整个系统的复杂度。</p></blockquote><p>  <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbdbc0c4d51d40caae67c145beacff8c~tplv-k3u1fbpfcp-watermark.image" alt></p><p>组件化具有一系列的优点：可重用、代码简洁、易测试等。</p><p>组件的发展过程：</p><ul><li><code>风格指南(Style Guide)</code>对设计的文字、颜色、LOGO、ICON等设计做出规范，产出物一般为Guidline，Guidline一般为UI的规范。</li><li><code>模式库(Pattern Library)</code>即UI组件库。模式库更侧重于前端开发，对界面元素的样式进行实现，其代码可供预览使用，产出物一般为组件库UI框架等，如Bootstrap库。</li><li><code>设计系统(Design System)</code>设计系统在某种程度上结合了风格指南和模式库，并附加了一些业务特定的元素，并且进一步完善了组件化到页面模板相关的内容。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/78040258" target="_blank" rel="noopener">架构设计：组件化架构</a></p><h1 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h1><blockquote><p>还有很多架构风格且这些风格主要应用于后端领域，这里就不一一阐述了。你可以通过扩展阅读了解这些模式</p></blockquote><ul><li>面向对象风格:将应用或系统任务分割为单独、可复用、可自给的对象，每个对象都包含数据、以及对象相关的行为</li><li>C/S:客户端/服务器风格</li><li>面向服务架构(SOA):指那些利用契约和消息将功能暴露为服务、消费功能服务的应用</li><li>N层/三层:和分层架构差不多，侧重物理层. 例如C/S风格就是一个典型的N层架构</li><li>点对点风格</li><li>微服务架构</li><li>云架构</li></ul><p><strong>通过上文，你估计会觉得架构风格比设计模式或者算法好理解多的，正所谓<code>大道至简</code>，但是<code>简洁而不简单！</code>大部分项目的架构不是一开始就是这样的，它们可能经过长期的迭代，踩着巨人的肩膀，一路走过来才成为今天的样子。</strong></p><p><em>希望本文可以给你一点启发，对于我们前端工程师来说，不应该只追求能做多酷的页面、掌握多少API，要学会通过现象看本质，举一反三融会贯通，这才是进阶之道。</em></p><p><br></p><hr><p>参考文章：</p><ul><li><a href="https://juejin.cn/post/6844903943068205064#heading-0" target="_blank" rel="noopener">透过现象看本质: 常见的前端架构风格和案例</a></li><li><a href="https://zhuanlan.zhihu.com/p/79388540" target="_blank" rel="noopener">架构设计：微前端架构</a></li><li><a href="https://www.jianshu.com/p/ae7b5a2f78ae" target="_blank" rel="noopener">深入理解 Redux 中间件</a></li><li><a href="https://www.cnblogs.com/doit8791/p/9343826.html" target="_blank" rel="noopener">五种常见软件架构</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c8205f9b6694a13920a77a86789c787~tplv-k3u1fbpfcp-watermark.image&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="前端" scheme="https://www.williamife.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Object.create</title>
    <link href="https://www.williamife.com/2020/11/02/Object.creat/"/>
    <id>https://www.williamife.com/2020/11/02/Object.creat/</id>
    <published>2020-11-02T09:15:00.000Z</published>
    <updated>2020-11-03T05:58:43.298Z</updated>
    
    <content type="html"><![CDATA[<p>语法：<br>Object.create(proto, [propertiesObject])<br><strong>方法创建一个新对象，使用现有的对象来提供新创建的对象的proto。</strong></p><p>参数：<br>proto : 必须。表示新建对象的原型对象，即该参数会被赋值到目标对象(即新对象，或说是最后返回的对象)的原型上。该参数可以是null， 对象， 函数的prototype属性 （创建空的对象时需传null , 否则会抛出TypeError异常）。<br>propertiesObject : 可选。 添加到新创建对象的可枚举属性（即其自身的属性，而不是原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应Object.defineProperties()的第二个参数。</p><p>3.返回值：<br>在指定原型对象上添加新属性后的对象。</p><p>案例说明：</p><p>1）创建对象的方式不同</p><p>new Object() 通过构造函数来创建对象, 添加的属性是在自身实例下。<br>Object.create() es6创建对象的另一种方式，可以理解为继承一个对象, 添加的属性是在原型下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Object() 方式创建</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;  <span class="attr">rep</span> : <span class="string">'apple'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Object</span>(a)</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;rep: "apple"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b.__proto__) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b.rep) <span class="comment">// &#123;rep: "apple"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create() 方式创建</span></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">rep</span>: <span class="string">'apple'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b.__proto__) <span class="comment">// &#123;rep: "apple"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b.rep) <span class="comment">// &#123;rep: "apple"&#125;</span></span><br></pre></td></tr></table></figure><p>Object.create()方法创建的对象时，属性是在原型下面的，也可以直接访问 b.rep // {rep: “apple”} ,<br>此时这个值不是吧b自身的，是它通过原型链proto来访问到b的值。</p><p>2）创建对象属性的性质不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></span><br><span class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></span><br><span class="line">o.p = <span class="number">24</span></span><br><span class="line">o.p</span><br><span class="line"><span class="comment">//42</span></span><br><span class="line"></span><br><span class="line">o.q = <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(prop)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"q"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> o.p</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Object.create() 用第二个参数来创建非空对象的属性描述符默认是为false的，而构造函数或字面量方法创建的对象属性的描述符默认为true。看下图解析：</p><p>3）创建空对象时不同</p><p>当用构造函数或对象字面量方法创建空对象时，对象时有原型属性的，即有<em>proto</em>;<br>当用Object.create()方法创建空对象时，对象是没有原型属性的。</p><p>4）<strong>proto</strong> 属性<br>JavaScript 的对象继承是通过原型链实现的。ES6 提供了更多原型对象的操作方法。<br><strong>proto</strong>属性（前后各两个下划线），用来读取或设置当前对象的prototype对象。目前只有浏览器环境必须部署有这个属性，其他运行环境不一定要部署，因此不建议使用这个属性，而是使用下面这些来 Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。</p><p>Object.create()<br>描述：该方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>；<br>格式：Object.create(proto[, propertiesObject])<br>用法：如果用传统的方法要给一个对象的原型上添加属性和方法，是通过 <strong>propt</strong> 实现的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proto = &#123;</span><br><span class="line">    y: <span class="number">20</span>,</span><br><span class="line">    z: <span class="number">40</span>,</span><br><span class="line">    showNum()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.create(proto);</span><br></pre></td></tr></table></figure><p>如果是不用Object,create()方法，我们是如何给对象原型添加属性和方法的？<br>—— 通过构造函数或者类，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个构造函数或者类</span></span><br><span class="line"><span class="keyword">var</span> People = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">People.prototype.y = <span class="number">20</span></span><br><span class="line">People.prototype.showNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//通过构造函数创建实例</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> People();</span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__ === People.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>现在有 Object.create() 就简单的多了</p><p>Object.setPrototypeOf<br>描述：该方法的作用与 <strong>proto</strong> 相同，用来设置一个对象的 prototype 对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。<br>格式：Object.setPrototypeOf(object, prototype)<br>用法：<br>var proto = {<br>    y: 20,<br>    z: 40<br>};<br>var o = { x: 10 };<br>Object.setPrototypeOf(o, proto);</p><p>输出结果中看出，添加的方法是在原型上的。就类似于</p><p>obj.<strong>proto</strong> = proto;</p><p>Object.getPrototypeOf()<br>描述：用于读取一个对象的原型对象；<br>格式：Object.getPrototypeOf(obj);<br>用法：<br>Object.getPrototypeOf(‘foo’) === String.prototype // true<br>Object.getPrototypeOf(true) === Boolean.prototype // true</p><p>4.1）原型属性的继承<br>这里结合一个例子来说说这几个方法的使用：<br>场景：拷贝一个构造函数的实例。</p><p>var triangle = {a: 1, b: 2, c: 3};</p><p>function ColoredTriangle() {<br>  this.color = ‘red’;<br>}</p><p>//ColoredTriangle.prototype = triangle;  //ColoredTriangle.prototype.constructor === ColoredTriangle// false<br>Object.assign(ColoredTriangle.prototype, triangle) //ColoredTriangle.prototype.constructor === ColoredTriangle// true</p><p>var c = new ColoredTriangle();<br>打印出 实例c 看看结构是怎样的</p><p>其中 color 属性在实例上，而其他的原型上。<br>现在来拷贝一个 实例 c2</p><p>var c2 = Object.assign({},c)<br>console.log(c2.color); //red<br>console.log(c2.a); //undefined<br>因为 Object.assing 是不能拷贝到继承或原型上的方法的。所以 实例c2 没有 a 这个属性。那要怎么要才能拷贝到原型上的方法呢？</p><p>4.1.1）第一种方法</p><p>var originProto = Object.getPrototypeOf(c);<br>var originProto2 = Object.create(originProto);<br>var c2 = Object.assign(originProto2, c);<br>//var c2 = Object.assign(Object.create(Object.getPrototypeOf(c)), c)</p><p>console.log(c2.color); // red<br>console.log(c2.a); // 1<br>这样就实现了原型属性的拷贝。<br>Object.getPrototypeOf(c) 既 originProto 得到的是原型上的 //{a: 1, b: 2, c: 3}；<br>Object.create(originProto) 既 originProto2 既是创建了一个 {a: 1, b: 2, c: 3} 在原型上的新对象；<br>Object.assign(originProto2, c) 在源对象originProto2 上合并对象 c；</p><p>4.1.2）第二种方法 （推荐）</p><p>var c = new ColoredTriangle();<br>var c2 = Object.create(Object.getPrototypeOf(c), Object.getOwnPropertyDescriptors(c));</p><p>console.log(c2.color); // red<br>console.log(c2.a); // 1<br>可以把Object.create()的参数理解为：第一个参数是放在新对象的原型上的，第二个参数是放在新对象的实例上的。<br>所以上面例子<br>Object.getPrototypeOf() 得到的是 c 对象的原型，然后作为第一个参数，所以会在新对象c2 的原型上。<br>Object.getOwnPropertyDescriptors() 得到是 c 对象自身的可枚举属性，作为第二个参数，放在 c2 的实例上。</p><p>为什么说推荐这个方法呢？因为Object.assign() 方法不能正确拷贝 get ，set 属性。</p><p>例如，我们给 c 实例添加一个 “colorGet” 属性，并设置该属性的get 描述符：</p><p>var c = new ColoredTriangle();<br>Object.defineProperty(c,’colorGet’, {<br>    enumerable: true, // 设为可枚举，不然 Object.assign 方法会过滤该属性<br>    get(){<br>        return “Could it return “ + this.color<br>    }<br>});</p><p>var c3 = Object.assign(Object.create(Object.getPrototypeOf(c)), c)<br>结果如下：</p><p>这里没有拷贝到 “colorGet” 的 get 描述符，而是直接把获取到的值赋值给 “colorGet” 。</p><p>那对于 get 描述符要怎么获取呢？ Object.getOwnPropertyDescriptors就专为解决这问题而生。<br>而又因为要拷贝原型上的属性，所以结合Object.create、Object.getPrototypeOf 方法一起使用。即上面的第二种实现方法，如下：</p><p>var c = new ColoredTriangle();<br>Object.defineProperty(c,’colorGet’, {<br>    enumerable: true, // 设为可枚举，不然 Object.assign 方法会过滤该属性<br>    get(){<br>        return “Could it return “ + this.color<br>    }<br>});</p><p>var c3 = Object.create(Object.getPrototypeOf(c), Object.getOwnPropertyDescriptors(c));<br>结果如下：</p><p>此时已经成功的拷贝到了get描述符啦。<br>虽然说实际开发上很少会要去修改 get 描述符，但是知道多一种方法，遇到这种情况时就知道该怎么去解决了。</p><p>注意：这些都只是一个层级的深拷贝。</p><p>上面实现 原型属性拷贝 中的两种方法中用到了 Object.getOwnPropertyDescriptors 、Object.assing() 、Object.create、Object.getPrototypeOf()方法，通常这几种方法都有一起结合使用。<br>如果上面的例子还不理解，这里把他简单的拿到 对象的继承 来讲解。理解的话就可以忽略啦。</p><p>4.2）原型属性的继承<br>以前，继承另一个对象，常常写成下面这样。</p><p>const obj = {<br>  <strong>proto</strong>: prot,<br>  foo: 123,<br>};<br>ES6 规定<strong>proto</strong>只有浏览器要部署，其他环境不用部署。如果去除<strong>proto</strong>，可以用 Object.create() 和 Object.assign() 来实现。</p><p>//现在可以这样写 方法1<br>const obj = Object.create(prot);<br>obj.foo = 123;</p><p>// 或者  方法2<br>const obj = Object.assign(<br>  Object.create(prot),<br>  {<br>    foo: 123,<br>  }<br>);</p><p>// 或者 方法3<br>const obj = Object.create(prot,Object.getOwnPropertyDescriptors({ foo: 123 }));<br>但是 Object.assign() 无法正确拷贝get属性和set属性的问题。例如：</p><p>var prot = {x: 1, y: 2}<br>var obj = {<br>  <strong>proto</strong>: prot,<br>  foo: 100,<br>  bar(){ return this.foo},<br>  get baz() {return this.foo}<br>};</p><p>var obj2 = Object.assign(Object.create(prot), obj)</p><p>上图中，obj 对象的 foo 属性是一个取值函数，Object.assign不会复制这个取值函数，只会拿到值以后，将这个值赋上去。</p><p>而 Object.getOwnPropertyDescriptors() 可以解决这个问题 实现get 、set 属性的正确拷贝，即方法3 ，如下：</p><p>var prot = {x: 1, y: 2}<br>var obj = {<br>  <strong>proto</strong>: prot,<br>  foo: 100,<br>  bar(){ return this.foo},<br>  get baz() {return this.foo}<br>};</p><p>var obj2 = Object.create(prot, Object.getOwnPropertyDescriptors(obj))</p><p>说了那么多种拷贝方法，怎么去选择呢，还是要看实际应用中的情况:</p><p>如果只是拷贝 自身可枚举属性，就可以只用 Object.assign 方法；<br>如果是要拷贝原型上的属性，就需要 Object.assign , Object.create, Object.getPrototypeOf 方法结合使用<br>如果是拷贝get /set 属性，就需要 结合 Ojbect.getOwnPropertyDescriptors 方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;语法：&lt;br&gt;Object.create(proto, [propertiesObject])&lt;br&gt;&lt;strong&gt;方法创建一个新对象，使用现有的对象来提供新创建的对象的proto。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;br&gt;proto : 必须。表示新建对象的原型对
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React常见问题汇总</title>
    <link href="https://www.williamife.com/2020/05/29/React%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://www.williamife.com/2020/05/29/React常见问题汇总/</id>
    <published>2020-05-29T06:05:00.000Z</published>
    <updated>2020-10-13T09:56:42.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是JSX"><a href="#什么是JSX" class="headerlink" title="-什么是JSX"></a>-什么是JSX</h3><p>即<code>JavaScript XML</code>。一种在React组件内部构建标签的类XML语法。JSX为react.js开发的一套语法糖，也是react.js的使用基础。React在不使用JSX的情况下一样可以工作，然而使用JSX可以提高组件的可读性，因此推荐使用JSX。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    let props = this.props;  </span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"my-component"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;props.url&#125;</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：<br>1.允许使用熟悉的语法来定义 HTML 元素树；<br>2.提供更加语义化且移动的标签；<br>3.程序结构更容易被直观化；<br>4.抽象了 React Element 的创建过程；<br>5.可以随时掌控 HTML 标签以及生成这些标签的代码；<br>6.是原生的 JavaScript。</p><hr><h3 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="-什么是虚拟DOM"></a>-什么是虚拟DOM</h3><p>虚拟DOM（VDOM）它是真实DOM的内存表示,一种编程概念，一种模式。它会和真实的DOM同步，比如通过ReactDOM这种库，这个同步的过程叫做<code>调和(Reconciliation)</code>。<br>虚拟DOM更多是一种模式，不是一种特定的技术。</p><hr><h3 id="为什么虚拟DOM会提高性能"><a href="#为什么虚拟DOM会提高性能" class="headerlink" title="-为什么虚拟DOM会提高性能"></a>-为什么虚拟DOM会提高性能</h3><p>虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没有必要的 dom 操作，从而提高性能。</p><p>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异把 2 所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新了。</p><hr><h3 id="React-diff原理"><a href="#React-diff原理" class="headerlink" title="-React diff原理"></a>-React diff原理</h3><p>把树形结构按照层级分解，只比较同级元素。<br>给列表结构的每个单元添加唯一的 key 属性，方便比较。<br>React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）<br>合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.<br>选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。</p><hr><h3 id="React中key的作用是什么"><a href="#React中key的作用是什么" class="headerlink" title="-React中key的作用是什么"></a>-React中key的作用是什么</h3><p>Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.state.todoItems.map(<span class="function">(<span class="params">&#123;item, key&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><em>在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。</em></strong></p><hr><h3 id="为什么不直接更新state状态"><a href="#为什么不直接更新state状态" class="headerlink" title="-为什么不直接更新state状态"></a>-为什么不直接更新state状态</h3><p>如果进行如下方式更新状态，那么它将不会重新渲染组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Wrong</span></span><br><span class="line">This.state.message =”Hello world”;</span><br></pre></td></tr></table></figure><p>而是使用 setState() 方法。它计划对组件状态对象的更新。状态改变时，组件通过重新渲染做出响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Correct</span></span><br><span class="line">This.setState(&#123;<span class="attr">message</span>: ‘Hello World’&#125;);</span><br></pre></td></tr></table></figure><p>注意：可以分配状态的唯一位置是构造函数。</p><hr><h3 id="调用setState之后发生了什么"><a href="#调用setState之后发生了什么" class="headerlink" title="-调用setState之后发生了什么"></a>-调用setState之后发生了什么</h3><p>在代码中调用 <code>setState</code> 函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的<code>调和过程（Reconciliation）</code>。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p><hr><h3 id="为什么建议传递给setState的参数是一个callback"><a href="#为什么建议传递给setState的参数是一个callback" class="headerlink" title="-为什么建议传递给setState的参数是一个callback"></a>-为什么建议传递给setState的参数是一个callback</h3><p>为什么建议传递给setState的参数是一个callback而不是一个对象?<br>因为 this.props 和 this.state 的更新可能是异步的，不能依赖它们的值去计算下一个state。</p><hr><h3 id="React生命周期函数-v16-4"><a href="#React生命周期函数-v16-4" class="headerlink" title="-React生命周期函数(v16.4)"></a>-React生命周期函数(v16.4)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/images/lifecycle.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>1.constructor(props)</strong></p><blockquote><p>react组件的构造函数在挂载之前被调用。在实现<code>React.Component</code>构造函数时，需要先在添加其他内容前，调用<code>super(props)</code>，用来将父组件传来的<code>props</code>绑定到这个类中，使用<code>this.props</code>将会得到。</p></blockquote><p><strong><em>官方建议：不要在constructor引入任何具有副作用和订阅功能的代码，这些应当在componentDidMount()中写入。</em></strong></p><p><code>constructor</code>中应当做些初始化的动作，如：初始化state，将事件处理函数绑定到类实例上，但也不要使用setState()。如果没有必要初始化state或绑定方法，则不需要构造constructor，或者把这个组件换成纯函数写法。</p><p>当然也可以利用props初始化state，在之后修改state不会对props造成任何修改，但仍然建议大家提升状态到父组件中，或使用redux统一进行状态管理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    color: props.initialColor</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.static getDerivedStateFromProps(nextProps, prevState)</strong></p><blockquote><p><code>getDerivedStateFromProps</code>在组件实例化后，和接受新的<code>props</code>后被调用。他返回一个对象来更新状态，或者返回null表示新的props不需要任何state的更新。</p></blockquote><p>如果是由于父组件的props更改，所带来的重新渲染，也会触发此方法。调用setState()不会触发getDerivedStateFromProps()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      list: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'up'</span>,props, state.list)</span><br><span class="line">  <span class="keyword">if</span> (state.list.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'down'</span>,props.list, state.list)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">list</span> : props.list&#125;; <span class="comment">//props.list</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><s>componentWillReceiveProps()/UNSAFE_componentWillReceiveProps(nextProps)</s></strong></p><blockquote><p>官方建议使用<code>getDerivedStateFromProps</code>函数代替<code>componentWillReceiveProps()</code>。当组件挂载后，接收到新的<code>props</code>后会被调用。如果需要更新state来响应props的更改，则可以进行this.props和nextProps的比较，并在此方法中使用<code>this.setState()</code>。</p></blockquote><p>如果父组件会让这个组件重新渲染，即使<code>props</code>没有改变，也会调用这个方法。react不会在组件初始化props时调用这个方法。调用<code>this.setState</code>也不会触发。</p><p><strong>3.render()</strong></p><blockquote><p><code>render()</code>方法是必需的。当他被调用时，他将计算<code>this.props</code>和<code>this.state</code>，并返回以下一种类型：</p></blockquote><ul><li><code>React元素</code>通过jsx创建，既可以是dom元素，也可以是用户自定义的组件。</li><li><code>字符串或数字</code>他们将会以文本节点形式渲染到dom中。</li><li><code>Portals</code>react16版本中提出的新的解决方案，可以使组件脱离父组件层级直接挂载在DOM树的任何位置。</li><li><code></code> 什么也不渲染</li><li><code>布尔值</code> 也是什么都不渲染，通常后跟组件进行判断。</li></ul><p>当返回<code></code>,<code>false</code>,<code>ReactDOM.findDOMNode(this)</code>将会返回null，什么都不会渲染。</p><p><code>render()</code>方法必须是一个纯函数，<strong>他不应该改变<code>state</code></strong>，也不能直接和浏览器进行交互，应该将事件放在其他生命周期函数中。 如果<code>shouldComponentUpdate()</code>返回<code>false</code>，<code>render()</code>不会被调用。</p><p><strong>Fragments</strong></p><blockquote><p>你也可以在render()中使用数组，如：(不要忘记给每个数组元素添加key，防止出现警告)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  return [</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"A"</span>&gt;</span>First item<span class="tag">&lt;/<span class="name">li</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"B"</span>&gt;</span>Second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"C"</span>&gt;</span>Third item<span class="tag">&lt;/<span class="name">li</span>&gt;</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">//换一种写法，可以不写key（v16++）</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>First item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Third item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.componentDidMount()</strong></p><blockquote><p>仅在客户端的第一次渲染之后执行(组件真正在被装载之后)。</p></blockquote><p>这是AJAX请求和DOM或状态更新应该发生的地方。此方法也用于与其他JavaScript框架以及任何延迟执行的函数(如 setTimeout 或 setInterval )进行集成，在这里使用它来更新状态，以便我们可以触发其他生命周期方法。</p><p><strong><s>componentWillMount() / UNSAFE_componentWillMount()</s></strong></p><blockquote><p><code>componentWillMount()</code>将在react未来版本中被弃用。<code>UNSAFE_componentWillMount()</code>在组件挂载前被调用，在这个方法中调用<code>setState()</code>不会起作用，是由于它在<code>render()</code>前被调用。</p></blockquote><p><strong><em>为了避免副作用和其他的订阅，官方都建议使用componentDidMount()代替。这个方法是用于在服务器渲染上的唯一方法。</em></strong></p><p><strong>5.shouldComponentUpdate(nextProps, nextState)</strong></p><blockquote><p>在未来版本，<code>shouldComponentUpdate()</code>将会作为一个提示而不是严格的指令，返回<code>false</code>仍然可能导致组件的重新渲染。官方并不建议在<code>shouldComponentUpdate()</code>中进行深度查询或使用<code>JSON.stringify()</code>，他效率非常低，并且损伤性能。</p></blockquote><p>调用shouldComponentUpdate使react知道，组件的输出是否受state和props的影响。默认每个状态的更改都会重新渲染，大多数情况下应该保持这个默认行为。</p><p>在渲染新的<code>props</code>或<code>state</code>前，shouldComponentUpdate会被调用。默认为true。这个方法不会在初始化时被调用，也不会在<code>forceUpdate()</code>时被调用。返回<code>false</code>不会阻止子组件在<code>state</code>更改时重新渲染。如果shouldComponentUpdate()返回false，<code>componentwillupdate,render和componentDidUpdate</code>不会被调用。</p><p><strong><s>componentWillUpdate/UNSAFE_componentWillUpdate(nextProps, nextState)</s></strong></p><blockquote><p>在渲染新的state或props时，UNSAFE_componentWillUpdate会被调用，将此作为在更新发生之前进行准备的机会。这个方法不会在初始化时被调用。</p></blockquote><p>不能在这里使用this.setState()，也不能做会触发视图更新的操作。如果需要更新state或props，调用getDerivedStateFromProps。</p><p><strong>6.getSnapshotBeforeUpdate()</strong></p><blockquote><p>在<code>render()</code>后的输出被渲染到DOM之前被调用。</p></blockquote><p>它使您的组件能够在它们被潜在更改之前捕获当前值（如滚动位置）。这个生命周期返回的任何值都将作为参数传递给<code>componentDidUpdate()</code>。</p><p><strong>7.componentDidUpdate(prevProps, prevState, snapshot)</strong></p><blockquote><p>在更新发生后立即调用<code>componentDidUpdate()</code>。此方法不用于初始渲染。当组件更新时，将此作为一个机会来操作DOM。只要您将当前的props与以前的props进行比较（例如，如果props没有改变，则可能不需要网络请求），这也是做网络请求的好地方。</p></blockquote><p>如果组件实现<code>getSnapshotBeforeUpdate()</code>生命周期，则它返回的值将作为第三个“快照”参数传递给<code>componentDidUpdate()</code>。否则，这个参数是<code>undefined</code>。</p><p><strong>8.componentWillUnmount()</strong></p><blockquote><p>在组件被卸载并销毁之前立即被调用。</p></blockquote><p>在此方法中执行任何必要的清理，例如使定时器无效，取消网络请求或清理在<code>componentDidMount()</code>中创建的任何监听。</p><p><strong>9.componentDidCatch(error, info)</strong></p><blockquote><p>错误边界是React组件，可以在其子组件树中的任何位置捕获JavaScript错误，记录这些错误并显示回退UI，而不是崩溃的组件树。错误边界在渲染期间，生命周期方法以及整个树下的构造函数中捕获错误。</p></blockquote><p>如果类组件定义了此生命周期方法，则它将成为错误边界。在它中调用<code>setState()</code>可以让你在下面的树中捕获未处理的JavaScript错误，并显示一个后备UI。只能使用错误边界从意外异常中恢复;不要试图将它们用于控制流程。</p><p><strong><em>错误边界只会捕获树中下面组件中的错误。错误边界本身不能捕获错误。</em></strong></p><hr><h3 id="React-性能优化是哪个周期函数"><a href="#React-性能优化是哪个周期函数" class="headerlink" title="-React 性能优化是哪个周期函数"></a>-React 性能优化是哪个周期函数</h3><blockquote><p>-shouldComponentUpdate是做什么的</p></blockquote><p><code>shouldComponentUpdate</code> 这个方法用来判断是否需要调用 render 方法重新描绘 dom。因为 dom 的描绘非常消耗性能，如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。</p><hr><h3 id="React中refs的作用是什么"><a href="#React中refs的作用是什么" class="headerlink" title="-React中refs的作用是什么"></a>-React中refs的作用是什么</h3><p>Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加 ref 属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Input Value: "</span>, <span class="keyword">this</span>.input.value)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">'text'</span></span><br><span class="line">          ref=&#123;(input) =&gt; <span class="keyword">this</span>.input = input&#125; /&gt;</span><br><span class="line">        &lt;button type=<span class="string">'submit'</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的 input 域包含了一个 ref 属性，该属性声明的回调函数会接收 input 对应的 DOM 元素，我们将其绑定到 this 指针以便在其他的类函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomForm</span> (<span class="params">&#123;handleSubmit&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> inputElement</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form onSubmit=&#123;() =&gt; handleSubmit(inputElement.value)&#125;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">'text'</span></span><br><span class="line">        ref=&#123;(input) =&gt; inputElement = input&#125; /&gt;</span><br><span class="line">      &lt;button type=<span class="string">'submit'</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="如何创建refs"><a href="#如何创建refs" class="headerlink" title="-如何创建refs"></a>-如何创建refs</h3><p>Refs 是使用 React.createRef() 方法创建的，并通过 ref 属性添加到 React 元素上。为了在整个组件中使用 refs ，只需将 ref 分配给构造函数中的实例属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.myRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="展示组件和容器组件之间有何不同"><a href="#展示组件和容器组件之间有何不同" class="headerlink" title="-展示组件和容器组件之间有何不同"></a>-展示组件和容器组件之间有何不同</h3><p>展示组件<code>(Presentational component)</code>:展示组件关心组件看起来是什么。展示专门通过 props 接受数据和回调，并且几乎不会有自身的状态，但当展示组件拥有自身的状态时，通常也只关心 <code>UI 状态</code>而不是<code>数据的状态</code>。</p><p>容器组件<code>(Container component)</code>:容器组件则更关心组件是如何运作的。容器组件会为展示组件或者其它容器组件提供数据和行为(behavior)，它们会调用 <code>Flux actions</code>，并将其作为回调提供给展示组件。容器组件经常是有状态的，因为它们是(其它组件的)数据源。</p><hr><h3 id="类组件和函数组件之间有什么区别"><a href="#类组件和函数组件之间有什么区别" class="headerlink" title="-类组件和函数组件之间有什么区别"></a>-类组件和函数组件之间有什么区别</h3><blockquote><p>无论是使用函数或是类来声明一个组件，它决不能修改它自己的 props 。所有 React 组件都必须是纯函数，并禁止修改其自身 props 。React是单项数据流，父组件改变了属性，那么子组件视图会更新。</p></blockquote><p><strong>类组件（ Class components ）</strong><br>属性 props 是外界传递过来的，状态 state 是组件本身的，状态可以在组件中任意修改，组件的属性和状态改变都会更新视图。<br>类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问 store 并维持状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;Welcome &#123; <span class="keyword">this</span>.props.name &#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Welcome name='react' /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p><strong>函数组件（functional component）</strong><br>该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span></span>;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>区别</strong></p><p>函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。</p><p>函数组件，类组件<br>是否有this?没有，有<br>是否有生命周期?没有，有<br>是否有状态state？没有，有</p><p><em>当组件仅是接收 props，并将组件自身渲染到页面时，该组件就是一个 <code>无状态组件(stateless component)</code>，可以使用一个纯函数来创建这样的组件。这种组件也被称为<code>哑组件dumb components</code>或<code>展示组件(Presentational component)</code></em></p><p><strong><em>为了提高性能，尽量使用函数组件。</em></strong></p><hr><h3 id="组件的状态-state-和属性-props-之间有何不同"><a href="#组件的状态-state-和属性-props-之间有何不同" class="headerlink" title="-组件的状态(state)和属性(props)之间有何不同"></a>-组件的状态(state)和属性(props)之间有何不同</h3><blockquote><p><code>state</code> 和 <code>props</code> 都是普通的JavaScript对象。尽管它们两者都具有影响渲染输出的信息，但它们在组件方面的功能不同。</p></blockquote><p><code>props</code>(properties 的简写)是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性(immutable)，只能通过外部组件主动传入新的 props 来重新渲染子组件，否则子组件的 props 以及展现形式不会改变。<br>组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)。Props 也不仅仅是数据–回调函数也可以通过 props 传递。</p><p><code>state</code> 的主要作用是用于组件保存、控制以及修改自己的状态，它只能在 <code>constructor</code> 中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的<code>setState()</code> 来修改，修改 state 属性会导致组件的重新渲染。</p><hr><h3 id="何为受控组件-controlled-component"><a href="#何为受控组件-controlled-component" class="headerlink" title="-何为受控组件(controlled component)"></a>-何为受控组件(controlled component)</h3><p>在 <code>HTML</code> 中，类似 <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 这样的表单元素会维护自身的状态，并基于用户的输入来更新。当用户提交表单时，前面提到的元素的值将随表单一起被发送。</p><p>但在 React 中会有些不同，包含表单元素的组件将会在 state 中追踪输入的值，并且每次调用回调函数时，如 onChange 更新 state，重新渲染组件。一个输入表单元素，它的值通过 React 的这种方式来控制，这样的元素就被称为<code>&quot;受控元素&quot;</code>。</p><p><strong>受控组件</strong></p><blockquote><p>受控组件就是组件的状态受React控制。上面提到过，既然通过设置input的value属性, 无法改变输入框值,那么我们把它和state结合在一起,再绑定onChange事件,实时更新value值就行了。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value: props.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input value=&#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">        onChange=&#123;e =&gt; <span class="keyword">this</span>.handleChange(e)&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非受控组件</strong></p><blockquote><p>非受控组件，即组件的状态不受React控制的组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>))</span><br></pre></td></tr></table></figure><p>在这个最简单的输入框组件里,我们并没有干涉input中的value展示,即用户输入的内容都会展示在上面。如果我们通过props给组件设置一个初始默认值,<code>defaultValue</code>属性是React内部实现的一个属性,目的类似于input的<code>placeholder</code>属性。</p><hr><h3 id="在构造函数中调用-super-props-的目的是什么"><a href="#在构造函数中调用-super-props-的目的是什么" class="headerlink" title="-在构造函数中调用 super(props) 的目的是什么"></a>-在构造函数中调用 super(props) 的目的是什么</h3><p>在 <code>super()</code> 被调用之前，子类是不能使用 <code>this</code> 的，在 <code>ES6</code> 中，子类必须在 <code>constructor</code> 中调用 <code>super()</code>。传递 <code>props</code> 给 <code>super()</code> 的原因则是便于(在子类中)能在 <code>constructor</code> 访问 <code>this.props</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用props：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props); <span class="comment">// Prints &#123; name: 'sudheer',age: 30 &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用props：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props); <span class="comment">// Prints undefined</span></span><br><span class="line">    <span class="comment">// But Props parameter is still available</span></span><br><span class="line">    <span class="built_in">console</span>.log(props); <span class="comment">// Prints &#123; name: 'sudheer',age: 30 &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// No difference outside constructor</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props) <span class="comment">// Prints &#123; name: 'sudheer',age: 30 &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码片段揭示了this.props行为仅在构造函数中有所不同,外部构造函数相同。</p><hr><h3 id="何为高阶组件-higher-order-component"><a href="#何为高阶组件-higher-order-component" class="headerlink" title="-何为高阶组件(higher order component)"></a>-何为高阶组件(higher order component)</h3><blockquote><p>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件。</p></blockquote><p>高阶组件是一个以组件为参数并返回一个新组件的函数。HOC 运行你重用代码、逻辑和引导抽象。基本上，这是从React的组成性质派生的一种模式，我们称它们为 “纯”组件， 因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件的任何行为。</p><p><strong><em>最常见的可能是 Redux 的 connect 函数。除了简单分享工具库和简单的组合，HOC 最好的方式是共享 React 组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC。</em></strong></p><hr><h3 id="除了在构造函数中绑定-this，还有其它方式吗"><a href="#除了在构造函数中绑定-this，还有其它方式吗" class="headerlink" title="-除了在构造函数中绑定 this，还有其它方式吗"></a>-除了在构造函数中绑定 this，还有其它方式吗</h3><p>你可以使用属性<code>初始值设定项</code>(property initializers)来正确绑定回调，<code>create-react-app</code> 也是默认支持的。在回调中你可以使用箭头函数，但问题是每次组件渲染时都会创建一个新的回调。</p><hr><h3 id="应该在-React-组件的何处发起-Ajax-请求"><a href="#应该在-React-组件的何处发起-Ajax-请求" class="headerlink" title="-应该在 React 组件的何处发起 Ajax 请求"></a>-应该在 React 组件的何处发起 Ajax 请求</h3><p>在 React 组件中，应该在 <code>componentDidMount</code> 中发起网络请求。这个方法会在组件第一次“挂载”(被添加到 DOM)时执行，在组件的生命周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前 <code>Ajax</code> 请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件上调用 setState，这将不起作用。在 <code>componentDidMount</code> 中发起网络请求将保证这有一个组件可以更新了。</p><hr><h3 id="描述事件在-React-中的处理方式"><a href="#描述事件在-React-中的处理方式" class="headerlink" title="-描述事件在 React 中的处理方式"></a>-描述事件在 React 中的处理方式</h3><p>为了解决跨浏览器兼容性问题，您的 React 中的事件处理程序将传递 <code>SyntheticEvent</code> 的实例，它是 React 的浏览器本机事件的跨浏览器包装器。</p><p>这些 <code>SyntheticEvent</code> 与您习惯的原生事件具有相同的接口，除了它们在所有浏览器中都兼容。有趣的是，React 实际上并没有将事件附加到子节点本身。React 将使用单个事件监听器监听顶层的所有事件。这对于性能是有好处的，这也意味着在更新 DOM 时，React 不需要担心跟踪事件监听器。</p><hr><h3 id="createElement-和-cloneElement-有什么区别"><a href="#createElement-和-cloneElement-有什么区别" class="headerlink" title="-createElement 和 cloneElement 有什么区别"></a>-createElement 和 cloneElement 有什么区别</h3><blockquote><p>React.createElement():JSX 语法就是用 React.createElement()来构建 React 元素的。</p></blockquote><p>它接受三个参数，第一个参数可以是一个标签名。如 div、span，或者 React 组件。第二个参数为传入的属性。第三个以及之后的参数，皆作为组件的子组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">    type,</span><br><span class="line">    [props],</span><br><span class="line">    [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>React.cloneElement()与 React.createElement()相似，不同的是它传入的第一个参数是一个 React 元素，而不是标签名或组件。新添加的属性会并入原有的属性，传入到返回的新元素中，而旧的子元素将被替换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.cloneElement(</span><br><span class="line">  element,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="React中有三种构建组件的方式"><a href="#React中有三种构建组件的方式" class="headerlink" title="-React中有三种构建组件的方式"></a>-React中有三种构建组件的方式</h3><p>React.createClass()、ES6 class 和无状态函数。</p><hr><h3 id="以下使用React-createElement的等价项是什么"><a href="#以下使用React-createElement的等价项是什么" class="headerlink" title="-以下使用React.createElement的等价项是什么"></a>-以下使用React.createElement的等价项是什么</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问题：</span></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/以下等同于什么使用 React.createElement ？</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/答：</span></span><br><span class="line"><span class="regexp">const element = React.createElement(</span></span><br><span class="line"><span class="regexp">  'h1',</span></span><br><span class="line"><span class="regexp">  &#123;className: 'greeting'&#125;,</span></span><br><span class="line"><span class="regexp">  'Hello, world!'</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><hr><h3 id="使用React-Hooks有什么优势"><a href="#使用React-Hooks有什么优势" class="headerlink" title="-使用React Hooks有什么优势"></a>-使用React Hooks有什么优势</h3><blockquote><p>hooks 是react 16.8 引入的特性，他允许你在不写class的情况下操作state和react的其他特性。</p></blockquote><p>hooks 只是多了一种写组件的方法，使编写一个组件更简单更方便，同时可以自定义hook把公共的逻辑提取出来，让逻辑在多个组件之间共享。<br>比如你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使用 Hook。</p><p><strong><em>ReactHooks的优点 ：无需复杂的DOM结构，简洁易懂</em></strong></p><hr><h3 id="为什么类方法需要绑定"><a href="#为什么类方法需要绑定" class="headerlink" title="-为什么类方法需要绑定"></a>-为什么类方法需要绑定</h3><p>在JavaScript中， <code>this</code> 的值取决于当前上下文。在React类的组件方法中，开发人员通常希望它引用组件的当前实例，因此有必要 将 这些方法 绑定 到该实例。通常，这是在构造函数中完成的，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubmitButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isFormSubmitted: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      isFormSubmitted: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="简述-flux-思想"><a href="#简述-flux-思想" class="headerlink" title="-简述 flux 思想"></a>-简述 flux 思想</h3><blockquote><p>Flux 的最大特点，就是数据的”单向流动”。有四个组成部分 <code>action</code>，<code>dispatcher</code>，<code>view</code>，<code>store</code></p></blockquote><p>用户访问 View<br>View 发出用户的 Action<br>Dispatcher 收到 Action，要求 Store 进行相应的更新<br>Store 更新后，发出一个”change”事件<br>View 收到”change”事件后，更新页面</p><hr><h3 id="简述-redux-思想"><a href="#简述-redux-思想" class="headerlink" title="-简述 redux 思想"></a>-简述 redux 思想</h3><blockquote><p>redux 是一个应用数据流框架，主要是解决了组件间状态共享的问题。原理是集中式管理，主要有三个核心方法，<code>action</code>，<code>store</code>，<code>reducer</code></p></blockquote><p><code>view</code> 调用 <code>store</code> 的 <code>dispatch</code> 接收 <code>action</code> 传入 <code>store</code> ，<code>reducer</code> 进行 <code>state</code> 操作，<br><code>view</code> 通过 <code>store</code> 提供的 <code>getState</code> 获取最新的数据，</p><p><code>Redux</code> 和 <code>Flux</code> 很像。主要区别在于 Flux 有多个可以改变应用状态的 store，在 Flux 中 dispatcher 被用来传递数据到注册的回调事件，但是在 <code>redux</code> 中只能定义一个可更新状态的 <code>store</code>，<code>redux</code> 把 store 和 Dispatcher 合并,结构更加简单清晰。</p><p><strong><em>一般情况下，我们在构建多交互，多数据流的复杂项目应用时才会使用它们。</em></strong></p><hr><h3 id="redux-有什么缺点"><a href="#redux-有什么缺点" class="headerlink" title="-redux 有什么缺点"></a>-redux 有什么缺点</h3><p>一个组件所需要的数据，必须由父组件传过来，而不能像 <code>flux</code> 中直接从 <code>store</code> 取。当一个组件相关数据更新时，即使父组件不需要用到这个组件，父组件还是会重新 <code>render</code>，可能会有效率影响，或者需要写复杂的 <code>shouldComponentUpdate</code> 进行判断。</p><hr><h3 id="描述Flux与MVC"><a href="#描述Flux与MVC" class="headerlink" title="-描述Flux与MVC"></a>-描述Flux与MVC</h3><p>传统的MVC模式在分离数据（模型），UI（视图）和逻辑（控制器）的关注方面效果很好，但是MVC架构经常遇到两个主要问题：</p><ul><li>数据流定义不佳： 跨视图进行的级联更新通常会导致纠结的事件网，难以调试。</li><li>缺乏数据完整性： 可以从任何地方对模型数据进行突变，从而在整个UI上产生不可预测的结果。</li></ul><p>使用Flux模式，复杂的UI不再受到级联更新的困扰。任何给定的React组件都将能够根据商店提供的数据重建其状态。Flux模式还通过限制对共享数据的直接访问来增强数据完整性。</p><hr><h3 id="React-Context是什么"><a href="#React-Context是什么" class="headerlink" title="-React Context是什么"></a>-React Context是什么</h3><blockquote><p>React文档官网并未对 Context 给出“是什么”的定义，更多是描述使用的 Context 的场景，以及如何使用 Context 。</p></blockquote><p>官网对于使用 Context 的场景是这样描述的：<br><code>In Some Cases, you want to pass data through the component tree without having to pass the props down manuallys at every level. you can do this directly in React with the powerful &quot;context&quot; API.</code></p><p><strong>简单说就是，当你不想在组件树中通过逐层传递 props 或者 state 的方式来传递数据时，可以使用 Context 来实现 跨层级 的组件数据传递。</strong></p><ul><li>使用props或者state传递数据，数据自顶下流。<!-- pic1 --></li><li>使用 Context ，可以跨越组件进行数据传递。<!-- pic2 --></li></ul><hr><h3 id="React-Fiber是什么"><a href="#React-Fiber是什么" class="headerlink" title="-React Fiber是什么"></a>-React Fiber是什么</h3><p>React Fiber 并不是所谓的<code>纤程（微线程、协程）</code>，而是一种基于浏览器的单线程调度算法，背后的支持 API 是大名鼎鼎的：<code>requestIdleCallback</code>。</p><p>Fiberl是一种将 <code>Reconciliation</code> （递归 diff），拆分成无数个小任务的算法；它随时能够停止，恢复。停止恢复的时机取决于当前的<code>一帧</code>（16ms）内，还有没有足够的时间允许计算。</p><hr><p><br></p><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/91725031" target="_blank" rel="noopener">高质量React面试题</a></li><li><a href="https://segmentfault.com/a/1190000016885832?utm_source=tag-newest" target="_blank" rel="noopener">常见react面试题汇总</a></li><li><a href="https://blog.csdn.net/qq_34134278/article/details/81328464" target="_blank" rel="noopener">React组件生命周期概述(16.4)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是JSX&quot;&gt;&lt;a href=&quot;#什么是JSX&quot; class=&quot;headerlink&quot; title=&quot;-什么是JSX&quot;&gt;&lt;/a&gt;-什么是JSX&lt;/h3&gt;&lt;p&gt;即&lt;code&gt;JavaScript XML&lt;/code&gt;。一种在React组件内部构建标签的类XML语法
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
      <category term="React" scheme="https://www.williamife.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Network 之 Resource Timing字段解析</title>
    <link href="https://www.williamife.com/2020/02/25/%E6%B5%8F%E8%A7%88%E5%99%A8Timing/"/>
    <id>https://www.williamife.com/2020/02/25/浏览器Timing/</id>
    <published>2020-02-25T06:48:00.000Z</published>
    <updated>2020-02-24T09:49:44.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Resource Timing API提供了让用户查看一个资源从输入url到下载下来经历的各个过程所消耗的时间，借此可以来衡量网站的性能。我们可以通过Resource Timing Api监控哪个阶段消耗时间比较长，然后针对该阶段进行优化。了解网络下载资源的阶段至关重要。这是修复加载问题的基础。</p></blockquote><h1 id="一、浏览器DevTools"><a href="#一、浏览器DevTools" class="headerlink" title="一、浏览器DevTools"></a>一、浏览器DevTools</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/images/web1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>Queueing</strong><code>队列</code><br>排队的时间花费。可能由于该请求被渲染引擎认为是优先级比较低的资源（图片）、服务器不可用、超过浏览器并发请求的最大连接数（Chrome的最大并发连接数是6）。</p><p><strong>Stalled / Blocking</strong><code>停止/阻塞</code><br>是浏览器得到要发出这个请求的指令，到请求可以发出的等待时间，一般是代理协商、以及等待可复用的TCP连接释放的时间，不包括DNS查询、建立TCP连接等时间等。</p><p><strong>Proxy negotiation</strong><code>代理协商</code><br>与代理服务器连接的时间花费(如有)。<br>主要是浏览器通过代理服务器去服务目标服务，如本地代理Fiddler，一般无法优化。</p><p><strong>DNS Lookup</strong><code>DNS查找</code><br>执行DNS查找的时间，每个新域pagerequires DNS查找一个完整的往返。 DNS查询的时间，当本地DNS缓存没有的时候，这个时间可能是有一段长度的。</p><p><strong>Initial connection / Connecting</strong><code>初始连接/连接</code><br>建立TCP连接的时间，就相当于客户端从发请求开始到TCP握手结束这一段，包括DNS查询+Proxy时间+TCP握手时间。</p><p><strong>SSL</strong><code>安全套接层</code><br>(Secure Sockets Layer 安全套接层)及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</p><p><strong>Request sent / Sending</strong><code>请求已发送/正在发送</code><br>请求第一个字节发出前到最后一个字节发出后的时间（上传时间）。</p><p><strong>Waiting（TTFB）</strong><code>等待响应</code><br>请求发出后，到收到响应的第一个字节所花费的时间(Time To First Byte)。<br>通常是耗费时间最长的，通常受到线路、服务器距离等因素的影响。它包含了TCP连接时间，发送HTTP请求时间和获得响应消息第一个字节的时间。</p><p><strong>Content Download / Downloading</strong><code>内容下载/下载</code><br>收到响应的第一个字节，到接受完最后一个字节的时间（下载时间）。<br>浏览器开始收到服务器响应数据的时间=后台处理时间+重定向时间，是反映服务端响应速度的重要指标。</p><p><br></p><h1 id="二、Resource-Timing-Api"><a href="#二、Resource-Timing-Api" class="headerlink" title="二、Resource Timing Api"></a>二、Resource Timing Api</h1><blockquote><p>所有网络请求都被视为资源。当它们通过网络检索时，分为不同的生命周期。Network(网络)面板使用的Resource Timing API和提供给开发者的API是一样的。</p></blockquote><p>  <img src="/img/images/web2.png" alt></p><p><strong>注意: 当使用跨源资源的<code>Resource Timing API</code>时， 请确保所有资源都有CORS头信息。Resource Timing API提供了关于每个单独资源接收时间的详细信息。</strong></p><p>请求生命周期的主要阶段是：</p><p><strong><code>Redirect</code></strong><br>立即开始startTime。<br>如果发生重定向, redirectStart也会开始计时。<br>如果重定向发生在此阶段结束时，那么redirectEnd将被采用。</p><p><strong><code>App Cache</code></strong><br>如果浏览器有缓存，将采用fetchStart时间。</p><p><strong><code>DNS</code></strong><br>domainLookupStart 记录DNS请求开始的时间。<br>domainLookupEnd 记录DNS请求结束的时间。</p><p><strong><code>TCP</code></strong><br>connectStart 记录开始连接到服务器的时间。<br>如果用了TLS或SSL，secureConnectionStart记录开始连接时间。<br>connectEnd 记录连接完毕时间。</p><p><strong><code>Request</code></strong><br>requestStart记录请求发送到服务器的时间。</p><p><strong><code>Response</code></strong><br>responseStart记录最开始的响应时间。<br>responseEnd记录响应结束时间。</p><p>通过window.performance.getEntriesByType(‘resource’)获取所有的PerformanceResourceTiming：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'performance'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取的是所有的PerformanceResourceTiming</span></span><br><span class="line">    <span class="keyword">var</span> resources = <span class="built_in">window</span>.performance.getEntriesByType(<span class="string">'resource'</span>)</span><br><span class="line">    <span class="comment">// 遍历各个资源加载的时间</span></span><br><span class="line">    resources.map(<span class="function">(<span class="params">resource</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这里以图片为例，判断图片加载的时间</span></span><br><span class="line">        <span class="keyword">if</span>(resource.initiatorType === <span class="string">'img'</span>) &#123;</span><br><span class="line">            <span class="comment">// duration取的是整个过程中经历的时间，即startTime到responseEnd直接的时间,</span></span><br><span class="line">            <span class="comment">// 即等于resource.responseEnd - resource.startTime</span></span><br><span class="line">            <span class="keyword">if</span>(resource.duration &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">                <span class="comment">// 图片加载超过了5秒了，上报服务器，提示图片加载过长</span></span><br><span class="line">                reportToServer()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，上面的代码需要在onload事件上面执行（onload会在图片加载完毕以后调用）。</strong></p><p>PerformanceResourceTimeing包含以下的属性：</p><p><code>initiatorType</code>：资源的类型，有img、script、link</p><p>下面的属性是以毫秒为单位，对应上图</p><ul><li><p><code>redirectStart</code></p></li><li><p><code>redirectEnd</code></p></li><li><p><code>fetchStart</code></p></li><li><p><code>domainLookupStart</code></p></li><li><p><code>domainLookupEnd</code></p></li><li><p><code>connectStart</code></p></li><li><p><code>connectEnd</code></p></li><li><p><code>secureConnectionStart</code></p></li><li><p><code>requestStart</code></p></li><li><p><code>responseStart</code></p></li><li><p><code>responseEnd</code></p></li></ul><p><strong>所以我们得出这样的一个计算：</strong><br>查看DNS查询时间: <code>domainLookupEnd</code> - <code>domainLookupStart</code><br>查看TCP三次握手时间: <code>connectEnd</code> - <code>connectStart</code><br>request请求时间: <code>responseEnd</code> - <code>responseStart</code><br>整个过程时间: <code>responseEnd</code> - <code>startTime</code> 或者 <code>duration</code></p><p><br></p><p>参考文章：</p><ul><li><a href="https://segmentfault.com/a/1190000015133004?utm_source=tag-newest" target="_blank" rel="noopener">Network Resource Timing 我的请求慢在哪</a></li><li><a href="https://juejin.im/post/5b8e737c6fb9a019fd147835#heading-3" target="_blank" rel="noopener">利用Resource Timing监控资源加载速度</a></li><li><a href="https://www.breakyizhan.com/chromeconsole/2216.htmlt" target="_blank" rel="noopener">Chrome DevTools谷歌浏览器开发者工具了解资源加载时序</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Resource Timing API提供了让用户查看一个资源从输入url到下载下来经历的各个过程所消耗的时间，借此可以来衡量网站的性能。我们可以通过Resource Timing Api监控哪个阶段消耗时间比较长，然后针对该阶段进行优化。了解网络
      
    
    </summary>
    
    
      <category term="开发" scheme="https://www.williamife.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>在centos下搭建npm镜像</title>
    <link href="https://www.williamife.com/2019/12/01/NPM/"/>
    <id>https://www.williamife.com/2019/12/01/NPM/</id>
    <published>2019-12-01T11:59:00.000Z</published>
    <updated>2019-12-19T10:03:18.905Z</updated>
    
    <content type="html"><![CDATA[<p><strong>想搭建一个属于公司内部的 npm 镜像？这边文章或许能帮到你！</strong></p><ul><li>公司开发环境与外网隔绝，需要搭建内网npm源</li><li>确保npm服务快速、稳定，提高下载速度</li><li>不是搭建 npm 私服，而是镜像源</li></ul><p>npmjs.org将自己的项目挂在<a href="https://github.com/npm/npm-registry-couchapp" target="_blank" rel="noopener">https://github.com/npm/npm-registry-couchapp</a>。原项目项目地址为：<code>https://github.com/isaacs/npmjs.org</code>。需要制作镜像的同学可以按照说明来制作镜像，首先你需要安装CouchDB 1.4.0或更新的版本。</p><p>由于文档较少及项目更新导致操作流程不一致，在实践中出现一些坑，只能亲自填坑。</p><p><br></p><h1 id="一、安装CouchDB"><a href="#一、安装CouchDB" class="headerlink" title="一、安装CouchDB"></a>一、安装CouchDB</h1><blockquote><p>使用 YUM 安装，推荐阅读 <a href="https://blog.csdn.net/qq_21816375/article/details/80353268" target="_blank" rel="noopener">CouchDB安装以及使用</a>这篇文章，下面列举几个重要的步骤。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_9_centos ~]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure><h2 id="1、安装rpm仓库"><a href="#1、安装rpm仓库" class="headerlink" title="1、安装rpm仓库"></a>1、安装rpm仓库</h2><p>修改/etc/yum.repos.d/bintray-apache-couchdb-rpm.repo，命令如下：</p><p>vim /etc/yum.repos.d/bintray-apache-couchdb-rpm.repo<br>添加如下内容，保存并退出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[bintray--apache-couchdb-rpm]</span><br><span class="line">name=bintray--apache-couchdb-rpm</span><br><span class="line">baseurl=http://apache.bintray.com/couchdb-rpm/el$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><h2 id="2、修改default-ini"><a href="#2、修改default-ini" class="headerlink" title="2、修改default.ini"></a>2、修改default.ini</h2><p>由于<code>couchdb</code>默认是监听本地的请求，因此你需要配置它，让它可以接受来自局域网内的请求，将配置中的<code>[httpd]</code>段端口和地址前面的分号注释去掉，将<code>127.0.0.1</code>改成<code>0.0.0.0</code>然后重启服务即可。</p><p>安装完成之后，启动和停止的命令如下：<br>$ sudo systemctl start couchdb<br>$ sudo systemctl stop couchdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port = 5984 // 默认端口号，可修改</span><br><span class="line">bind_address = 0.0.0.0 //把127.0.0.1修改为0.0.0.0</span><br></pre></td></tr></table></figure><p>启动成功后访问<a href="http://localhost:5984/" target="_blank" rel="noopener">http://localhost:5984/</a>会出现如下图所示：</p><p>  <img src="/img/images/npm1.png" alt></p><p>进入数据库配置页面<a href="http://localhost:5984/_utils/#" target="_blank" rel="noopener">http://localhost:5984/_utils/#</a></p><p>  <img src="/img/images/npm2.png" alt></p><p><br></p><h1 id="二、下载couchapp"><a href="#二、下载couchapp" class="headerlink" title="二、下载couchapp"></a>二、下载couchapp</h1><blockquote><p>下面就是couchapp的使用说明了，简单翻译下。</p></blockquote><ul><li><p>You need CouchDB version 1.4.0 or higher. 1.5.0 or higher is best.<br>你需要CouchDB 1.4.0 以上的版本，yum 会默认安装最新版本，我目前安装的是 2.3.1。</p></li><li><p>Once you have CouchDB installed, create a new database:<br><code>curl -X PUT http://localhost:5984/registry</code><br>使用这个命令创建名为<code>registry</code>数据库，也可以直接在页面上配置。</p></li><li><p>You’ll need the following entries added in your local.ini<br>然后把这一段内容放进<code>local.ini</code>，我的路径为<code>/opt/couchdb/etc</code>。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[couch_httpd_auth]</span><br><span class="line">public_fields = appdotnet, avatar, avatarMedium, avatarLarge, date, email, fields, freenode, fullname, github, homepage, name, roles, twitter, type, _id, _rev</span><br><span class="line">users_db_public = true</span><br><span class="line"></span><br><span class="line">[httpd]</span><br><span class="line">secure_rewrites = false</span><br><span class="line"></span><br><span class="line">[couchdb]</span><br><span class="line">delayed_commits = false</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>最后就是复制整个项目啦，并且执行相应的脚本。用户名和密码不是必须，但最好是创建用户名和密码，否则脚本可能运行出错。</p></blockquote><p>Clone the repository if you haven’t already, and cd into it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git clone git:<span class="comment">//github.com/npm/npm-registry-couchapp</span></span><br><span class="line">cd npm-registry-couchapp</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm start \</span><br><span class="line">  --npm-registry-couchapp:couch=http:<span class="comment">//admin:password@localhost:5984/registry</span></span><br><span class="line"></span><br><span class="line">npm run load \</span><br><span class="line">  --npm-registry-couchapp:couch=http:<span class="comment">//admin:password@localhost:5984/registry</span></span><br><span class="line"></span><br><span class="line">npm run copy \</span><br><span class="line">  --npm-registry-couchapp:couch=http:<span class="comment">//admin:password@localhost:5984/registry</span></span><br><span class="line"></span><br><span class="line">vim ~<span class="regexp">/.npmrc</span></span><br><span class="line"><span class="regexp">_npm-registry-couchapp:couch=http:/</span><span class="regexp">/admin:password@localhost:5984/</span>registry</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/images/npm3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/images/npm4.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>会遇到问题的地方上面都过了一遍，在couchdb的<strong>web管理界面</strong><a href="http://localhost:5984/_utils/#/replication" target="_blank" rel="noopener">http://localhost:5984/_utils/#/replication</a>进行同步操作，记得勾选连续<code>Continuous</code>而不是一次性<code>One time</code>，让脚本不停的跑，由于数据量大，同步镜像需要很长时间。</p><p><br></p><h1 id="三、测试使用镜像"><a href="#三、测试使用镜像" class="headerlink" title="三、测试使用镜像"></a>三、测试使用镜像</h1><p>说明文档里提到三种方式，我们直接使用全局配置把registry地址改成我们内网的即可，然后就可以跟平常一样使用npm安装模块，你会发现安装模块时请求的是内网镜像地址了。</p><p><strong>npm config set registry <a href="http://localhost:5984/registry/_design/app/_rewrite" target="_blank" rel="noopener">http://localhost:5984/registry/_design/app/_rewrite</a></strong></p><p>然后测试一下看看：<strong>npm search node</strong></p><p>Bingo！</p><p><br></p><blockquote><p>文章中提到的localhost地址记得改成你自己实际的ip地址，在镜像完成同步之前，若你使用npm命令测试安装可能看到404的结果，不要着急。</p></blockquote><p><br></p><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/qq_21816375/article/details/80353268" target="_blank" rel="noopener">CouchDB安装以及使用</a></li><li><a href="http://ju.outofmemory.cn/entry/55280" target="_blank" rel="noopener">centos下搭建npm镜像</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;想搭建一个属于公司内部的 npm 镜像？这边文章或许能帮到你！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司开发环境与外网隔绝，需要搭建内网npm源&lt;/li&gt;
&lt;li&gt;确保npm服务快速、稳定，提高下载速度&lt;/li&gt;
&lt;li&gt;不是搭建 npm 私服，而是
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://www.williamife.com/tags/Node-js/"/>
    
      <category term="Linux" scheme="https://www.williamife.com/tags/Linux/"/>
    
      <category term="npm" scheme="https://www.williamife.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Node.js之进程与线程</title>
    <link href="https://www.williamife.com/2019/11/27/Node%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    <id>https://www.williamife.com/2019/11/27/Node之线程与进程/</id>
    <published>2019-11-27T08:15:15.000Z</published>
    <updated>2020-03-17T13:32:27.215Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章通过Node.js的角度讲解进程与线程，除了介绍概念外还会讲解一些在项目中的实战的应用。</p></blockquote><p>在文章开始前先问几个问题：</p><ol><li><p>Node.js是单线程吗？</p></li><li><p>Node.js 做耗时的计算时候，如何避免阻塞？</p></li><li><p>Node.js如何实现多进程的开启和关闭？</p></li><li><p>Node.js可以创建线程吗？</p></li><li><p>你们开发过程中如何实现进程守护的？</p></li><li><p>除了使用第三方模块，你们自己是否封装过一个多进程架构?</p></li></ol><p><br></p><h1 id="一、-进程"><a href="#一、-进程" class="headerlink" title="一、 进程"></a>一、 进程</h1><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的<code>基本单位</code>，是操作系统结构的基础，进程是线程的<code>容器</code>（来自百科）。我们启动一个服务、运行一个实例，就是开一个服务进程。<code>多进程</code>就是进程的复制（fork），<code>fork</code> 出来的每个进程都拥有自己的独立空间地址、数据栈，一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 <code>IPC</code> 通信，进程之间才可数据共享。</p><p><br></p><h1 id="二、-线程"><a href="#二、-线程" class="headerlink" title="二、 线程"></a>二、 线程</h1><p>线程是操作系统能够进行运算调度的<code>最小单位</code>，首先我们要清楚线程是隶属于进程的，被包含于进程之中。一个线程只能隶属于一个进程，但是一个进程是可以拥有多个线程的。<br>同一块代码，可以根据系统CPU核心数启动多个进程，每个进程都有属于自己的独立运行空间，进程之间是不相互影响的。同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等。但同一进程中的多个线程有各自的<code>调用栈</code>（call stack），自己的<code>寄存器环境</code>（register context），自己的<code>线程本地存储</code>（thread-local storage)，线程又有单线程和多线程之分，具有代表性的 JavaScript、Java 语言。</p><p><br></p><h2 id="1-单线程"><a href="#1-单线程" class="headerlink" title="1. 单线程"></a>1. 单线程</h2><p>Javascript 就是属于单线程，程序顺序执行，可以想象一下队列，前面一个执行完之后，后面才可以执行，当你在使用单线程语言编码时切勿有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理。你如果采用 Javascript 进行编码时候，请尽可能的使用异步操作。</p><p>Google 的V8 Javascript引擎已经在Chrome浏览器里证明了它的性能，所以Node.js的作者Ryan Dahl选择了v8作为Node.js的执行引擎，v8赋予Node.js高效性能的同时也注定了Node.js和大名鼎鼎的Nginx一样，都是以单线程为基础的，当然这也正是作者Ryan Dahl设计Node.js的初衷。</p><blockquote><p>单线程优缺点</p></blockquote><p><strong>高性能</strong><br>首先，单线程避免了频繁创建、切换进程的开销，使执行速度更加迅速。<br>第二，资源占用小，Node.js在大负荷下对内存占用仍然很低。</p><p><strong>线程安全</strong><br>单线程的js还保证了绝对的线程安全，不用担心同一变量同时被多个线程进行读写而造成的程序崩溃。线程安全的同时也解放了开发人员，免去了多线程编程中忘记对变量加锁或者解锁造成的悲剧。</p><p><strong>异步和非阻塞</strong><br>Node.js是单线程的，但是它如何做到I/O的异步和非阻塞的呢？其实Node.js在底层访问I/O还是多线程的，Node.js的fs模块用到libuv来处理I/O，所以在我们看来Node.js的代码就是非阻塞和异步形式的。</p><p><strong>单线程和多核</strong><br>线程是cpu调度的一个基本单位，一个cpu同时只能执行一个线程的任务，同样一个线程任务也只能在一个cpu上执行，所以如果你运行Node.js的机器是像i5，i7这样多核cpu，那么将无法充分利用多核cpu的性能来为Node.js服务。</p><p><br></p><h2 id="2-多线程"><a href="#2-多线程" class="headerlink" title="2. 多线程"></a>2. 多线程</h2><p>在C++、C#、python等其他语言都有与之对应的多线程编程，有些时候这很有趣，带给我们灵活的编程方式；但是也可能带给我们一堆麻烦，在编写更多代码的同时也存在着更多的风险，线程的切换和锁也会造成系统资源的开销。</p><p>多线程的代价还在于创建新的线程和执行期上下文线程的切换开销，由于每创建一个线程就会占用一定的内存，当应用程序并发大了之后，内存将会很快耗尽。</p><p><br></p><h1 id="三、-Node-js线程与进程"><a href="#三、-Node-js线程与进程" class="headerlink" title="三、 Node.js线程与进程"></a>三、 Node.js线程与进程</h1><p>Node.js 是 Javascript 在服务端的运行环境，构建在 chrome 的 V8 引擎之上，基于事件驱动、非阻塞I/O模型，充分利用操作系统提供的<code>异步I/O</code>进行多任务的执行，适合于 <code>I/O 密集型</code>的应用场景，因为异步，程序无需阻塞等待结果返回，而是基于回调通知的机制，原本同步模式等待的时间，则可以用来处理其它任务。</p><p>在 Web 服务器方面，著名的 Nginx 也是采用此模式（事件驱动），Nginx 采用 C 语言进行编写，主要用来做高性能的 Web 服务器，不适合做业务。<br>Web业务开发中，如果你有高并发应用场景那么 Node.js 会是你不错的选择。</p><p>在单核 CPU 系统之上我们采用 <code>单进程 + 单线程</code> 的模式来开发。在多核 CPU 系统之上，可以通过 <code>child_process.fork</code>开启多个进程（Node.js 在 v0.8 版本之后新增了<code>Cluster</code> 来实现多进程架构） ，即 <code>多进程 + 单线程</code> 模式。</p><p><strong>注意：开启多进程不是为了解决高并发，主要是解决了单进程模式下 Node.js CPU 利用率不足的情况，充分利用多核 CPU 的性能。</strong></p><p><strong><em>Node.js 中的进程 Process 是一个全局对象，无需 require 直接使用，给我们提供了当前进程中的相关信息。</em></strong></p><pre><code>process.env：环境变量，例如通过 process.env.NODE_ENV 获取不同环境项目配置信息process.nextTick：这个在谈及 Event Loop 时经常为会提到process.pid：获取当前进程idprocess.ppid：当前进程对应的父进程process.cwd()：获取当前进程工作目录process.platform：获取当前进程运行的操作系统平台process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值进程事件：process.on(&apos;uncaughtException&apos;, cb) 捕获异常信息、    process.on(&apos;exit&apos;, cb）进程推出监听三个标准流：process.stdout 标准输出、process.stdin 标准输入、    process.stderr 标准错误输</code></pre><p><br></p><h1 id="四、-Node-js进程创建"><a href="#四、-Node-js进程创建" class="headerlink" title="四、 Node.js进程创建"></a>四、 Node.js进程创建</h1><blockquote><p>Node.js 提供了 child_process 内置模块，用于创建子进程，</p></blockquote><p><strong>四种方式</strong></p><ul><li><code>child_process.spawn</code>：适用于返回大量数据，例如图像处理，二进制数据处理。</li><li><code>child_process.exec</code>：适用于小量数据，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。</li><li><code>child_process.execFile</code>：类似 child_process.exec，区别是不能通过 shell 来执行，不支持像 I/O 重定向和文件查找这样的行为</li><li><code>child_process.fork</code>： 衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统 CPU 核心数设置。</li></ul><p><br></p><h1 id="五、-Node-js守护进程"><a href="#五、-Node-js守护进程" class="headerlink" title="五、 Node.js守护进程"></a>五、 Node.js守护进程</h1><p>守护进程运行在后台不受终端的影响，什么意思呢？比如当我们打开终端执行 node app.js 开启一个服务进程之后，这个终端就会一直被占用，如果关掉终端，服务就会断掉，即前台运行模式。如果采用守护进程进程方式，这个终端我执行 node app.js 开启一个服务进程之后，我还可以在这个终端上做些别的事情，且不会相互影响。</p><p>在实际工作中对守护进程的健壮性要求还是很高的，例如：进程的异常监听、工作进程管理调度、进程挂掉之后重启等等，这些还需要我们去不断思考。</p><p><br></p><h1 id="六、-总结"><a href="#六、-总结" class="headerlink" title="六、 总结"></a>六、 总结</h1><blockquote><p>单线程的Node.js给我们编码带来了太多的便利和乐趣，我们应该时刻保持清醒的头脑，在Node.js代码中任何一个隐藏的问题都可能击溃整个线上正在运行的Node.js程序。</p></blockquote><p>单线程异步的Node.js不代表不会阻塞，在主线程做过多的任务可能会导致主线程的卡死，影响整个程序的性能，所以我们要非常小心的处理cpu密集型任务，合理的利用各种技术把任务丢给子线程或子进程去完成，保持Node.js主线程的畅通。</p><p>线程/进程的使用并不是没有开销的，尽可能减少创建和销毁线程/进程的次数，可以提升我们系统整体的性能和出错的概率。最后请不要一味的追求高性能和高并发，因为我们可能不需要系统具有那么大的吞吐率。高效，敏捷，低成本的开发才是项目所需要的。</p><p><br></p><p>参考文章：</p><ul><li><a href="https://juejin.im/post/5d06d6ddf265da1b9570562a" target="_blank" rel="noopener">Node.js进阶之进程与线程</a></li><li><a href="https://juejin.im/post/5c471795f265da6120621fa0#heading-9" target="_blank" rel="noopener">[转][NodeJs系列]Node.js的线程和进程详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章通过Node.js的角度讲解进程与线程，除了介绍概念外还会讲解一些在项目中的实战的应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在文章开始前先问几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Node.js是单线程吗？&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://www.williamife.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>jQuery架构赏析</title>
    <link href="https://www.williamife.com/2019/09/20/jQuery/"/>
    <id>https://www.williamife.com/2019/09/20/jQuery/</id>
    <published>2019-09-20T06:14:14.000Z</published>
    <updated>2019-11-14T09:07:01.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在15年之前H5及三大框架流行起来之前，jQuery 是前端不可或缺的技能之一， 据不完全统计至今为止世界上至少还有80%的网站由jQuery构成。jQuery对于现在来说也很有借鉴意义，所以就在网上搜集一些资料整理学习一下。</p></blockquote><p><strong>*本文略有增减*</strong></p><h1 id="一、整体架构"><a href="#一、整体架构" class="headerlink" title="一、整体架构"></a>一、整体架构</h1><p>jQuery 整体框架的结构十分清晰，按代码行文大致分为如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//变量、常量、正则初始化</span></span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供的接口</span></span><br><span class="line">    jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context, rootjQuery );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jQuery对象添加方法和属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//jQuery的继承方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//jQuery.extend 扩展一些工具的方法（静态方法）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Sizzle 复杂选择器的实现</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Callbacks 回调对象--函数的统一管理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Deferred 延迟对象，对异步的统一管理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//support 功能检测</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Data 数据缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//queue 队列管理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Attribute 属性操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Event 事件处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DOM 操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//CSS 操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ajax</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//动画</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//坐标和大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//模块化</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="built_in">module</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</span><br><span class="line">      <span class="built_in">module</span>.exports = jQuery;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd ) &#123;</span><br><span class="line">        define( <span class="string">"jquery"</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> jQuery; &#125; );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.document === <span class="string">"object"</span> ) &#123;</span><br><span class="line">      <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、jQuery闭包结构"><a href="#二、jQuery闭包结构" class="headerlink" title="二、jQuery闭包结构"></a>二、jQuery闭包结构</h1><p>// 用一个函数域包起来，就是所谓的沙箱<br>// 在这里边 var 定义的变量，属于这个函数域内的局部变量，避免污染全局<br>// 把当前沙箱需要的外部变量通过函数参数引入进来<br>// 只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数</p><figure class="highlight js"><figcaption><span>第1种写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// jQuery 代码</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>jQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。常用的还有另一种写法：</p><figure class="highlight js"><figcaption><span>第2种写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// JS代码</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure><p>比较推崇的的第一种写法，也就是 jQuery 的写法。二者有何不同呢，当我们的代码运行在更早期的环境当中（pre-ES5，eg. Internet Explorer 8），undefined 仅是一个变量且它的值是可以被覆盖的。意味着你可以做这样的操作：<br><code>undefined = 42;console.log(undefined) // 42</code></p><p>当使用第一种方式，可以确保你需要的 undefined 确实就是 undefined。<br><code>这也是 undefined 和 null 的区别之一</code></p><p>另外不得不提出的是，jQuery 在这里有一个针对压缩优化细节，使用第一种方式，在代码压缩的时候，window 和 undefined 都可以压缩为 1 个字母并且确保它们就是 window 和 undefined。</p><p>// 压缩策略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// w -&gt; windwow , u -&gt; undefined</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w, u</span>) </span>&#123;</span><br><span class="line"> ···</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、jQuery无new构造"><a href="#三、jQuery无new构造" class="headerlink" title="三、jQuery无new构造"></a>三、jQuery无new构造</h1><p>嘿，回想一下使用 jQuery 的时候，实例化一个 jQuery 对象的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无 new 构造</span></span><br><span class="line">$(<span class="string">'#test'</span>).text(<span class="string">'Test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然也可以使用 new</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> $(<span class="string">'#test'</span>);</span><br><span class="line">test.text(<span class="string">'Test'</span>);</span><br></pre></td></tr></table></figure><p>大部分人使用 jQuery 的时候都是使用第一种无 new 的构造方式，直接<code>$(&#39;&#39;)</code>进行构造，这也是 jQuery 十分便捷的一个地方。当我们使用第一种无 new 构造方式的时候，其本质就是相当于 <code>new jQuery()</code>，那么在 jQuery 内部是如何实现的呢？看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class="line">        <span class="comment">// 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context, rootjQuery);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用</span></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        <span class="comment">// 实例化化方法，这个方法可以称作 jQuery 对象构造器</span></span><br><span class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context, rootjQuery</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这一句很关键，也很绕</span></span><br><span class="line">    <span class="comment">// jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数</span></span><br><span class="line">    <span class="comment">// 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例</span></span><br><span class="line">    <span class="comment">// 且实例还要能正确访问 jQuery 类原型上的属性与方法</span></span><br><span class="line">    <span class="comment">// jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype</span></span><br><span class="line">    <span class="comment">// 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法</span></span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><ol><li><p>首先要明确，使用 $(‘xxx’) 这种实例化方式，其内部调用的是 return new jQuery.fn.init(selector, context, rootjQuery) 这一句话，也就是构造实例是交给了 jQuery.fn.init() 方法去完成。</p></li><li><p>将 jQuery.fn.init 的 prototype 属性设置为 jQuery.fn，那么使用 new jQuery.fn.init() 生成的对象的原型对象就是 jQuery.fn ，所以挂载到 jQuery.fn 上面的函数就相当于挂载到 jQuery.fn.init() 生成的 jQuery 对象上，所有使用 new jQuery.fn.init() 生成的对象也能够访问到 jQuery.fn 上的所有原型方法。</p></li><li><p>也就是实例化方法存在这么一个关系链<br>jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;<br>new jQuery.fn.init() 相当于 new jQuery() ;<br>jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。</p></li></ol><p><br></p><h1 id="四、jQuery方法的重载"><a href="#四、jQuery方法的重载" class="headerlink" title="四、jQuery方法的重载"></a>四、jQuery方法的重载</h1><p>jQuery 源码晦涩难读的另一个原因是，使用了大量的方法重载，但是用起来却很方便：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 title 属性的值</span></span><br><span class="line">$(<span class="string">'#id'</span>).attr(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// 设置 title 属性的值</span></span><br><span class="line">$(<span class="string">'#id'</span>).attr(<span class="string">'title'</span>,<span class="string">'jQuery'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 css 某个属性的值</span></span><br><span class="line">$(<span class="string">'#id'</span>).css(<span class="string">'title'</span>);</span><br><span class="line"><span class="comment">// 设置 css 某个属性的值</span></span><br><span class="line">$(<span class="string">'#id'</span>).css(<span class="string">'width'</span>,<span class="string">'200px'</span>);</span><br></pre></td></tr></table></figure><p>方法的重载即是一个方法实现多种功能，经常又是 get 又是 set，虽然阅读起来十分不易，但是从实用性的角度考虑，这也是为什么 jQuery 如此受欢迎的原因，大多数人使用 jQuery() 构造方法使用的最多的就是直接实例化一个 jQuery 对象，但其实在它的内部实现中，有着 9 种不同的方法重载场景：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器</span></span><br><span class="line">jQuery([selector,[context]])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入单个 DOM</span></span><br><span class="line">jQuery(element)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入 DOM 数组</span></span><br><span class="line">jQuery(elementArray)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入 JS 对象</span></span><br><span class="line">jQuery(object)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入 jQuery 对象</span></span><br><span class="line">jQuery(jQuery object)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入原始 HTML 的字符串来创建 DOM 元素</span></span><br><span class="line">jQuery(html,[ownerDocument])</span><br><span class="line">jQuery(html,[attributes])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入空参数</span></span><br><span class="line">jQuery()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定一个在 DOM 文档载入完成后执行的函数</span></span><br><span class="line">jQuery(callback)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、jQuery-fn-extend"><a href="#五、jQuery-fn-extend" class="headerlink" title="五、jQuery.(fn.)extend"></a>五、jQuery.(fn.)extend</h1><p><code>extend</code>方法在jQuery中是一个很重要的方法，jQuey内部用它来扩展静态方法或实例方法，而且我们开发jQuery插件开发的时候也会用到它。但是在内部，是存在<code>jQuery.fn.extend</code> 和 <code>jQuery.extend</code>两个 extend 方法的，而区分这两个 extend 方法是理解 jQuery 的很关键的一部分。先看结论：</p><p>1）<code>jQuery.extend</code>(object) 为扩展jQuery类本身，为类添加新的<code>静态方法</code>；<br>2）<code>jQuery.fn.extend</code>(object) 给jQuery对象添加<code>实例方法</code>，也就是通过这个extend添加的新方法，实例化的jQuery对象都能使用，因为它是挂载在 jQuery.fn上的方法.<br><code>jQuery.fn = jQuery.prototype</code></p><p>它们的官方解释是：<br>1）jQuery.extend()：把两个或者更多的对象合并到第一个当中，<br>2）jQuery.fn.extend()：把对象挂载到 jQuery 的 prototype 属性，来扩展一个新的 jQuery 实例方法。</p><p><strong>使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 <code>$.xxx</code> 进行调用。</strong><br><strong>使用 jQuery.fn.extend() 拓展的实例方法，需要使用 <code>$().xxx</code> 调用。</strong></p><p><br></p><h1 id="六、链式调用及回溯"><a href="#六、链式调用及回溯" class="headerlink" title="六、链式调用及回溯"></a>六、链式调用及回溯</h1><p>这一点的实现相对来说比较简单，只需要在要实现链式调用的方法的返回结果里，返回this，就能够实现<code>链式调用</code>了。</p><p>除了链式调用，jQuery 甚至还允许<code>回溯</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合</span></span><br><span class="line">$(<span class="string">'div'</span>).eq(<span class="number">0</span>).show().end().eq(<span class="number">1</span>).hide();</span><br></pre></td></tr></table></figure><p>当选择了 (‘div’).eq(0) 之后使用 end() 可以回溯到上一步选中的 jQuery 对象 $(‘div’)，其内部实现其实是依靠添加了 <code>prevObject</code> 这个属性。<br>jQuery 完整的链式<code>调用、增栈、回溯</code>通过 return <code>this</code> 、 return <code>this.pushStack()</code> 、return <code>this.prevObject</code> 实现。</p><p>  <img src="/img/images/jQuery1.jpg" alt></p><p>总体来说：<br>1）<code>end()</code> 方法返回 <code>prevObject</code> 属性，这个属性记录了上一步操作的 <code>jQuery</code> 对象合集；<br>2）而 <code>prevObject</code> 属性由 <code>pushStack()</code> 方法生成，该方法将一个 <code>DOM</code> 元素集合加入到 <code>jQuery</code> 内部管理的一个栈中，通过改变 <code>jQuery</code> 对象的 <code>prevObject</code> 属性来跟踪链式调用中前一个方法返回的 <code>DOM</code> 结果集合；<br>3）当我们在链式调用 <code>end()</code> 方法后，内部就返回当前 <code>jQuery</code> 对象的 <code>prevObject</code> 属性，完成回溯。</p><p><br></p><h1 id="七、jQuery正则与细节优化"><a href="#七、jQuery正则与细节优化" class="headerlink" title="七、jQuery正则与细节优化"></a>七、jQuery正则与细节优化</h1><p>不得不提 jQuery 在细节优化上做的很好，也存在很多值得学习的小技巧。</p><p>然后想谈谈正则表达式，jQuery 当中用了大量的正则表达式，我觉得如果研读 jQuery ，正则水平一定能够大大提升，如果是个正则小白，我建议在阅读之前先去了解以下几点：</p><p>1）了解并尝试使用 Javascript 正则相关 API，包括了 test() 、replace() 、match() 、exec() 的用法；<br>2）区分上面 4 个方法，哪个是 <code>RegExp</code> 对象方法，哪个是 <code>String</code> 对象方法；<br>3）了解简单的<code>零宽断言</code>，了解什么是<code>匹配不捕获</code>以及<code>匹配且捕获</code>。</p><p><br></p><h1 id="八、jQuery-变量冲突处理"><a href="#八、jQuery-变量冲突处理" class="headerlink" title="八、jQuery 变量冲突处理"></a>八、jQuery 变量冲突处理</h1><p>最后想提一提 jQuery 变量的冲突处理，通过一开始保存全局变量的 window.jQuery 以及 windw.$ 。<br>当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">        <span class="comment">// Map over jQuery in case of overwrite</span></span><br><span class="line">        <span class="comment">// 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖</span></span><br><span class="line">        _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">        _$ = <span class="built_in">window</span>.$;</span><br><span class="line"></span><br><span class="line">    jQuery.extend(&#123;</span><br><span class="line">        <span class="comment">// noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了</span></span><br><span class="line">        <span class="comment">// 通过全名替代简写的方式来使用 jQuery</span></span><br><span class="line">        <span class="comment">// deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)</span></span><br><span class="line">        noConflict: <span class="function"><span class="keyword">function</span>(<span class="params">deep</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断全局 $ 变量是否等于 jQuery 变量</span></span><br><span class="line">            <span class="comment">// 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">                <span class="comment">// 此时 jQuery 别名 $ 失效</span></span><br><span class="line">                <span class="built_in">window</span>.$ = _$;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况</span></span><br><span class="line">            <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">                <span class="comment">// 如果 deep 为 true，此时 jQuery 失效</span></span><br><span class="line">                <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）</span></span><br><span class="line">            <span class="comment">// 像使用 $ 一样尽情使用它吧</span></span><br><span class="line">            <span class="keyword">return</span> jQuery;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p>那么让出了这两个符号之后，是否就不能在我们的代码中使用 jQuery 或者呢 $ 呢？莫慌，还是可以使用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 让出 jQuery 、$ 的控制权不代表不能使用 jQuery 和 $ ，方法如下：</span></span><br><span class="line"><span class="keyword">var</span> query = jQuery.noConflict(<span class="literal">true</span>);</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 插件或其他形式的代码，也可以将参数设为 jQuery</span></span><br><span class="line">&#125;)(query);</span><br><span class="line"><span class="comment">//  ... 其他用 $ 作为别名的库的代码</span></span><br></pre></td></tr></table></figure><p><br></p><p>文章转载：</p><ul><li><a href="https://www.cnblogs.com/coco1s/p/5261646.html" target="_blank" rel="noopener">【深入浅出jQuery】源码浅析–整体架构</a></li><li><a href="https://github.com/chokcoco/jQuery-" target="_blank" rel="noopener">jQuery v1.10.2源码注解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在15年之前H5及三大框架流行起来之前，jQuery 是前端不可或缺的技能之一， 据不完全统计至今为止世界上至少还有80%的网站由jQuery构成。jQuery对于现在来说也很有借鉴意义，所以就在网上搜集一些资料整理学习一下。&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://www.williamife.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>从执行上下文，到作用域闭包</title>
    <link href="https://www.williamife.com/2019/08/19/%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://www.williamife.com/2019/08/19/上下文与作用域/</id>
    <published>2019-08-19T03:07:40.000Z</published>
    <updated>2019-08-28T02:48:26.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上下文与作用域之间有什么样的关系?<br>这一概念看似简单，但很多人都讲不清楚之间的关系。上下文和作用域都是编译原理的知识，具体编程语言有具体的实现规则，本文关注的是 JavaScript 语言的实现。</p></blockquote><h1 id="一、-上下文与作用域"><a href="#一、-上下文与作用域" class="headerlink" title="一、 上下文与作用域"></a>一、 上下文与作用域</h1><p><code>上下文</code>(context)是一段程序运行所需要的最小数据集合。我们可以从<code>上下文交换</code>(context switch)来理解上下文，在多进程或多线程环境中，任务切换时首先要中断当前的任务，将计算资源交给下一个任务。因为稍后还要恢复之前的任务，所以中断的时候要保存现场，即当前任务的上下文，也可以叫做环境。</p><p><code>作用域</code>(scope)是标识符（变量）在程序中的可见性范围。作用域规则是按照具体规则维护标识符的可见性，以确定当前执行的代码对这些标识符的访问权限。作用域是在具体的作用域规则之下确定的。</p><p><strong>上下文、环境有时候也称作用域，即这两个概念有时候是混用的；不过，上下文指代的是整体环境，作用域关注的是标识符（变量）的可访问性（可见性）。上下文确定了，根据具体编程语言的作用域规则，作用域也就确定了。这就是上下文与作用域的关系。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callWithContext</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.call(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'Banana'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apple = &#123;</span><br><span class="line">  name: <span class="string">"Apple"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> orange = &#123;</span><br><span class="line">  name: <span class="string">"Orange"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo(); <span class="comment">// Banana</span></span><br><span class="line">callWithContext(echo, apple);  <span class="comment">// Apple</span></span><br><span class="line">callWithContext(echo, orange); <span class="comment">// Orange</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this 继承自 foo()</span></span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo()() <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.call( obj1 ); <span class="comment">// 调用位置</span></span><br><span class="line">bar.call( obj2 ); <span class="comment">// 2</span></span><br><span class="line">foo.call( obj2 )(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、-JavaScript的执行"><a href="#二、-JavaScript的执行" class="headerlink" title="二、 JavaScript的执行"></a>二、 JavaScript的执行</h1><blockquote><p>JavaScript代码的整个执行过程，分为两个阶段，代码编译阶段与代码执行阶段。编译阶段由编译器完成，将代码翻译成可执行代码，这个阶段作用域规则会确定。执行阶段由引擎完成，主要任务是执行可执行代码，执行上下文在这个阶段创建。</p></blockquote><p>  <img src="/img/images/context.png" alt></p><p>当JavaScript代码执行进入一个环境时，就会为该环境创建一个<code>执行上下文</code>，它会在你运行代码前做一些准备工作，如确定作用域，创建局部变量对象等。</p><p><strong>JS代码的执行环境</strong></p><ol><li>全局环境</li><li>函数环境</li><li>eval函数环境（不推荐使用）</li></ol><p><strong>执行上下文的类型</strong></p><ol><li>全局执行上下文</li><li>函数执行上下文</li><li>eval函数执行上下文</li></ol><p><br></p><h1 id="三、-执行上下文"><a href="#三、-执行上下文" class="headerlink" title="三、 执行上下文"></a>三、 执行上下文</h1><blockquote><p>JavaScript运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么调用函数，就会进入函数执行环境，对应就会生成该函数的执行上下文。</p></blockquote><p><strong>函数编程中，代码中会声明多个函数，对应的执行上下文也会存在多个。在JavaScript中，通过栈的存取方式来管理执行上下文，我们可称其为执行栈，或函数调用栈(Call Stack)。栈底永远都是全局上下文，而栈顶就是当前正在执行的上下文。</strong></p><p>程序执行进入一个执行环境时，它的执行上下文就会被创建，并被推入执行栈中(入栈)；程序执行完成时，它的执行上下文就会被销毁，并从栈顶被推出(出栈)，控制权交由下一个执行上下文。<a href="https://www.williamife.com/2019/05/10/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#2-%E6%A0%88">栈结构</a></p><p>因为JS执行中最先进入全局环境，所以处于”栈底的永远是全局环境的执行上下文”。而处于”栈顶的是当前正在执行函数的执行上下文”，当函数调用完成后，它就会从栈顶被推出。</p><p><strong><em>“全局环境只有一个，对应的全局执行上下文也只有一个，只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底”</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = <span class="string">'blue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> anotherColor = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swapColors</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> tempColor = anotherColor;</span><br><span class="line">      anotherColor = color;</span><br><span class="line">      color = tempColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  swapColors();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeColor();</span><br></pre></td></tr></table></figure><ul><li>全局上下文只有唯一的一个，它在浏览器关闭时出栈</li><li>函数的执行上下文的个数没有限制</li><li>每次某个函数被调用，就会有个新的执行上下文为其创建，即使是调用的自身函数，也是如此</li></ul><p><br></p><h1 id="四、-词法作用域"><a href="#四、-词法作用域" class="headerlink" title="四、 词法作用域"></a>四、 词法作用域</h1><blockquote><p>作用域链，是由当前环境与上层环境的一系列变量对象组成，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p></blockquote><p>在 JavaScript 中，这个具体的作用域规则就是<code>词法作用域</code>（lexical scope），也就是 JavaScript 中的作用域链的规则。词法作用域是的变量在编译时（词法阶段）就是确定的，所以词法作用域又叫<code>静态作用域</code>（static scope），与之相对的是<code>动态作用域</code>（dynamic scope）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="comment">// 会输出2还是3？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>前面说过，词法作用域也叫静态作用域，变量在词法阶段确定，也就是定义时确定。虽然在 bar 内调用，但由于 foo 是闭包函数，即使它在自己定义的词法作用域以外的地方执行，它也一直保持着自己的作用域。所谓<code>闭包函数</code>，即这个函数<code>封闭了它自己的定义时的环境</code>，形成了一个<code>闭包</code>。（即闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所能访问的所有局部变量）所以 foo 并不会从 bar 中寻找变量，这就是静态作用域的特点。</p><p>而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。</p><p><strong>词法作用域是在写代码或者定义时确定的，而动态作用域是在运行时确定的。词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> sub = foo();</span><br><span class="line"></span><br><span class="line">sub(); <span class="comment">// 0;</span></span><br></pre></td></tr></table></figure><blockquote><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>foo</code>的参数形成一个单独作用域。这个作用域里面，首先声明了变量<code>x</code>，然后声明了变量<code>y</code>，<code>y</code>的默认值是一个匿名函数。这个匿名函数内部的变量<code>x</code>，指向同一个作用域的第一个参数<code>x</code>。函数<code>foo</code>内部又声明了一个内部变量<code>x</code>，该变量与第一个参数<code>x</code>由于不是同一个作用域，所以不是同一个变量，因此执行<code>y</code>后，内部变量<code>x</code>和外部全局变量<code>x</code>的值都没变。</p><p><br></p><h1 id="五、-闭包的应用"><a href="#五、-闭包的应用" class="headerlink" title="五、 闭包的应用"></a>五、 闭包的应用</h1><blockquote><p>模块化、柯里化、模拟块级作用域、命名空间、缓存数据</p></blockquote><figure class="highlight js"><figcaption><span>模块化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tar = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        addNum: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;,</span><br><span class="line">        showNum: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">tar.addNum();</span><br><span class="line">tar.showNum();</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>函数柯里化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>)(<span class="number">4</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>模拟块级作用域</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;  </span><br><span class="line">    + <span class="function">(<span class="params">i =&gt; &#123; setTimeout((</span>) =&gt;</span> <span class="built_in">console</span>.log(i),<span class="number">300</span>) &#125;)(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>命名空间</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyNamespace = &#123;&#125;;  </span><br><span class="line"></span><br><span class="line">MyNamespace.doSomething = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//使用闭包产生的私有类变量  </span></span><br><span class="line">    <span class="keyword">var</span> a,  b;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//可访问私有变量，但不可被外部访问的私有方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setLabel</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">      <span class="comment">// do something...</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//可访问私有变量，也可被外部访问的方法  </span></span><br><span class="line">    <span class="keyword">this</span>.getLabel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">      <span class="comment">// do something...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法可被外部访问，却只能通过取/赋值器访问私有类变量  </span></span><br><span class="line">MyNamespace.TreeItem.prototype = &#123;  </span><br><span class="line">    print: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.getLabel() );  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>Node.js 缓存数据</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;readFileSync&#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readContent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> contentCache = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">bookName</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content = contentCache[bookName];</span><br><span class="line">    <span class="keyword">if</span> (!content)&#123;</span><br><span class="line">      content = readFileSync(bookName+<span class="string">".txt"</span>, <span class="string">"utf8"</span>);</span><br><span class="line">      contentCache[bookName] = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><br></p><p>参考文章：</p><ul><li><a href="https://segmentfault.com/a/1190000012646203" target="_blank" rel="noopener">执行上下文详细图解</a></li><li><a href="https://zhuanlan.zhihu.com/p/30121515" target="_blank" rel="noopener">从上下文，到作用域</a></li><li><a href="https://segmentfault.com/a/1190000017890535#articleHeader2" target="_blank" rel="noopener">执行上下文与执行栈，变量对象</a></li><li><a href="https://www.jianshu.com/p/70b38c7ab69c" target="_blank" rel="noopener">词法作用域 VS 动态作用域</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;上下文与作用域之间有什么样的关系?&lt;br&gt;这一概念看似简单，但很多人都讲不清楚之间的关系。上下文和作用域都是编译原理的知识，具体编程语言有具体的实现规则，本文关注的是 JavaScript 语言的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的防抖与节流</title>
    <link href="https://www.williamife.com/2019/07/30/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://www.williamife.com/2019/07/30/防抖和节流/</id>
    <published>2019-07-30T03:08:09.000Z</published>
    <updated>2019-08-03T05:32:50.248Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>在日常开发中，我们经常会处理各种事件，比如常见的click、scroll、 resize等等。仔细一想，会发现像scroll、scroll、onchange这类事件会频繁触发，如果我们在回调中计算元素位置、做一些跟DOM相关的操作，引起浏览器回流和重绘，频繁触发回调，很可能会造成浏览器掉帧，甚至会使浏览器崩溃，影响用户体验。针对这种现象，目前有两种常用的解决方案：防抖和节流。</em></strong></p><h1 id="一、-防抖（debounce）"><a href="#一、-防抖（debounce）" class="headerlink" title="一、 防抖（debounce）"></a>一、 防抖（debounce）</h1><blockquote><p>所谓防抖，就是指触发事件后，就是把触发非常频繁的事件合并成一次去执行。即在指定时间内只执行一次回调函数，如果在指定的时间内又触发了该事件，则回调函数的执行时间会基于此刻重新开始计算。</p></blockquote><h2 id="1-非立即执行"><a href="#1-非立即执行" class="headerlink" title="1. 非立即执行"></a>1. 非立即执行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(ctx, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-立即执行"><a href="#2-立即执行" class="headerlink" title="2. 立即执行"></a>2. 立即执行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span> , args = <span class="built_in">arguments</span>;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line"></span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) fn.apply(context, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-防抖合并"><a href="#3-防抖合并" class="headerlink" title="3. 防抖合并"></a>3. 防抖合并</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span> , args = <span class="built_in">arguments</span>;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">          timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timeout = <span class="literal">null</span>;</span><br><span class="line">          &#125;, wait);</span><br><span class="line">          <span class="keyword">if</span> (!timeout) fn.apply(context, args);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              fn.apply(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、节流（throttle）"><a href="#二、节流（throttle）" class="headerlink" title="二、节流（throttle）"></a>二、节流（throttle）</h1><blockquote><p>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。 节流会稀释函数的执行频率。当触发事件的时候，我们设置一个定时器，再次触发事件的时候，如果定时器存在，就不执行，直到delay时间后，定时器执行执行函数，并且清空定时器，这样就可以设置下个定时器。</p></blockquote><h2 id="1-时间戳"><a href="#1-时间戳" class="headerlink" title="1. 时间戳"></a>1. 时间戳</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span> , args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-定时器"><a href="#2-定时器" class="headerlink" title="2. 定时器"></a>2. 定时器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span> , args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                fn.apply(context, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-节流合并"><a href="#3-节流合并" class="headerlink" title="3. 节流合并"></a>3. 节流合并</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type 1 时间戳，0 定时器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span> , timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(type) &#123;</span><br><span class="line">          <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">          <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                fn.apply(context, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>参考文章：</p><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学节流</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学防抖</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;在日常开发中，我们经常会处理各种事件，比如常见的click、scroll、 resize等等。仔细一想，会发现像scroll、scroll、onchange这类事件会频繁触发，如果我们在回调中计算元素位置、做一些跟DOM相关的操作，引起浏览器回流和重
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中继承的几种方式</title>
    <link href="https://www.williamife.com/2019/06/26/JS%E4%B8%AD%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.williamife.com/2019/06/26/JS中继承的几种方式/</id>
    <published>2019-06-26T07:25:05.000Z</published>
    <updated>2019-07-10T05:43:49.586Z</updated>
    
    <content type="html"><![CDATA[<p>我们今天就来了解下 JS 中的继承，在此之前建议学习<a href="https://www.williamife.com/2019/04/29/JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/">JS中的原型和原型链</a>的相关知识。</p><p><strong>一种面向对象语言需要向开发者提供四种基本能力：</strong></p><p><code>封装</code> - 把相关的信息（无论数据或方法）存储在对象中的能力<br><code>聚集</code> - 把一个对象存储在另一个对象内的能力<br><code>继承</code> - 由另一个类（或多个类）得来类的属性和方法的能力<br><code>多态</code> - 编写能以多种方法运行的函数或方法的能力</p><p>ECMAScript 支持这些要求，因此可被是看做面向对象的。<br>目前来说在 JS 中有 7 中实现方式，让我们一起来学习吧。</p><h1 id="一、原型链继承"><a href="#一、原型链继承" class="headerlink" title="一、原型链继承"></a>一、原型链继承</h1><blockquote><p>原型链继承的基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassA.prototype.color = <span class="string">"blue"</span></span><br><span class="line">ClassA.prototype.sayColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassB.prototype = <span class="keyword">new</span> ClassA()</span><br><span class="line">ClassB.prototype.constructor = ClassB</span><br><span class="line"><span class="comment">// 重写prototype会丢失constructor属性</span></span><br></pre></td></tr></table></figure><p>优点：1、实例可继承构造函数的属性，父类构造函数属性，父类原型的属性</p><p>缺点：1、新实例无法向父类构造函数传参<br>　　　2、原型上的属性共享，一个实例修改了原型属性，另一个实例的原型属性也会被修改</p><p><br></p><h1 id="二、借用构造函数继承"><a href="#二、借用构造函数继承" class="headerlink" title="二、借用构造函数继承"></a>二、借用构造函数继承</h1><blockquote><p>在子类型的构造函数中调用超类型构造函数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassB</span>(<span class="params">age,name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  ClassA.call(<span class="keyword">this</span>,age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ClassC = <span class="keyword">new</span> ClassB(<span class="number">18</span>,<span class="string">'william'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ClassC)  <span class="comment">// ClassB &#123; name: 'william', age: 18 &#125;</span></span><br></pre></td></tr></table></figure><p>优点：1、可以向父类构造函数传参<br>　　　2、解决了原型中包含引用类型值被所有实例共享的问题</p><p>缺点：1、只能继承父类构造函数的属性<br>　　　2、函数无法复用（每次都要调用，每个新实例都有父类构造函数的副本）</p><p><br></p><h1 id="三、组合继承"><a href="#三、组合继承" class="headerlink" title="三、组合继承"></a>三、组合继承</h1><blockquote><p>组合继承指的是将原型链继承和借用构造函数继承组合到一块，从而发挥二者之长的一种继承模式，比较常用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.hobby = <span class="string">'Run'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassA.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassB</span> (<span class="params">age, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  ClassA.call(<span class="keyword">this</span>, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassB.prototype = <span class="keyword">new</span> ClassA()</span><br><span class="line">ClassB.prototype.constructor = ClassB</span><br><span class="line">ClassB.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ClassC = <span class="keyword">new</span> ClassB(<span class="number">18</span>, <span class="string">'william'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ClassC)  <span class="comment">// ClassB &#123; name: 'william', age: 18, hobby: 'Run' &#125;</span></span><br><span class="line"></span><br><span class="line">ClassC.sayName() <span class="comment">// william</span></span><br><span class="line">ClassC.sayAge() <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>特点：1、可以继承父类原型上的属性，可以传参，可复用。<br>　　　2、每个新实例引入的构造函数属性是私有的。</p><p>缺点：1、调用了两次父类构造函数，子类的构造函数会代替原型上的那个父类构造函数。</p><p><br></p><h1 id="四、原型式继承"><a href="#四、原型式继承" class="headerlink" title="四、原型式继承"></a>四、原型式继承</h1><blockquote><p>用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ECMAScript5通过新增 Object.create()方法规范了原型式继承。<br>在传入一个参数的情况下，Object.create() 和 object() 方法的行为相同。</p><p>缺点：1、所有实例都会继承原型上的属性。<br>　　　2、无法实现复用。</p><p><br></p><h1 id="五、寄生式继承"><a href="#五、寄生式继承" class="headerlink" title="五、寄生式继承"></a>五、寄生式继承</h1><blockquote><p>在原型式继承的基础上包装一个仅用于封装继承过程的函数，即该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassObj</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExtendObj</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = ClassObj(obj)</span><br><span class="line">  newObj.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'William'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newPerson = ExtendObj(person)</span><br><span class="line">newPerson.sayHi() <span class="comment">//William</span></span><br></pre></td></tr></table></figure><p>优点：1、没有创建自定义类型，因为只是套了个壳子返回对象，这个函数顺理成章就成了创建的新对象。<br>缺点：1、使用寄生式继承来为对象添加函数，没用到原型，无法复用。<br>　　　2、同原型链实现继承一样，包含引用类型值的属性会被所有实例共享。</p><p><br></p><h1 id="六、寄生组合式继承"><a href="#六、寄生组合式继承" class="headerlink" title="六、寄生组合式继承"></a>六、寄生组合式继承</h1><blockquote><p>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassObj</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassPrototype</span> (<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prorotype = ClassObj(superType.prototype)</span><br><span class="line">  prorotype.constructor = subType</span><br><span class="line">  subType.prorotype = prorotype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassB</span> (<span class="params">name, age, height</span>) </span>&#123;</span><br><span class="line">  ClassA.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">  <span class="keyword">this</span>.height = height</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>优点：只调用了一次超类构造函数,避免在SuberType.prototype上面创建多余的属性，与其同时，原型链还能保持不变。</p><p><code>寄生组合继承是引用类型最理性的继承范式。</code></p><p><br></p><h1 id="七、class…extends"><a href="#七、class…extends" class="headerlink" title="七、class…extends"></a>七、class…extends</h1><blockquote><p>S6中引入了class关键字，class可以通过extends关键字实现继承，还可以通过static关键字定义类的静态方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//调用类的构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义一般的方法</span></span><br><span class="line">  sayHi () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用父类的方法"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">18</span>)</span><br><span class="line">person1.sayHi() <span class="comment">// Tom 18</span></span><br><span class="line"><span class="built_in">console</span>.log(person1) <span class="comment">// Person &#123; name: 'Tom', age: 18 &#125;</span></span><br><span class="line"><span class="comment">//定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age, height) &#123;</span><br><span class="line">    <span class="comment">//通过super调用父类的构造方法</span></span><br><span class="line">    <span class="keyword">super</span>(name, age)</span><br><span class="line">    <span class="keyword">this</span>.height = height</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//在子类自身定义方法</span></span><br><span class="line">  sayHi () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用子类的方法"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.height);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> H1 = <span class="keyword">new</span> Human(<span class="string">'Jerry'</span>, <span class="number">18</span>, <span class="number">180</span>)</span><br><span class="line"><span class="built_in">console</span>.log(H1) <span class="comment">//Human &#123; name: 'Jerry', age: 18, height: 180 &#125;</span></span><br><span class="line">H1.sayHi() <span class="comment">//Jerry 18 180</span></span><br></pre></td></tr></table></figure><ul><li>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面<code>Parent.apply(this)</code>。</li><li>ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面<code>（所以必须先调用super方法）</code>，然后再用子类的构造函数修改this。</li></ul><p><strong><em>需要注意的是，class关键字只是原型的语法糖，JavaScript继承仍然是基于原型实现的,这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</em></strong></p><p><br></p><p>参考文章：</p><ul><li><a href=".">JavaScript高级程序设计3</a></li><li><a href="http://es6.ruanyifeng.com/#docs/class-extends" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN Web Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们今天就来了解下 JS 中的继承，在此之前建议学习&lt;a href=&quot;https://www.williamife.com/2019/04/29/JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx部署静态页面</title>
    <link href="https://www.williamife.com/2019/06/14/Nginx/"/>
    <id>https://www.williamife.com/2019/06/14/Nginx/</id>
    <published>2019-06-14T08:02:02.000Z</published>
    <updated>2019-07-10T05:43:49.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近和朋友在一起开发个人项目，需要部署至服务器对外展示，但是环境神码的都是从 0 开始，下面就简单说下如何用 Nginx 部署一个的静态网站。</p></blockquote><h1 id="一、-准备环境"><a href="#一、-准备环境" class="headerlink" title="一、 准备环境"></a>一、 准备环境</h1><ul><li>云服务器 <a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a></li><li>你的代码 <a href="https://github.com/William-Cao/vowsonblockchain" target="_blank" rel="noopener">GitHub</a></li><li>一台电脑 <a href="./">蔡徐坤</a></li></ul><p>本文案例使用<a href="http://vowsonblockchain.xyz/app" target="_blank" rel="noopener">基于以太坊区块链上的永存的留言DAPP</a>项目</p><p><br></p><h1 id="二、-环境配置"><a href="#二、-环境配置" class="headerlink" title="二、 环境配置"></a>二、 环境配置</h1><p>使用 shell 登录服务器，由于服务器系统是 <code>CentOS</code> 系统，故选择yum安装Nginx较为方便（可使用其它方式安装）<code>yum install -y nginx</code></p><p>安装完成后使用命令：<br>(1) 开始启动：nginx<br>(2) 测试Nginx配置是否正确：nginx -t<br>(3) 优雅重启：nginx -s reload</p><p><br></p><h1 id="三、-开始部署"><a href="#三、-开始部署" class="headerlink" title="三、 开始部署"></a>三、 开始部署</h1><p>进入 Nginx 配置路径：<code>cd /etc/nginx/</code>-&gt;<code>vim nginx.conf</code><br>或者 <code>cd /etc/nginx/conf.d</code> 新增一个配置文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line"><span class="code">    ······</span></span><br><span class="line"></span><br><span class="line"><span class="code">    listen       80 default_server;</span></span><br><span class="line"><span class="code">    # listen       [::]:80 default_server;</span></span><br><span class="line"><span class="code">    server_name  vowsonblockchain.xyz;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    # Load configuration files for the default server block.</span></span><br><span class="line"></span><br><span class="line"><span class="code">    location / &#123;</span></span><br><span class="line"><span class="code">            root /root/william/vowsonblockchain/build_webpack;</span></span><br><span class="line"><span class="code">            index index.html;</span></span><br><span class="line"><span class="code">            try_files $uri $uri/ /index.html;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    # location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span></span><br><span class="line"><span class="code">    #       root /root/william/vowsonblockchain/build_webpack;</span></span><br><span class="line"><span class="code">    #&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    ······</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SPA项目记得加上<code>try_files $uri $uri/ /index.html;</code><br>保存完文件之后再执行<code>nginx -s reload</code>就可以开始愉快的访问你的网站了。</p><p><br></p><h1 id="四、-遇到问题"><a href="#四、-遇到问题" class="headerlink" title="四、 遇到问题"></a>四、 遇到问题</h1><p>在实践过程中并没有什么特别难以理解的地方，重点是知道遇到何种问题才好解决。<br>一些常见的问题可阅读以下文章对号入座，放上链接，文章就不搬了。</p><ul><li><a href="https://www.centos.bz/2018/01/centos-7%EF%BC%8C%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85nginx/" target="_blank" rel="noopener">使用yum安装 Nginx</a></li><li><a href="https://blog.csdn.net/weixin_42167759/article/details/85049546" target="_blank" rel="noopener">Nginx 服务的基本配置</a></li><li><a href="https://blog.csdn.net/ucicno000/article/details/81034393" target="_blank" rel="noopener">Nginx 出现 403 Forbidden 最终解决</a></li><li><a href="https://cloud.tencent.com/document/product/400/35244" target="_blank" rel="noopener">Nginx 服务器证书安装</a></li><li><a href="https://juejin.im/post/5a2600bdf265da432b4aaaba" target="_blank" rel="noopener">Nginx 从入门到实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近和朋友在一起开发个人项目，需要部署至服务器对外展示，但是环境神码的都是从 0 开始，下面就简单说下如何用 Nginx 部署一个的静态网站。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、-准备环境&quot;&gt;&lt;a href=&quot;#一、-准备环境
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.williamife.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>在项目中使用Mock.js的基本步骤</title>
    <link href="https://www.williamife.com/2019/05/29/Mock/"/>
    <id>https://www.williamife.com/2019/05/29/Mock/</id>
    <published>2019-05-29T09:48:22.000Z</published>
    <updated>2019-07-10T05:43:49.589Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在日常工作中，往往会出现后端接口还没有开发完成。这时我们可以根据已有的接口文档来搭建<code>web server</code>自己模拟假数据,拦截 <code>Ajax</code> 请求,返回模拟的响应数据。</p></blockquote><h1 id="一、开始-amp-安装"><a href="#一、开始-amp-安装" class="headerlink" title="一、开始 &amp; 安装"></a>一、开始 &amp; 安装</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们使用axios来发起http请求</span></span><br><span class="line">npm install axios --save</span><br><span class="line"><span class="comment">//安装依赖mockjs</span></span><br><span class="line">npm install mockjs --save-dev</span><br></pre></td></tr></table></figure><h1 id="二、拦截-amp-响应"><a href="#二、拦截-amp-响应" class="headerlink" title="二、拦截 &amp; 响应"></a>二、拦截 &amp; 响应</h1><p><em>拦截并响应浏览器的http请求</em></p><p>1.在<code>src</code>目录下新建<code>mock</code>目录，结构如下：</p><p>  <img src="/img/images/mock1.png" alt></p><p><br></p><p>2.<code>index.js</code>内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</span><br><span class="line"><span class="comment">//格式： Mock.mock( url, post/get , 返回的数据)；</span></span><br><span class="line">Mock.mock(<span class="string">'/user/userInfo'</span>, <span class="string">'get'</span>, <span class="built_in">require</span>(<span class="string">'./json/userInfo'</span>));</span><br></pre></td></tr></table></figure><p><br></p><p>3.<code>json</code>文件内容如下，以userInfo.json为例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"userid"</span>: <span class="string">"@id()"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"@cname()"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"@date()"</span>,</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"@image('200x100', '#02adea', 'Hello')"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"@paragraph()"</span>,</span><br><span class="line">    <span class="attr">"ip"</span>: <span class="string">"@ip()"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"@email()"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>4.在<code>main.js</code>入口文件中引入<code>mock</code>数据，不需要时，则注释掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./mock'</span>); <span class="comment">//引入mock数据，关闭则注释该行</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><p>3、在<code>vue</code>模板访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/userInfo'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>  <img src="/img/images/mock2.png" alt></p><p><br></p><p><a href="https://github.com/William-Cao/vue-app" target="_blank" rel="noopener">项目地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在日常工作中，往往会出现后端接口还没有开发完成。这时我们可以根据已有的接口文档来搭建&lt;code&gt;web server&lt;/code&gt;自己模拟假数据,拦截 &lt;code&gt;Ajax&lt;/code&gt; 请求,返回模拟的响应数据。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的数据结构和算法</title>
    <link href="https://www.williamife.com/2019/05/10/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://www.williamife.com/2019/05/10/JS数据结构与算法/</id>
    <published>2019-05-10T04:20:10.000Z</published>
    <updated>2020-09-09T07:40:28.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><p>在以往的工作经验中，数据结构和算法对于很多前端工程师来说，一直是可有可无的。但个人觉得，前端工程师其实也是需要重视数据结构和算法的，因为前端所做的东西是用户访问网站第一眼看到的东西，特别在移动浪潮到来之后，对用户体验越来越高，对前端提出了更高的要求，面对越来越复杂的产品，需要坚实的数据结构和算法基础才能驾驭。</p><p>如果没有学习过计算机科学的程序员，当我们在处理一些问题时，比较熟悉的数据结构就是数组，数组无疑是一个很好的选择。但很多时候，对于很多复杂的问题，数组就显得太过简陋了，当学习了数据结构和算法之后，对于很多编程问题，当想到一个合适的数据结构后，设计和实现解决这些问题的算法就手到擒来。</p><ul><li>数据结构：<code>列表、栈、队列、链表、字典、散列、图和二叉查找树</code></li><li>排序算法：<code>冒泡排序、选择排序、插入排序、希尔排序、归并排序和快速排序</code></li><li>查找算法：<code>顺序查找和二分查找</code></li></ul><h1 id="二、-数据结构"><a href="#二、-数据结构" class="headerlink" title="二、 数据结构"></a>二、 数据结构</h1><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1. 列表"></a>1. 列表</h2><p>在日常生活中，人们经常使用列表：待办事项列表、购物清单、最佳十名榜单等等。<br>而计算机程序也在使用列表，它是一组<code>有序</code>的数据，每个列表中的数据项称为<code>元素</code>。在JS中，列表中的元素可以是任意数据类型。列表中可以保存多少元素并没有限定（在实际使用时会受到程序内存的限制）。</p><p><strong><em>列表的数据结构较为简单，不需要在一个长序列中查找元素，或者对其进行排序。反之，如果数据结构非常复杂，列表的作用就没有那么大了。</em></strong></p><p><br></p><h2 id="2-栈"><a href="#2-栈" class="headerlink" title="2. 栈"></a>2. 栈</h2><p>栈<code>Stack</code>是一种 <code>LIFO</code> (Last-In-First-Out) 后进先出的数据结构，是一种特殊的列表。想象一下，我们平常在饭馆见到的一摞盘子就是现实世界常见的栈的例子，只能从最上面取盘子，盘子洗干净后，也只能放在最上面。</p><p>  <img src="/img/images/math1.png" alt></p><p><strong><em>栈是一种高效的数据结构，因为栈内的元素只能通过列表的一端访问，这一端称为栈顶。只要数据的保存满足后入先出或先进后出的原理，都优先考虑使用栈。</em></strong></p><p><br></p><h2 id="3-队列"><a href="#3-队列" class="headerlink" title="3. 队列"></a>3. 队列</h2><p>队列<code>Queue</code>是典型的 <code>FIFO</code> (First-In-First-Out) 先进先出的数据结构，也是一种特殊的列表，不同的是队列只能在队尾插入元素，在队首删除元素。想象一下，我们在银行排队，排在最前面的人第一个办理业务，而后面来的人只能排在队伍的后面，直到轮到他们为止。</p><ul><li><p>消息机制可以通过队列来实现，进程调度也是使用队列来实现。</p><p><img src="/img/images/math2.png" alt>  </p></li></ul><p><strong><em>只要数据的保存满足先进先出、后入后出的原理，都优先考虑使用队列。</em></strong></p><p><br></p><h2 id="4-链表"><a href="#4-链表" class="headerlink" title="4. 链表"></a>4. 链表</h2><p>链表<code>LinkedList</code>也是一种列表，与其他语言（比如C++和Java）的数组相比，在JavaScript中数组被实现成了对象，数组的索引下标需要在js语言内部转换为js对象的属性名，因此效率很低。如果你发现数组在实际使用时很慢，就可以考虑使用链表来代替它。</p><ul><li><p>单链表中的每个结点不仅包含值，还包含链接到下一个结点的引用字段。通过这种方式，单链表将所有结点按顺序组织起来。<br><img src="/img/images/math3.png" alt>  </p></li><li><p>双链表以类似的方式工作，但还有一个引用字段，称为“prev”字段。有了这个额外的字段，您就能够知道当前结点的前一个结点。<br><img src="/img/images/math4.png" alt>  </p></li><li><p>循环链表 和单链表相似，节点类型都是一样，唯一的区别是，在创建循环链表的时候，让其头节点的 next 属性执行它本身。<br><img src="/img/images/math5.png" alt>  </p></li></ul><p><strong><em>在实际应用中，除了有随机访问的需求之外，其他情况都可以用链表替换数组。</em></strong></p><p><br></p><h2 id="5-字典"><a href="#5-字典" class="headerlink" title="5. 字典"></a>5. 字典</h2><p>字典<code>Dictionary</code>是一种以键-值对存储数据的数据结构，JavaScript中的Object类就是以字典的形式设计的。JavaScript可以通过实现字典类，让这种字典类型的对象使用起来更加简单，字典可以实现对象拥有的常见功能，并相应拓展自己想要的功能。</p><p><strong><em>对象在JavaScript编写中随处可见，所以字典的作用也异常明显了。</em></strong></p><p><br></p><h2 id="6-散列"><a href="#6-散列" class="headerlink" title="6. 散列"></a>6. 散列</h2><p>散列<code>Hash</code>（也称为哈希表）是一种的常用的数组存储技术，散列后的数组可以快速地插入或取用。散列使用的数据结构叫做散列表。在散列表上插入、删除和取用数据都非常快，但对于查找操作来说却效率低下，比如查找一组数组中的最大值和最小值。这些操作需要求助于其他数据结构，比如二叉查找树。</p><p>散列表在JavaScript中可以基础数组去进行设计。数组的长度是预先设定的，所有元素根据和该元素对应的键，保存在数组的特定位置，这里的键和对象的键是类型的概念。使用散列表存储数组时，通过一个散列函数将键映射为一个数字，这个数字的范围是0到散列表的长度。</p><ul><li><p>哈希表的关键思想是使用哈希函数将键映射到存储桶</p><p><img src="/img/images/math6.png" alt>  </p></li></ul><p>即使使用一个高效的散列函数，依然存在将两个键映射为同一个值得可能，这种现象叫做碰撞。常见碰撞的处理方法有：开链法和线性探测法。</p><p><strong><em>哈希表可以用于数据的插入、删除和取用，不适用于查找数据。</em></strong></p><p><br></p><h2 id="7-图"><a href="#7-图" class="headerlink" title="7. 图"></a>7. 图</h2><p>图<code>Graph</code>由边的集合及顶点的集合组成。 顶点代表对象，边则建立起对象之间的关系或关联。<br>如果一个图的顶点对是有序的，则称之为有向图（如流程图），反之，称之为无序图。</p><p>  <img src="/img/images/math7.png" alt>  </p><ul><li>图的存储结构一般为邻接矩阵和邻接表。</li><li>搜索图的算法主要有两种：深度优先搜索和广度优先搜索。</li></ul><p><br></p><h2 id="8-二叉树"><a href="#8-二叉树" class="headerlink" title="8. 二叉树"></a>8. 二叉树</h2><p>树<code>Tree</code>一种非线性的数据结构，以分层的方式存储数据。<br>在树结构中，每一个结点只有一个前件，称为父结点，没有前件的结点只有一个，称为树的<code>根结点</code>，简称树的<code>根</code>（root）。每一个结点可以有多个后件，称为该结点的子结点。没有后件的结点称为叶子结点。一个结点所拥有的子结点的个数称为该结点的度，所有结点中最大的度称为树的度。树的最大层次称为树的深度。</p><p>二叉树每个节点的子节点不允许超过两个。一个父节点的两个子节点分别称为左节点和右节点，通过将子节点的个数限定为2，可以写出高效的程序在树中插入、查找和删除数据。<br>  <img src="/img/images/math8.png" alt>  </p><p>按照根节点访问的顺序不同，树的遍历分为以下三种：</p><ul><li>前序遍历：根节点-&gt;左子树-&gt;右子树 <code>ABDEFGC</code></li><li>中序遍历：左子树-&gt;根节点-&gt;右子树 <code>DEBGFAC</code></li><li>后序遍历：左子树-&gt;右子树-&gt;根节点 <code>EDGFBCA</code></li></ul><p>二叉查找树<code>BST</code>（Binary Sort Tree）是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中。这一特性使得查找的效率很高，对于数值型和非数值型的数据，比如单词和字符串，都是如此。<br>  <img src="/img/images/math9.png" alt>  </p><p><strong><em>由于树存储的所有元素之间具有明显的层次特性，因此常被用来存储具有层级关系的数据，比如文件系统中的文件；也会被用来存储有序列表等。</em></strong></p><p><br></p><h1 id="三、-排序算法"><a href="#三、-排序算法" class="headerlink" title="三、 排序算法"></a>三、 排序算法</h1><h2 id="普通排序算法"><a href="#普通排序算法" class="headerlink" title="普通排序算法"></a>普通排序算法</h2><blockquote><p>普通排序算法基本核心思想是指对一组数组按照一定的顺序重新排列。重新排列时用到的技术是一组嵌套的for循环。其中外循环会遍历数组的每一项，内循环则用于比较元素。</p></blockquote><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (i; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 优化版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = arr.length</span><br><span class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pos = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (j; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">          pos = j</span><br><span class="line">          <span class="keyword">let</span> temp = arr[j]</span><br><span class="line">          arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">          arr[j+<span class="number">1</span>] = temp</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    i = pos</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>];</span><br><span class="line">bubbleSort(arr)</span><br><span class="line"><span class="comment">// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure><p>  <img src="/img/images/math10.gif" alt>  </p><p><br></p><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><p>选择排序 (Selection Sort) 是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length;</span><br><span class="line">  <span class="keyword">let</span> minIndex, temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[minIndex]</span><br><span class="line">    arr[minIndex] = arr[i]</span><br><span class="line">    arr[i] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(selectionSort(arr));</span><br><span class="line"><span class="comment">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure><p>  <img src="/img/images/math11.gif" alt>  </p><p><br></p><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = key</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>];</span><br><span class="line"><span class="built_in">console</span>.log(insertSort(arr));</span><br><span class="line"><span class="comment">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure><p>  <img src="/img/images/math12.gif" alt>  </p><p><br></p><h2 id="高级排序算法"><a href="#高级排序算法" class="headerlink" title="高级排序算法"></a>高级排序算法</h2><blockquote><p>高级数据排序算法，通常用于处理大型数据集的最高效排序算法，它们处理的数据集可以达到上百万个元素，而不仅仅是几百个或者几千个，下面我们将介绍希尔排序、归并排序和快速排序。</p></blockquote><h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4. 希尔排序"></a>4. 希尔排序</h2><p>1959年Shell(Shell Sort)发明，第一个突破O(n^2)的排序算法；是简单插入排序的改进版；它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。<br>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length;</span><br><span class="line">  <span class="keyword">let</span> temp, gap = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (gap &lt; len / <span class="number">3</span>) &#123;</span><br><span class="line">    gap = gap * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    gap = (gap - <span class="number">1</span>) / <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>];</span><br><span class="line"><span class="built_in">console</span>.log(shellSort(arr));</span><br><span class="line"><span class="comment">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5. 归并排序"></a>5. 归并排序</h2><p>归并排序(Merge Sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> left = arr.slice(<span class="number">0</span>, middle)</span><br><span class="line">  <span class="keyword">let</span> right = arr.slice(middle)</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span> (<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">      result.push(left.shift())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(right.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (left.length) &#123;</span><br><span class="line">    result.push(left.shift())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (right.length) &#123;</span><br><span class="line">    result.push(right.shift())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>];</span><br><span class="line"><span class="built_in">console</span>.log(mergeSort(arr));</span><br></pre></td></tr></table></figure><p>  <img src="/img/images/math13.gif" alt><br><br></p><h2 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6. 快速排序"></a>6. 快速排序</h2><p>快速排序(Quick Sort)是处理大数据集最快的排序算法之一。</p><p>它是一种分而治之的算法，通过递归的方法将数据依次分解为包含较小元素和较大元素的不同子序列。该算法不断重复这个步骤知道所有数据都是有序的。<br>这个算法首先要在列表中选择一个元素作为基准值。数据排序围绕基准值进行，将列表中小于基准值的元素移到数组的底部，将大于基准值的元素移到数组的顶部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> left = []</span><br><span class="line">  <span class="keyword">let</span> right = []</span><br><span class="line">  <span class="keyword">let</span> pivot = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> qSort(left).concat(pivot, qSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>];</span><br><span class="line"><span class="built_in">console</span>.log(qSort(arr));</span><br></pre></td></tr></table></figure><p><br></p><h1 id="四、-查找算法"><a href="#四、-查找算法" class="headerlink" title="四、 查找算法"></a>四、 查找算法</h1><p>在列表中查找数据有两种方式：<code>顺序查找</code>和<code>二分查找</code>。顺序查找适用于元素随机排列的列表；二分查找适用于元素已排序的列表。二分查找效率更高，但是必须在进行查找之前花费额外的时间将列表中的元素排序。</p><h2 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1. 顺序查找"></a>1. 顺序查找</h2><blockquote><p>对于查找数据，最简单的方法就是从列表的第一个元素开始对列表元素逐个进行判断，直到找到了想要的结果，或者直到列表结尾也没有找到。这种方法称为顺序查找，有时也被称为线性查找。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seqSearch</span> (<span class="params">arr, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === data) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>];</span><br><span class="line"><span class="built_in">console</span>.log(seqSearch(arr, <span class="number">15</span>))</span><br></pre></td></tr></table></figure><p><br></p><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h2><blockquote><p>二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。</p></blockquote><p>查找过程可以分为以下步骤：<br>首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。<br>如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。<br>如果某一步数组为空，则表示找不到目标元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binSearch</span> (<span class="params">arr, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> high = arr.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (arr[middle] &lt; data) &#123;</span><br><span class="line">      low = middle + <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[middle] &gt; data) &#123;</span><br><span class="line">      high = middle - <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> middle</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>];</span><br><span class="line"><span class="built_in">console</span>.log(binSearch(arr, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p><br></p><p>参考文章：</p><ul><li><a href="https://www.2cto.com/kf/201609/548586.html" target="_blank" rel="noopener">十大经典算法总结(Javascript描述)</a></li><li><a href="https://www.jianshu.com/u/4d7dd4c7e51d" target="_blank" rel="noopener">JS中的算法与数据结构</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h1&gt;&lt;p&gt;在以往的工作经验中，数据结构和算法对于很多前端工程师来说，一直是可有可无的。但个人觉得，前端工程师其实也是需要重视数
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="https://www.williamife.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JS中的原型和原型链</title>
    <link href="https://www.williamife.com/2019/04/29/JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://www.williamife.com/2019/04/29/JS中的原型和原型链/</id>
    <published>2019-04-29T11:01:55.000Z</published>
    <updated>2019-07-10T05:43:49.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>在基于类的传统面向对象的编程语言中，对象由类实例化而来，实例化的过程中，类的属性和方法会拷贝到这个对象中；对象的继承实际上是类的继承，在定义子类继承于父类时，子类会将父类的属性和方法拷贝到自身当中。因此，这类语言中，对象创建和继承行为都是通过拷贝完成的。但在JavaScript中，对象的创建、对象的继承<code>（更好的叫法是对象的代理，因为它并不是传统意义上的继承）</code>是不存在拷贝行为的。<code>(ES6 中的class也只不过是语法糖，并非真正意义上的类)</code></em></strong></p><h1 id="一、-原型"><a href="#一、-原型" class="headerlink" title="一、 原型"></a>一、 原型</h1><p>在JavaScript中，函数可以有属性。 每个函数都有一个特殊的属性叫作原型<code>prototype</code>，正如下面所展示的。原型是为了<code>共享</code>多个对象之间的一些共有特性（属性或方法），这个功能也是任何一门面向对象的编程语言必须具备的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log( doSomething.prototype );</span><br><span class="line"></span><br><span class="line"><span class="comment">// doSomething 函数有一个默认的原型属性，它在控制台上面呈现了出来.</span></span><br><span class="line"><span class="comment">// 运行这段代码之后，控制台上面应该出现了像这样的一个对象.</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">constructor</span>: ƒ doSomething(),</span><br><span class="line">    __proto__: &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: ƒ Object(),</span><br><span class="line">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class="line">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class="line">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class="line">        toLocaleString: ƒ toLocaleString(),</span><br><span class="line">        toString: ƒ toString(),</span><br><span class="line">        valueOf: ƒ valueOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、-原型链"><a href="#二、-原型链" class="headerlink" title="二、 原型链"></a>二、 原型链</h1><p>JavaScript 常被描述为一种基于原型的语言 (prototype-based language)——每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/images/prototype.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>JavaScript中的对象，都有一个内置属性<code>[[Prototype]]</code>，指向这个对象的原型对象。当查找一个属性或方法时，如果在当前对象中找不到定义，会继续在当前对象的原型对象中查找；如果原型对象中依然没有找到，会继续在原型对象的原型中查找<code>(原型也是对象，也有它自己的原型)</code>；如此继续，直到找到为止，或者查找到最顶层的原型对象中也没有找到，就结束查找，返回undefined。可以看出，这个查找过程是一个链式的查找，每个对象都有一个到它自身原型对象的链接，这些链接组建的整个链条就是原型链。拥有相同原型的多个对象，他们的共同特征正是通过这种查找模式体现出来的。</p><p>在<code>doSomething</code>的例子中，我们可以看到最顶层的原型对象，这个对象就是Object.prototype，这个对象中保存了最常用的方法，如toString、valueOf、hasOwnProperty等，因此我们才能在任何对象中使用这些方法。</p><h1 id="三、-prototype"><a href="#三、-prototype" class="headerlink" title="三、 prototype"></a>三、 prototype</h1><p>prototype 属性：继承成员被定义的地方</p><p>在 JavaScript 原型继承结构里面，规范中用 <code>[[Prototype]]</code> 表示对象隐式的原型，在 JavaScript 中用 <code>__proto__</code> 表示，在 Firefox 和 Chrome 浏览器中是可以访问得到这个属性的，在 IE 下不行。所有 JavaScript 对象都有 <code>__proto__</code> 属性，但只有 <code>Object.prototype.__proto__</code>为 <code>null</code> ，前提是没有修改过这个属性。这个属性指向它的原型对象。 至于显示的原型，在 JavaScript 里用 prototype 属性表示。</p><h1 id="四、-constructor"><a href="#四、-constructor" class="headerlink" title="四、 constructor"></a>四、 constructor</h1><p>每个实例对象都从原型中继承了一个 <code>constructor</code> 属性，该属性指向了用于构造此实例对象的构造函数。</p><p>一个小技巧是，你可以在 <code>constructor</code> 属性的末尾添加一对圆括号（括号中包含所需的参数），从而用这个构造器创建另一个对象实例。毕竟构造器是一个函数，故可以通过圆括号调用；只需在前面添加 <code>new</code> 关键字，便能将此函数作为构造器使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123; <span class="comment">//递归拷贝</span></span><br><span class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//null 的情况</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="comment">//如果不是复杂数据类型，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果obj是数组，那么 obj.constructor 是 [Function: Array]</span></span><br><span class="line"><span class="comment">     * 如果obj是对象，那么 obj.constructor 是 [Function: Object]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> t = <span class="keyword">new</span> obj.constructor();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">//如果 obj[key] 是复杂数据类型，递归</span></span><br><span class="line">        t[key] = deepClone(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、-注意事项"><a href="#五、-注意事项" class="headerlink" title="五、 注意事项"></a>五、 注意事项</h1><p>对象的<code>原型</code>（可以通过Object.getPrototypeOf()或者已被弃用的__proto__属性获得）与构造函数的 <code>prototype</code> 属性之间的区别是很重要的。前者是每个实例上都有的属性，后者是构造函数的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">new</span> <span class="built_in">String</span>()) === <span class="built_in">String</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">new</span> <span class="built_in">Number</span>()) === <span class="built_in">Number</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">new</span> <span class="built_in">Object</span>()) === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">new</span> <span class="built_in">Array</span>()) === <span class="built_in">Array</span>.prototype   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>Q: 如何创造一个既没有属性方法也没有原型链的空对象?</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nullObject = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// &#123;&#125; No properties</span></span><br><span class="line">nullObject.__proto__;   <span class="comment">// undefined</span></span><br><span class="line">nullObject.prototype;   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><br></p><p>参考文章：</p><ul><li><a href="https://juejin.im/post/599d69fc6fb9a0248f4a7b31" target="_blank" rel="noopener">白话原型和原型链</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/index.html" target="_blank" rel="noopener">JavaScript instanceof 运算符深入剖析</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN Web Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;在基于类的传统面向对象的编程语言中，对象由类实例化而来，实例化的过程中，类的属性和方法会拷贝到这个对象中；对象的继承实际上是类的继承，在定义子类继承于父类时，子类会将父类的属性和方法拷贝到自身当中。因此，这类语言中，对象创建和继承行为都是通过拷贝完成
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>I/O模型、Libuv和Eventloop</title>
    <link href="https://www.williamife.com/2019/03/28/%E6%B5%85%E8%B0%88IO%E6%A8%A1%E5%9E%8B%E4%B8%8EEvent%20Loop/"/>
    <id>https://www.williamife.com/2019/03/28/浅谈IO模型与Event Loop/</id>
    <published>2019-03-28T08:40:00.000Z</published>
    <updated>2019-07-10T05:43:49.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、I-O模型"><a href="#一、I-O模型" class="headerlink" title="一、I/O模型"></a>一、I/O模型</h1><p>①常见的IO模型：<code>Linux(UNIX)操作系统中的网络IO模型为例</code></p><ol><li><code>Blocking I/O</code>      同步阻塞IO</li><li><code>Non-blocking I/O</code>  同步非阻塞IO</li><li><code>I/O Multiplexing</code>  IO多路复用</li><li><code>Signal-blocking I/O</code>  信号驱动IO</li><li><code>Asynchronous I/O</code>  异步IO</li></ol><p>②基本概念的定义：</p><p>IO 指的是输入输出，通常指数据在内部存储器和外部存储器或其他周边设备之间的输入和输出。简而言之，从硬盘中读写数据或者从网络上收发数据，都属于IO行为。</p><ul><li>IO：内存IO、网络IO和磁盘IO，通常我们说的IO指的是后两者。</li><li>阻塞和非阻塞：在调用结果在返回之前，当前线程是否挂起，即发起IO请求是否会被阻塞。</li><li>同步和异步：如果做阻塞I/O调用，应用程序等待调用的完成的过程就是一种同步状况。相反，I/O为非阻塞模式时，应用程序则是异步的。</li></ul><p>③完成一次IO的过程：<br>以读一个文件为例,一个IO读过程是文件数据从磁盘→内核缓冲区→用户内存的过程。</p><p>同步与异步的区别主要在于数据从<strong>内核缓冲区→用户内存</strong>这个过程需不需要用户（应用）进程等待，即实际的IO读写是否阻塞请求进程。<code>(网络IO可把磁盘换做网卡)</code></p><p><br></p><h2 id="1、同步阻塞IO"><a href="#1、同步阻塞IO" class="headerlink" title="1、同步阻塞IO"></a>1、同步阻塞IO</h2><p>  <img src="/img/images/io1.png" alt></p><p><code>阻塞 I/O</code>是最简单的 I/O 模型，一般表现为进程或线程等待某个条件，如果条件不满足，则一直等下去。条件满足，则进行下一步操作。</p><p>应用进程通过系统调用 <code>recvfrom</code> 接收数据，但由于内核还未准备好数据报，应用进程就会阻塞住，直到内核准备好数据报，<code>recvfrom</code> 完成数据报复制工作，应用进程才能结束阻塞状态。</p><p><br></p><h2 id="2、同步非阻塞IO"><a href="#2、同步非阻塞IO" class="headerlink" title="2、同步非阻塞IO"></a>2、同步非阻塞IO</h2><p>  <img src="/img/images/io2.png" alt></p><p>应用进程通过 <code>recvfrom</code> 调用不停的去和内核交互，直到内核准备好数据。如果没有准备好，内核会返回 <code>error</code> ，应用进程在得到 <code>error</code> 后，过一段时间再发送 <code>recvfrom</code> 请求。如果某一次轮询发现数据已经准备好了，那就把数据拷贝到用户空间中。在发送请求的时间间隔中，进程可以先做别的事情。</p><p><br></p><h2 id="3、IO多路复用"><a href="#3、IO多路复用" class="headerlink" title="3、IO多路复用"></a>3、IO多路复用</h2><p>  <img src="/img/images/io3.png" alt></p><p>IO多路复用是多了一个<code>select</code>函数，多个进程的IO可以注册到同一个<code>select</code>上，当用户进程调用该<code>select</code>，<code>select</code>会监听所有注册好的IO，如果所有被监听的IO需要的数据都没有准备好时，<code>select</code>调用进程会阻塞。当任意一个IO所需的数据准备好之后，<code>select</code>调用就会返回，然后进程在通过<code>recvfrom</code>来进行数据拷贝。</p><p>这里的IO复用模型，并没有向内核注册信号处理函数，所以，他并不是非阻塞的。进程在发出select后，要等到select监听的所有IO操作中至少有一个需要的数据准备好，才会有返回，并且也需要再次发送请求去进行文件的拷贝。</p><p><br></p><h2 id="4、信号驱动IO"><a href="#4、信号驱动IO" class="headerlink" title="4、信号驱动IO"></a>4、信号驱动IO</h2><p>  <img src="/img/images/io4.png" alt></p><p>应用进程预先向内核注册一个信号处理函数，然后用户进程返回，并且不阻塞，当内核数据准备就绪时会发送一个信号给进程，用户进程便在信号处理函数中开始把数据拷贝的用户空间中。</p><p><br></p><h2 id="5、异步IO"><a href="#5、异步IO" class="headerlink" title="5、异步IO"></a>5、异步IO</h2><p>  <img src="/img/images/io5.png" alt></p><p>应用进程发起<code>aio_read</code>操作之后，给内核传递描述符、缓冲区指针、缓冲区大小等，告诉内核当整个操作完成时，如何通知进程，然后就立刻去做其他事情了。当内核收到<code>aio_read</code>后，会立刻返回，然后内核开始等待数据准备，数据准备好以后，直接把数据拷贝到用户控件，然后再通知进程本次IO已经完成。</p><p><br></p><h2 id="6、五种IO模型对比"><a href="#6、五种IO模型对比" class="headerlink" title="6、五种IO模型对比"></a>6、五种IO模型对比</h2><p>  <img src="/img/images/io6.png" alt></p><p>阻塞IO模型、非阻塞IO模型、IO多路复用和信号驱动IO模型都是同步的IO模型，因为无论以上那种模型，真正的数据拷贝过程，都是同步进行的。</p><p><br></p><h1 id="二、Libuv"><a href="#二、Libuv" class="headerlink" title="二、Libuv"></a>二、Libuv</h1><p>libuv是一个高性能事件驱动库，屏蔽了各种操作系统的差异从而提供了统一的API。libuv严格使用异步、事件驱动的编程风格。其核心工作是提供事件循环及 <code>基于I/O</code> 或其他活动事件的回调机制。libuv库包含了诸如计时器、非阻塞网络支持、异步文件系统访问、线程创建、子进程等核心工具。</p><p>  <img src="/img/images/io7.png" alt></p><h2 id="1、-句柄和请求"><a href="#1、-句柄和请求" class="headerlink" title="1、 句柄和请求"></a>1、 句柄和请求</h2><p>libuv给用户提供了两种方式与event loop一起协同工作，一个是句柄(handle)一个是请求(request)。</p><p>句柄(handle)代表了一个长期存在的对象，这些对象当处于活跃状态的时候能够执行特定的操作。例如：一个准备（prepare）句柄在活跃的时候可以在每个循环中调用它的回调一次。一个TCP服务器的句柄在每次有新的连接的时候都会调用它的连接回调函数。</p><p>请求(request)一般代表短时操作。这些操作能用作用于句柄之上。写请求用于在句柄上写数据；还有一些例外，比如说getaddrinfo请求不需要句柄而是直接在循环中执行。</p><h2 id="2、-I-O循环"><a href="#2、-I-O循环" class="headerlink" title="2、  I/O循环"></a>2、  I/O循环</h2><p>I/O循环或者叫做事件循环是整个libuv的核心部分。I/O循环建立了所有IO操作的执行环境，I/O循环会被绑定在一个线程之上。我们可以运行多个事件循环，只要每一个都运行在不同的线程之上。libuv事件循环不是线程安全的，所以所有包含事件循环的API及句柄都不是线程安全的。</p><p>事件循环遵循最普遍的<code>单线程异步I/O</code>方法：所有I/O或者网络操作在非阻塞的socket上执行，这个socket会使用基于平台的组好的poll机制：在linux上使用<code>epoll</code>，在OSX和其他BSD平台上使用<code>kqueue</code>，在sunOS上使用<code>event ports</code>，在windows上使用<code>IOCP</code>。作为循环迭代的一部分，循环会阻塞以等待socket上的I/O活动，这些活动已经被加到socket的触发实践中了，一旦这些条件满足，那么socket的状态就会发生变化，从而循环不再阻塞，而且句柄也可以读、写及执行其他期望的I/O操作。</p><p><strong>更好的理解事件循环操作如何进行，下图展示了一个循环迭代的所有阶段。</strong></p><p>  <img src="/img/images/io8.png" alt></p><p>文件 I/O 与网络 I/O 不同 ，并不存在 libuv 可以依靠的各特定平台下的文件 I/O 基础函数，所以目前的实现是在线程中执行阻塞的文件 I/O 操作来模拟异步。</p><p><strong>注意：libuv利用线程池技术使得异步文件I/O操作称为可能，但是对于网络IO只能执行在一个单一线程中，即loop的线程中。</strong></p><p><br></p><h1 id="三、Event-Loop"><a href="#三、Event-Loop" class="headerlink" title="三、Event Loop"></a>三、Event Loop</h1><blockquote><p>任务队列</p></blockquote><p>异步任务分为task（宏任务，也可称为macroTask）和microtask（微任务）两类。<br>当满足执行条件时，task和microtask会被放入各自的队列中等待放入主线程执行，我们把这两个队列称为Task Queue(Macrotask Queue)和Microtask Queue。</p><p><strong>MacroTask（宏任务）</strong></p><p><code>script代码</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(浏览器IE10)</code>、<code>MessageChannel</code>、<code>I/O</code>、<code>UI-Rendering</code></p><p><strong>MicroTask（微任务）</strong></p><p><code>Process.nextTick(Node独有)</code>、<code>Promise</code>、<code>MutationObserver</code>、<code>Object.observe(废弃)</code></p><h2 id="1、-浏览器-E-L"><a href="#1、-浏览器-E-L" class="headerlink" title="1、 浏览器 E-L"></a>1、 浏览器 E-L</h2><p>JS调用栈采用的是<code>先进后出</code>原则，当函数执行的时候，会被添加到栈的顶部，当执行栈执行完成后，就会从栈顶移出，直到栈内被清空。</p><ul><li><code>执行栈在执行完同步任务后</code> ，查看执行栈是否为空，如果执行栈为空，就会去检查微任务<code>microTask</code>队列是否为空，如果为空的话，就执行Task（宏任务），否则执行微任务。</li><li><code>每当单个宏任务执行完毕后</code> ，检查<code>microTask</code>队列是否为空，如果不为空，会按照 <code>先入先出</code> 原则全部执行microTask队列，设置microTask队列为null，然后再执行宏任务，如此反复。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// script start、script end、promise1、promise2、setTimeout</span></span><br></pre></td></tr></table></figure><p>Another One</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async2 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>async/await</code> 在底层转换成了 <code>promise</code> 和 <code>then</code> 回调函数。</li><li>每次我们使用 <code>await</code>, 解释器都创建一个 <code>promise</code> 对象，然后把剩下的 <code>async</code> 函数中代码的操作放到 <code>then</code> 回调函数中。</li></ul><p><strong>关于Chrome73以下版本和73版本的区别</strong></p><ul><li><p>在老版本版本以下，先执行<code>promise1</code>和<code>promise2</code>，再执行<code>async1</code>。<br>script start、async2 end、Promise、script end、<code>promise1、promise2、async1 end</code>、setTimeout</p></li><li><p>在73版中，先执行<code>async1</code>再执行<code>promise1</code>和<code>promise2</code>。<br>script start、async2 end、Promise、script end、<code>async1 end、promise1、promise2</code>、setTimeout</p></li></ul><p><em>主要原因是因为在谷歌73版本中更改了规范</em></p><h2 id="2、-Node-E-L"><a href="#2、-Node-E-L" class="headerlink" title="2、 Node E-L"></a>2、 Node E-L</h2><p>  <img src="/img/images/io9.png" alt></p><p>在Node中事件每一轮循环按照顺序分为6个阶段，来自libuv的实现：</p><pre><code>   ┌───────────────────────┐┌─&gt;│        timers         ││  └──────────┬────────────┘│  ┌──────────┴────────────┐│  │     I/O callbacks     ││  └──────────┬────────────┘│  ┌──────────┴────────────┐│  │     idle, prepare     ││  └──────────┬────────────┘      ┌───────────────┐│  ┌──────────┴────────────┐      │   incoming:   ││  │         poll          │&lt;─────┤  connections, ││  └──────────┬────────────┘      │   data, etc.  ││  ┌──────────┴────────────┐      └───────────────┘│  │        check          ││  └──────────┬────────────┘│  ┌──────────┴────────────┐└──┤    close callbacks    │   └───────────────────────┘</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">timers：执行满足条件的setTimeout、setInterval回调。</span><br><span class="line">I/O callbacks：是否有已完成的I/O操作的回调函数，来自上一轮的poll残留。</span><br><span class="line">idle，prepare：可忽略</span><br><span class="line">poll：等待还没完成的I/O事件，会因timers和超时时间等结束等待。</span><br><span class="line">check：执行setImmediate的回调。</span><br><span class="line">close callbacks：关闭所有的closing handles，一些onclose事件。</span><br></pre></td></tr></table></figure><p>我们需要重点关心的是<code>timers</code>、<code>poll</code>、<code>check</code>这三个阶段。</p><p><strong>1. timers</strong><br>执行<code>setTimeout</code>和<code>setInterval</code>中到期的<code>callback</code>，执行这两者回调需要设置一个毫秒数，理论上来说，应该是时间一到就<code>立即执行</code>callback回调，但是由于system的调度可能会延时，达不到预期时间。</p><p><strong>2. poll</strong><br>执行<code>I/O回调</code> 和 处理<code>轮询队列</code>中的事件。</p><p>① 如果 poll 队列不是空的，event loop 就会依次执行队列里的回调函数，直到队列被清空或者到达 poll 阶段的时间上限。</p><p>② 如果 poll 队列是空的，就会：</p><ol><li>有 setImmediate 任务，event loop 就结束 poll 阶段去往 check 阶段。</li><li>没有 setImmediate 任务，event loop 就会等待新的回调函数进入 poll 队列，并立即执行它。</li></ol><p><strong>3. check</strong><br><strong><em>此阶段允许人员在poll阶段完成后立即执行回调。</em></strong></p><p>setImmediate()实际上是一个特殊的计时器，它在事件循环的一个单独阶段运行。它是通过 libuv 里一个能将回调安排在 poll 阶段之后执行的 API 实现的。</p><p>在poll队列是空的 且有 setImmediate 任务的情况下，event loop 就结束 poll 阶段去往 check 阶段执行任务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timer1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timer2'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><p>如果<code>node</code>版本为<code>v11.x</code>， 其结果与浏览器一致：</p><pre><code>startendpromise3timer1promise1timer2promise2</code></pre><p><code>v10</code>如果time2定时器已经在执行队列中结果为：</p><pre><code>startendpromise3timer1timer2promise1promise2</code></pre><p>否则和第一个结果一致。</p><p>了解浏览器的eventloop可能就知道，浏览器的宏任务队列执行了一个，就会执行微任务。</p><p>简单的说，可以把浏览器的宏任务和<code>node10</code>的<code>timers</code>比较，就是node10只有全部执行了timers阶段队列的全部任务才执行微任务队列，而浏览器只要执行了一个宏任务就会执行微任务队列。</p><p><code>node11</code>保持和浏览器相同。</p><p><br></p><h3 id="1-setImmediate-amp-amp-setTimeout"><a href="#1-setImmediate-amp-amp-setTimeout" class="headerlink" title="1. setImmediate &amp;&amp; setTimeout"></a>1. setImmediate &amp;&amp; setTimeout</h3><p>setImmediate和setTimeout是相似的，但根据它们被调用的时间以不同的方式表现。</p><p><code>setImmediate()</code>设计用于在当前<code>poll</code>阶段完成后<code>check</code>阶段执行脚本 。<br><code>setTimeout()</code>为最小（ms）后运行的脚本，在<code>timers</code>阶段执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeout,immediate</span></span><br><span class="line"><span class="comment">// immediate,timeout</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'../file.txt'</span>, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// immediate,timeout</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="2-Process-nextTick"><a href="#2-Process-nextTick" class="headerlink" title="2. Process.nextTick"></a>2. Process.nextTick</h3><p><code>process.nextTick()</code>虽然它是异步API的一部分，但从技术上讲，它不是事件循环的一部分。</p><p><code>process.nextTick()</code>方法将 callback 添加到next tick队列。 一旦当前事件轮询队列的任务全部完成，在next tick队列中的所有callbacks会被依次调用。</p><p>当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 <code>microtask</code> 执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Promise'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'nextTick'</span>));</span><br><span class="line"><span class="comment">// nextTick</span></span><br><span class="line"><span class="comment">// Promise</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setImmediate1'</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'nextTick'</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>);</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setImmediate2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果1</span></span><br><span class="line"><span class="comment">// setImmediate1</span></span><br><span class="line"><span class="comment">// setTimeout2</span></span><br><span class="line"><span class="comment">// setTimeout1</span></span><br><span class="line"><span class="comment">// nextTick</span></span><br><span class="line"><span class="comment">// setImmediate2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果2</span></span><br><span class="line"><span class="comment">// setTimeout2</span></span><br><span class="line"><span class="comment">// nextTick</span></span><br><span class="line"><span class="comment">// setImmediate1</span></span><br><span class="line"><span class="comment">// setImmediate2</span></span><br><span class="line"><span class="comment">// setTimeout1</span></span><br></pre></td></tr></table></figure><blockquote><p>JavaScript是单线程的，但Node本身其实是多线程的，除了用户代码无法并行执行外，所有的I/O请求是可以并行执行的。<br>事件循环是Node异步I/O实现的核心，Node通过事件驱动的方式处理请求，使得其无须为每个请求创建额外的线程，省掉了创建和销毁线程的开销。同时也因为线程数较少，不受线程上下文切换的影响，维持了Node的高性能。<br>Node异步IO、非阻塞的特性，使它非常适用于IO密集、高并发的应用场景。</p></blockquote><p><br></p><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/gui951753/article/details/82348485" target="_blank" rel="noopener">Linux下五种I/O模型详解</a></li><li><a href="http://lpbobo.com/2016/04/21/%E9%AB%98%E5%B9%B6%E5%8F%91IO%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">高并发I/O模型</a></li><li><a href="https://segmentfault.com/a/1190000005873917" target="_blank" rel="noopener">[译]libuv 设计概述</a></li><li><a href="https://juejin.im/post/5c9a43175188252d876e5903" target="_blank" rel="noopener">Eventloop不可怕，可怕的是遇上Promise</a></li><li><a href="https://juejin.im/post/5c3e8d90f265da614274218a" target="_blank" rel="noopener">又被node的eventloop坑了，这次是node的锅</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、I-O模型&quot;&gt;&lt;a href=&quot;#一、I-O模型&quot; class=&quot;headerlink&quot; title=&quot;一、I/O模型&quot;&gt;&lt;/a&gt;一、I/O模型&lt;/h1&gt;&lt;p&gt;①常见的IO模型：&lt;code&gt;Linux(UNIX)操作系统中的网络IO模型为例&lt;/code&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://www.williamife.com/tags/Node-js/"/>
    
      <category term="Libuv" scheme="https://www.williamife.com/tags/Libuv/"/>
    
      <category term="I/O模型" scheme="https://www.williamife.com/tags/I-O%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于6种Web安全常见的攻防姿势</title>
    <link href="https://www.williamife.com/2019/03/21/%E5%85%B3%E4%BA%8EWeb%E5%AE%89%E5%85%A8%E5%B8%B8%E8%A7%81%E7%9A%84%E6%94%BB%E9%98%B2%E5%A7%BF%E5%8A%BF/"/>
    <id>https://www.williamife.com/2019/03/21/关于Web安全常见的攻防姿势/</id>
    <published>2019-03-21T09:10:00.000Z</published>
    <updated>2019-11-27T08:04:18.345Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关于Web安全的问题，是一个老生常谈的问题，作为离用户最近的一层，我们大前端应该把手伸的更远一点。</strong></p><p>我们最常见的Web安全攻击有以下几种：</p><ol><li><code>XSS</code> 跨站脚本攻击</li><li><code>CSRF</code> 跨站请求伪造</li><li><code>URL</code> 跳转漏洞</li><li><code>ClickJacking</code> 点击劫持/UI-覆盖攻击</li><li><code>SQL Injection</code> SQL注入</li><li><code>OS Command Injection</code> OS命令注入</li></ol><h1 id="一、XSS"><a href="#一、XSS" class="headerlink" title="一、XSS"></a>一、XSS</h1><blockquote><p>XSS （Cross Site Script），中文是跨站脚本攻击；其原本缩写是 CSS，但为了和层叠样式表(Cascading Style Sheet)有所区分，因而在安全领域叫做 XSS。</p></blockquote><p><strong><em>恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</em></strong></p><p>XSS攻击可以分为3类：</p><ul><li>反射型 - 非持久型  <code>Reflected XSS</code></li><li>存储型 - 持久型    <code>Stored XSS</code></li><li>基于DOM或本地的XSS  <code>DOM-based or local XSS</code></li></ul><p><br></p><h2 id="1-反射型"><a href="#1-反射型" class="headerlink" title="1. 反射型"></a>1. 反射型</h2><p>反射型 XSS 只是简单地把用户输入的数据 “反射” 给浏览器，这种攻击方式往往需要攻击者诱使用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。</p><p><code>假装我是一个恶意链接（Click Me~）</code></p><figure class="highlight js"><figcaption><span>node</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=UTF-8'</span>&#125;);</span><br><span class="line">  res.write(<span class="string">'&lt;script&gt;while(true)alert("反射型 XSS 攻击")&lt;/script&gt;'</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'8000'</span>);</span><br></pre></td></tr></table></figure><p>这样就产生了反射型 XSS 攻击。攻击者可以注入任意的恶意脚本进行攻击，可能注入恶作剧脚本，或者注入能获取用户隐私数据(如cookie)的脚本，这取决于攻击者的目的。</p><h2 id="2-存储型"><a href="#2-存储型" class="headerlink" title="2. 存储型"></a>2. 存储型</h2><p>存储型 XSS 会把用户输入的数据 “存储” 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。<code>这种 XSS 攻击具有很强的稳定性。</code></p><p>比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>存储型 XSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Try Me：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> val;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    input.addEventListener(<span class="string">'change'</span>, e =&gt; &#123;</span></span><br><span class="line">      val = e.target.value;</span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      fetch(<span class="string">'http://localhost:8000/save'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        method: <span class="string">'POST'</span>,</span></span><br><span class="line">        body: val</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>node</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userInput = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleReequest</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; req.url === <span class="string">'/save'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> body = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">      body += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (body) &#123;</span><br><span class="line">        userInput = body;</span><br><span class="line">      &#125;</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=UTF-8'</span> &#125;);</span><br><span class="line">    res.write(userInput);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">  handleReequest(req, res)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8000'</span>);</span><br></pre></td></tr></table></figure><h2 id="3-基于DOM"><a href="#3-基于DOM" class="headerlink" title="3. 基于DOM"></a>3. 基于DOM</h2><p>基于DOM或本地的XSS其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。<code>基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。</code></p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> val;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    input.addEventListener(<span class="string">'change'</span>, (e) =&gt; &#123;</span></span><br><span class="line">        val = e.target.value;</span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="xml">        div.innerHTML = `<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">$&#123;val&#125;</span>&gt;</span>Try Me~<span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结:</strong><br>XSS攻击的本质就是，利用一切手段在目标用户的浏览器中执行攻击脚本。</p><p><strong>防范:</strong><br>对于一切用户的输入、输出、客户端的输出内容视为不可信，在数据添加到DOM或者执行了DOM API的时候，我们需要对内容进行HtmlEncode或JavaScriptEncode，以预防XSS攻击。</p><p><strong><em>现在主流的浏览器内置了防范 XSS 的措施，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener">内容安全策略(CSP)</a>。但对于开发者来说，也应该寻找可靠的解决方案来防止 XSS 攻击。</em></strong></p><h1 id="二、CSRF"><a href="#二、CSRF" class="headerlink" title="二、CSRF"></a>二、CSRF</h1><blockquote><p>CSRF(Cross-site request forgery)跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。</p></blockquote><p>通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。</p><p>关于浏览器的Cookie策略请参考<a href="https://www.williamife.com/2019/03/04/%E4%BB%8EHTTP%E5%88%B0WEB%E7%BC%93%E5%AD%98/#%E5%85%AD%E3%80%81HTTP-Cookie">HTTP Cookie</a>。</p><p><br></p><h2 id="1-通过-Cookie-进行-CSRF-攻击"><a href="#1-通过-Cookie-进行-CSRF-攻击" class="headerlink" title="1. 通过 Cookie 进行 CSRF 攻击"></a>1. 通过 Cookie 进行 CSRF 攻击</h2><p>假设有一个BBS站点<code>http://www.a.com</code>:</p><ol><li><p>当用户登录之后，会设置如下 cookie：<br><code>res.setHeader(&#39;Set-Cookie&#39;, [&#39;user=william; expires=Fri, 23 Mar 2019 00:00:00 GMT;&#39;])</code></p></li><li><p>当登录后的用户发起 <code>http://www.a.com/delete?id=666666</code> 请求时，会删除 id 为 666666 的帖子。</p></li><li><p>CSRF攻击者准备的网站B：<code>&lt;img src=&quot;http://www.a.com/delete?id=666666&quot;&gt;</code></p></li><li><p>当登录用户访问攻击者的网站B时，会向 <code>www.a.com</code> 发起一个删除用户帖子的请求。此时若用户在切换到 <code>www.a.com</code> 的帖子页面刷新，会发现ID 为 666666 的帖子已经被删除。</p></li></ol><p>在站点没有做做任何 CSRF 防御的情况下，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><ul><li>登录受信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ul><p><br></p><h2 id="2-CSRF攻击的防范"><a href="#2-CSRF攻击的防范" class="headerlink" title="2. CSRF攻击的防范"></a>2. CSRF攻击的防范</h2><pre><code>1.验证 HTTP Referer 字段2.添加 Token 验证3.限制 Cookie4.验证码</code></pre><p><strong><em>尽管CSRF听起来像跨站脚本(XSS)，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行(因此对其进行防范的资源也相当稀少)和难以防范，所以被认为比XSS更具危险性。但往往同XSS一同作案!</em></strong></p><p><br></p><h1 id="三、URL跳转漏洞"><a href="#三、URL跳转漏洞" class="headerlink" title="三、URL跳转漏洞"></a>三、URL跳转漏洞</h1><blockquote><p>借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。</p></blockquote><p>  <img src="/img/images/http2.png" alt></p><p>当用户点击后,经过服务器或者浏览器解析后，将会跳到恶意的网站中。</p><pre><code>http://a.baidu.com/index?act=go&amp;url=http://evil.cn/http://b.baidu.com/safecheck.html?id=1&amp;url=http://evil.cn/http://c.baidu.com/f/user/passport?jumpUrl=http://evil.cn/</code></pre><h2 id="1-实现方式"><a href="#1-实现方式" class="headerlink" title="1. 实现方式"></a>1. 实现方式</h2><ul><li>META标签内跳转</li><li>Javascript跳转</li><li>Header头跳转</li></ul><p><strong><em>通过以GET或者POST的方式接收将要跳转的URL，然后通过上面的几种方式的其中一种来跳转到目标URL。一方面，由于用户的输入会进入Meta，javascript，http头所以都可能发生相应上下文的漏洞，如xss等等，但是同时，即使只是对于URL跳转本身功能方面就存在一个缺陷，因为会将用户浏览器从可信的站点导向到不可信的站点，同时如果跳转的时候带有敏感数据一样可能将敏感数据泄漏给不可信的第三方。</em></strong></p><h2 id="2-防御方案"><a href="#2-防御方案" class="headerlink" title="2. 防御方案"></a>2. 防御方案</h2><p><code>① referer的限制</code><br>如果确定传递URL参数进入的来源，我们可以通过该方式实现安全限制，保证该URL的有效性，避免恶意用户自己生成跳转链接</p><p><code>② 加入有效性验证Token</code><br>我们保证所有生成的链接都是来自于我们可信域的，通过在生成的链接里加入用户不可控的Token对生成的链接进行校验，可以避免用户生成自己的恶意链接从而被利用，但是如果功能本身要求比较开放，可能导致有一定的限制。</p><p><br></p><h1 id="四、ClickJacking"><a href="#四、ClickJacking" class="headerlink" title="四、ClickJacking"></a>四、ClickJacking</h1><blockquote><p>ClickJacking点击劫持，也叫UI覆盖攻击，攻击者会利用一个或多个透明或不透明的层来诱骗用户支持点击按钮的操作，而实际的点击确实用户看不到的一个按钮，从而达到在用户不知情的情况下实施攻击。</p></blockquote><h2 id="1-iframe覆盖"><a href="#1-iframe覆盖" class="headerlink" title="1. iframe覆盖"></a>1. iframe覆盖</h2><p>这种攻击方式的关键在于可以实现页中页的<code>&lt;iframe&gt;</code>标签，并且可以使用css样式表将他不可见。</p><p>防止点击劫持有两种主要方法：</p><ol><li><p>X-FRAME-OPTIONS<br>X-FRAME-OPTIONS是微软提出的一个http响应首部，指示浏览器不允许从其他域进行取景，专门用来防御利用iframe嵌套的点击劫持攻击。并且在IE8、Firefox3.6、Chrome4以上的版本均能很好的支持。<br><code>DENY</code> : 拒绝任何域加载<br><code>SAMEORIGIN</code> : 允许同源域下加载<br><code>ALLOW-FROM</code> : 可以定义允许frame加载的页面地址</p></li><li><p>顶层判断<br>在UI中采用防御性代码，以确保当前帧是最顶层的窗口,如:<br><code>top != self || top.location != self.location || top.location != location</code></p></li></ol><h2 id="2-图片覆盖"><a href="#2-图片覆盖" class="headerlink" title="2. 图片覆盖"></a>2. 图片覆盖</h2><p>图片覆盖攻击（Cross Site Image Overlaying），攻击者使用一张或多张图片，利用图片的style或者能够控制的CSS，将图片覆盖在网页上，形成点击劫持。当然图片本身所带的信息可能就带有欺骗的含义，这样不需要用户点击，也能达到欺骗的目的。</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.a.com/delete?id=666666"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~~~"</span> <span class="attr">style</span>=<span class="string">"~~~"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决方案: 在防御图片覆盖攻击时，需要检查用户提交的HTML代码中，img标签的style属性是否可能导致浮出。</p><p><br></p><h1 id="五、SQL-Injection"><a href="#五、SQL-Injection" class="headerlink" title="五、SQL Injection"></a>五、SQL Injection</h1><blockquote><p>SQL 注入漏洞（SQL Injection）是 Web 开发中最常见的一种安全漏洞。可以用它来从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限。</p></blockquote><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><p>SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p><p>根据相关技术原理，SQL注入可以分为平台层注入和代码层注入。前者由不安全的数据库配置或数据库平台的漏洞所致；后者主要是由于程序员对输入未进行细致地过滤，从而执行了非法的数据查询。基于此，SQL注入的产生原因通常表现在以下几方面：</p><p>① 不当的类型处理；<br>② 不安全的数据库配置；<br>③ 不合理的查询集处理；<br>④ 不当的错误处理；<br>⑤ 转义字符处理不合适；<br>⑥ 多个提交处理不当。</p><h2 id="2-攻击"><a href="#2-攻击" class="headerlink" title="2. 攻击"></a>2. 攻击</h2><p>当应用程序使用输入内容来构造动态sql语句以访问数据库时，会发生sql注入攻击。如果代码使用存储过程，而这些存储过程作为包含未筛选的用户输入的字符串来传递，也会发生sql注入。sql注入可能导致攻击者使用应用程序登陆在数据库中执行命令。相关的SQL注入可以通过测试工具pangolin进行。</p><h2 id="3-防护"><a href="#3-防护" class="headerlink" title="3. 防护"></a>3. 防护</h2><p>① 永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和双”-“进行转换等。<br>② 永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。<br>③ 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。<br>④ 不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。<br>⑤ 应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装<br>⑥ sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。</p><p><br></p><h1 id="六、OS命令注入"><a href="#六、OS命令注入" class="headerlink" title="六、OS命令注入"></a>六、OS命令注入</h1><blockquote><p>OS 注入攻击是指程序提供了直接执行 Shell 命令的函数的场景，当攻击者不合理使用，且开发者对用户参数未考虑安全因素的话，就会执行恶意的命令调用，被攻击者利用。</p></blockquote><p>OS 命令注入其实原理和 SQL 注入是类似的，只是场景不一样而已。<br>在 Node.js 中可以使用 <code>exec()</code> 执行命令通过传入一段字符串命令，并把一个错误或命令处理结果回传至回调函数中。</p><h2 id="1-exec"><a href="#1-exec" class="headerlink" title="1. exec"></a>1. exec</h2><figure class="highlight js"><figcaption><span>node</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userInput = <span class="string">"user input"</span>;</span><br><span class="line">child_process.exec(<span class="string">'ls -l '</span> + userInput, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>攻击者可以使用一个分号”;”来结束命令，并开始一个新的调用，他们可以使用反引号或$()来运行子命令。还有很多潜在的滥用。</p><p><strong>在child_process.exec引擎下，将调用执行”/bin/sh”。而不是目标程序。已发送的命令只是被传递给一个新的”/bin/ sh’进程来执行shell。 child_process.exec的名字有一定误导性 - 这是一个bash的解释器，而不是启动一个程序。这意味着，如果直接执行用户输入的参数，所有的shell字符可能会产生毁灭性的后果。</strong></p><h2 id="2-execFile-spawn"><a href="#2-execFile-spawn" class="headerlink" title="2. execFile/spawn"></a>2. execFile/spawn</h2><p>在 Node.js 中除了 exec() 之外，还有 execFile() 和 spawn() 两个方法也可以用来执行系统命令。它们和 exec() 的区别是后者是直接将一个命令字符串传给 /bin/sh 执行，而前者是提供了一个数组作为参数容器，最后参数会被直接传到 C 的命令执行方法 execve() 中，不容易执行额外的参数。</p><figure class="highlight js"><figcaption><span>child_process.execFile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="string">"user input"</span>;</span><br><span class="line">child_process.execFile(<span class="string">'/bin/ls'</span>, [<span class="string">'-l'</span>, path], (err, result) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>child_process.spawn</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> path = <span class="string">"user input"</span>;</span><br><span class="line"><span class="keyword">let</span> ls = child_process.spawn(<span class="string">'/bin/ls'</span>, [<span class="string">'-l'</span>, path])</span><br><span class="line">ls.stdout.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>注意：</code>使用spawn或execFile并不总是安全的。例如，运行 /bin/find，并传入用户输入参数仍有可能导致系统被攻陷。 find命令有一些选项，允许读/写任意文件。</p><ul><li>避免使用child_process.exec，当需要包含用户输入的参数时更是如此，请牢记。</li><li>尽量避免让用户传入参数，使用选择项比让用户直接输入字符串要好得多。</li><li>必须允许用户输入参数的情况下，请广泛参考该命令的参数，确定哪些选项是安全的，并建立一个白名单。</li></ul><p><br></p><p>参考文章：</p><ul><li><a href="https://segmentfault.com/a/1190000018073845" target="_blank" rel="noopener">常见六大Web安全攻防解析</a></li><li><a href="https://blog.csdn.net/ghostxbh/article/details/82142095" target="_blank" rel="noopener">Web安全的三个攻防姿势</a></li><li><a href="http://blog.nsfocus.net/offensive-defensive-stances-web-security/" target="_blank" rel="noopener">关于Web安全的三个攻防姿势</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;关于Web安全的问题，是一个老生常谈的问题，作为离用户最近的一层，我们大前端应该把手伸的更远一点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们最常见的Web安全攻击有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;XSS&lt;/code&gt; 跨站脚本攻击&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Web安全" scheme="https://www.williamife.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>解决跨域的N种方法</title>
    <link href="https://www.williamife.com/2019/03/11/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://www.williamife.com/2019/03/11/解决跨域的N种方法/</id>
    <published>2019-03-11T02:40:00.000Z</published>
    <updated>2020-08-11T09:06:36.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是同源策略"><a href="#一、什么是同源策略" class="headerlink" title="一、什么是同源策略"></a>一、什么是同源策略</h1><p>同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p><p>当协议、域名、端口号，有一个或多个不同时，有希望可以访问并获取数据的现象称为跨域访问，同源策略限制下 <code>cookie</code>、<code>localStorage</code>、<code>dom</code>、<code>ajax</code>、<code>IndexDB</code> 都是不支持跨域的。</p><p>但是有三个标签是允许跨域加载资源：</p><ol><li><code>&lt;img src=XXX&gt;</code></li><li><code>&lt;link href=XXX&gt;</code></li><li><code>&lt;script src=XXX&gt;</code></li></ol><pre>URL                               说明                是否允许通信http://www.a.com/a.jshttp://www.a.com/b.js             同一域名下           允许http://www.a.com:8000/a.jshttp://www.a.com/b.js             同一域名，不同端口    不允许http://www.a.com/a.jshttps://www.a.com/b.js            同一域名，不同协议    不允许http://www.a.com/a.jshttp://a.com/b.js                 主域相同，子域不同    不允许http://www.b.com/a.jshttp://www.a.com/b.js             不同域名            不允许</pre><p><br></p><h1 id="二、CORS"><a href="#二、CORS" class="headerlink" title="二、CORS"></a>二、CORS</h1><blockquote><p>CORS是一个W3C标准，全称是<code>跨域资源共享</code>（Cross-Origin Resource Sharing）。它允许浏览器向跨源服务器，发出<code>XMLHttpRequest</code>请求，从而克服了AJAX只能同源使用的限制。</p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。<br><em>(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS。)</em></p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br><em>(因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。)</em></p><h2 id="2-请求分类"><a href="#2-请求分类" class="headerlink" title="2. 请求分类"></a>2. 请求分类</h2><ul><li><code>简单请求</code>（simple request） 请求方式为HEAD、POST 或者 GET<br>http头信息不超出一下字段：Accept、Accept-Language 、 Content-Language、 Last-Event-ID、 Content-Type(限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain)</li><li><code>非简单请求</code>（not-so-simple request） 凡是不满足上述条件，就属于非简单请求。<br>比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</li></ul><h2 id="3-简单请求"><a href="#3-简单请求" class="headerlink" title="3. 简单请求"></a>3. 简单请求</h2><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。</p><pre><code>GET /cors HTTP/1.1Origin: http://api.bob.comHost: api.alice.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...</code></pre><p>Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。<br>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。<br>浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。<br><strong><em>注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。<br>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</em></strong></p><pre><code>Access-Control-Allow-Origin: http://api.bob.comAccess-Control-Allow-Credentials: trueAccess-Control-Expose-Headers: FooBarContent-Type: text/html; charset=utf-8</code></pre><p>上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头</p><p><code>Access-Control-Allow-Origin:</code>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求<br><code>Access-Control-Allow-Credentials:</code> 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。<br><code>Access-Control-Expose-Headers:</code>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</p><h3 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h3><p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。</p><p>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.domain.com:8080/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.send(<span class="string">'user=admin'</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p><p><strong><em>需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</em></strong></p><h2 id="4-非简单请求"><a href="#4-非简单请求" class="headerlink" title="4. 非简单请求"></a>4. 非简单请求</h2><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求<code>preflight</code></p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p><pre><code>let url = &apos;http://api.alice.com/cors&apos;;let xhr = new XMLHttpRequest();xhr.open(&apos;PUT&apos;, url, true);xhr.setRequestHeader(&apos;X-Custom-Header&apos;, &apos;value&apos;);xhr.send();</code></pre><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p><pre><code>OPTIONS /cors HTTP/1.1Origin: http://api.bob.comAccess-Control-Request-Method: PUTAccess-Control-Request-Headers: X-Custom-HeaderHost: api.alice.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...</code></pre><p>“预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p><p>除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p><ul><li><code>Access-Control-Request-Method：</code>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</li><li><code>Access-Control-Request-Headers：</code>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header</li></ul><h3 id="预检请求的回应"><a href="#预检请求的回应" class="headerlink" title="预检请求的回应"></a>预检请求的回应</h3><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p><pre><code>HTTP/1.1 200 OKDate: Mon, 01 Dec 2008 01:15:39 GMTServer: Apache/2.0.61 (Unix)Access-Control-Allow-Origin: http://api.bob.comAccess-Control-Allow-Methods: GET, POST, PUTAccess-Control-Allow-Headers: X-Custom-HeaderContent-Type: text/html; charset=utf-8Content-Encoding: gzipContent-Length: 0Keep-Alive: timeout=2, max=100Connection: Keep-AliveContent-Type: text/plain</code></pre><p>上面的HTTP回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示api.bob.com可以请求数据。 该字段也可以设为星号，表示同意任意跨源请求。<br>如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p><p>服务器回应的其他CORS相关字段如下：</p><pre><code>Access-Control-Allow-Methods: GET, POST, PUTAccess-Control-Allow-Headers: X-Custom-HeaderAccess-Control-Allow-Credentials: trueAccess-Control-Max-Age: 1728000</code></pre><p><code>Access-Control-Allow-Methods：</code>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。<br><code>Access-Control-Allow-Headers：</code>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。<br><code>Access-Control-Allow-Credentials：</code>该字段与简单请求时的含义相同。<br><code>Access-Control-Max-Age：</code>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><p>浏览器正常请求回应<br>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p><pre><code>PUT /cors HTTP/1.1Origin: http://api.bob.comHost: api.alice.comX-Custom-Header: valueAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...</code></pre><p>浏览器的正常CORS请求。上面头信息的Origin字段是浏览器自动添加的。下面是服务器正常的回应。</p><pre><code>Access-Control-Allow-Origin: http://api.bob.comContent-Type: text/html; charset=utf-8</code></pre><h2 id="5-与JSONP的比较"><a href="#5-与JSONP的比较" class="headerlink" title="5. 与JSONP的比较"></a>5. 与JSONP的比较</h2><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。<br>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p><p><br></p><h1 id="三、WebSocket"><a href="#三、WebSocket" class="headerlink" title="三、WebSocket"></a>三、WebSocket</h1><blockquote><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。</p></blockquote><p>WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>  <img src="/img/images/http1.png" alt></p><p>我们推荐使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Try Me：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 webSocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 连接上触发</span></span></span><br><span class="line"><span class="javascript">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      socket.send(<span class="string">'Hello World!'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    socket.onconnect = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监听服务端消息</span></span></span><br><span class="line"><span class="javascript">      socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 监听服务端关闭</span></span></span><br><span class="line"><span class="javascript">    socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Server socket has closed.'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      socket.send(<span class="keyword">this</span>.value);</span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>Node.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> socket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> content = fs.readFileSync(<span class="string">'./html.html'</span>);</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-type'</span>: <span class="string">'text/html'</span> &#125;);</span><br><span class="line">  res.write(content);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8000'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8000...'</span>);</span><br><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> socket.Server(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接收信息</span></span><br><span class="line">  client.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    client.send(<span class="string">'我接收到了：'</span> + msg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data from client: ---&gt; '</span> + msg);</span><br><span class="line">    <span class="keyword">if</span> (msg === <span class="string">'666'</span>) &#123;</span><br><span class="line">      client.send(<span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 断开处理</span></span><br><span class="line">  client.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Client socket has closed.'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</strong></p><pre><code>GET / HTTP/1.1Upgrade: websocketConnection: UpgradeHost: example.comOrigin: http://example.comSec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==Sec-WebSocket-Version: 13</code></pre><p><strong><em>上面代码中，有一个字段是Origin，表示该请求的请求源（origin），即发自哪个域名。</em></strong></p><p>正是因为有了Origin这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。</p><pre><code>HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</code></pre><table><thead><tr><th style="text-align:left">首部字段名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Connection</td><td style="text-align:left">必须设置 Upgrade，表示客户端希望连接升级。</td></tr><tr><td style="text-align:left">Upgrade</td><td style="text-align:left">必须设置 Websocket，表示希望升级到 Websocket 协议。</td></tr><tr><td style="text-align:left">Sec-WebSocket-Key</td><td style="text-align:left">是随机的字符串，服务器端会用这些数据来构造出一个 SHA-1 的信息摘要。</td></tr><tr><td style="text-align:left">Sec-WebSocket-Version</td><td style="text-align:left">表示支持的 Websocket 版本。RFC6455 要求使用的版本是 13，之前草案的版本均应当弃用。</td></tr><tr><td style="text-align:left">Sec-WebSocket-Accept</td><td style="text-align:left">由Sec-WebSocket-Key进行BASE-64编码返回。</td></tr><tr><td style="text-align:left">Sec-WebSocket-Extensions</td><td style="text-align:left">协议扩展。</td></tr></tbody></table><p><br></p><h1 id="四、postMessage"><a href="#四、postMessage" class="headerlink" title="四、postMessage"></a>四、postMessage</h1><blockquote><p><code>window.postMessage(message，targetOrigin)</code>方法是 HTML5 新引进的特性，可以使用它来向其它的 window 对象发送消息，无论这个 window 对象是属于同源或不同源。</p></blockquote><p>调用 postMessage 方法的 window 对象是指要接收消息的那一个 window 对象，该方法的第一个参数 <code>message</code> 为要发送的消息，类型只能为字符串；第二个参数 <code>targetOrigin</code> 用来限定接收消息的那个 window 对象所在的域，如果不想限定域，可以使用通配符 *。</p><p>页面<code>https://www.williamife.com/a.html</code>的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://williamife.com/b.html"</span> <span class="attr">id</span>=<span class="string">"myIframe"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">onload</span>=<span class="string">"test()"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1. iframe载入 "https://williamife.com/b.html"页面后会执行该函数</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 获取 https://williamife.com/b.html 页面的 window 对象，</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'myIframe'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> win = iframe.contentWindow;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 然后通过 postMessage 向 https://williamife.com/b.html 页面发送消息</span></span></span><br><span class="line"><span class="javascript">    win.postMessage(<span class="string">'我是来自https://www.williamife.com/a.html页面的消息'</span>, <span class="string">'*'</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面 <code>https://williamife.com/b.html</code> 的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// 注册 message 事件用来接收消息</span></span><br><span class="line">    <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e = e || event; <span class="comment">// 获取事件对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(e.data); <span class="comment">// 通过 data 属性得到发送来的消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、JSONP"><a href="#五、JSONP" class="headerlink" title="五、JSONP"></a>五、JSONP</h1><blockquote><p>由于 script 标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以通过动态创建 script 标签，然后利用 src 属性进行跨域，这也就是 JSONP 跨域的基本原理。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义一个 回调函数 handleResponse 用来接收返回的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse</span></span><br><span class="line"><span class="keyword">let</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.gerElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">'https://www.williamife.cn/json?callback=handleResponse'</span>;</span><br><span class="line">body.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过 script请求 `https://www.williamife.cn/json?callback=handleResponse`，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 后端能够识别这样的 URL 格式并处理该请求，</span></span><br><span class="line"><span class="comment">//    然后返回 handleResponse(&#123;"name": "william"&#125;) 给浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 浏览器在接收到 handleResponse(&#123;"name": "william"&#125;) 之后立即执行 ，</span></span><br><span class="line"><span class="comment">//    也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了。</span></span><br></pre></td></tr></table></figure><p>JSONP只能发GET请求，因为本质上script加载资源就是GET，那么如果要发POST请求怎么办呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> requestPost = <span class="function">(<span class="params">&#123;url, data&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 首先创建一个用来发送数据的iframe.</span></span><br><span class="line">  <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span><br><span class="line">  iframe.name = <span class="string">'iframePost'</span></span><br><span class="line">  iframe.style.display = <span class="string">'none'</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe)</span><br><span class="line">  <span class="keyword">const</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>)</span><br><span class="line">  <span class="keyword">const</span> node = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>)</span><br><span class="line">  <span class="comment">// 注册iframe的load事件处理程序,如果你需要在响应返回时执行一些操作的话.</span></span><br><span class="line">  iframe.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'post success'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  form.action = url</span><br><span class="line">  <span class="comment">// 在指定的iframe中执行form</span></span><br><span class="line">  form.target = iframe.name</span><br><span class="line">  form.method = <span class="string">'post'</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> data) &#123;</span><br><span class="line">    node.name = name</span><br><span class="line">    node.value = data[name].toString()</span><br><span class="line">    form.appendChild(node.cloneNode())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 表单元素需要添加到主文档中.</span></span><br><span class="line">  form.style.display = <span class="string">'none'</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(form)</span><br><span class="line">  form.submit()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表单提交后,就可以删除这个表单,不影响下次的数据发送.</span></span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(form)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">requestPost(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:8080/api/iframePost'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">'helloIframePost'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>自己实现一个JSONP</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonp = <span class="function"><span class="keyword">function</span>(<span class="params">url,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理url地址,查找？，如果没有？这个变量就有一个"?"，有？这个变量接收一个&amp;</span></span><br><span class="line">    <span class="keyword">let</span> dataString = url.indexOf(<span class="string">'-1'</span>) === <span class="number">-1</span>? <span class="string">'?'</span> : <span class="string">'&amp;'</span></span><br><span class="line">    <span class="comment">// 处理回调函数名</span></span><br><span class="line">    <span class="keyword">let</span> callbackName = <span class="string">`jsonpCB_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span></span><br><span class="line">    url += <span class="string">`<span class="subst">$&#123;dataString&#125;</span>callback=<span class="subst">$&#123;callbackName&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数&#123;xx:xx&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">      url += <span class="string">`&amp;<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;data[k]&#125;</span>`</span> <span class="comment">//?k=data[k]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建script标签</span></span><br><span class="line">    <span class="keyword">let</span> jsNode = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    jsNode.src = url</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发callback，触发后删除js标签和绑定在window上的callback</span></span><br><span class="line">    <span class="built_in">window</span>[callbackName] = <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[callbackName]</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(jsNode)</span><br><span class="line">      result ? resolve(result) : reject(<span class="string">'错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// js加载异常的情况</span></span><br><span class="line">    jsNode.addEventListener(<span class="string">'error'</span>,() =&gt;&#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[callbackName]</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(jsNode)</span><br><span class="line">      reject(<span class="string">'错误'</span>)</span><br><span class="line">    &#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加js节点到document上时，开始请求</span></span><br><span class="line">    <span class="built_in">document</span>.appendChild(jsNode)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonp(<span class="string">'http://192.168.0.1:8080/jsonp'</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">'2'</span>&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(result) &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="built_in">console</span>.error(err) &#125;)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="六、window-name"><a href="#六、window-name" class="headerlink" title="六、window.name"></a>六、window.name</h1><blockquote><p>浏览器窗口有window.name属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右</span></span><br><span class="line"><span class="comment">// 数据格式可以自定义，如json、字符串</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">"这是a页面的内容"</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href= b.html;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.name);  <span class="comment">//"这是a页面的内容"</span></span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>有时候我们的需求是在a页面内，获得ccc上的数据，并且页面不能进行刷新。</p><p>对于这种需求，我们不能通过window.location.href更新页面来获得数据，我们可以用一个隐藏的iframe作为中间的代理，iframe的src为<code>https://xxx.ccc.com/xxx</code>，在iframe页面加载完毕的时候，我们再让iframe与当前页面属于同一个域下，我们就可以拿到window.name了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> boo = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"><span class="keyword">let</span> loadData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (boo) &#123;</span><br><span class="line">        <span class="comment">//获取window.name</span></span><br><span class="line">        <span class="keyword">let</span> data = iframe.contentWindow.name;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="comment">//销毁数据</span></span><br><span class="line">        iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boo = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 设置的代理文件,iframe重新载入</span></span><br><span class="line">        iframe.contentWindow.location = <span class="string">"b.html"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line">iframe.src = <span class="string">'https://xxx.ccc.com/xxx'</span>;</span><br><span class="line"><span class="keyword">if</span> (iframe.attachEvent) &#123;</span><br><span class="line">    iframe.attachEvent(<span class="string">'onload'</span>, loadData);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    iframe.onload  = loadData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>优点: window.name容量很大，可以放置非常长的字符串；<br>缺点: 必须监听子窗口window.name属性的变化，影响网页性能。</p><p><br></p><h1 id="七、location-hash"><a href="#七、location-hash" class="headerlink" title="七、location.hash"></a>七、location.hash</h1><blockquote><p>与 window.name 跨域的情况相同，是不同域的页面间的参数传递，需要借助 iframe 标签，A 页面和 B 页面是同域的 ，C 页面是独立的域。</p></blockquote><figure class="highlight html"><figcaption><span>HTML A</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://www.williamife/a.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://www.c.html#123"</span> <span class="attr">id</span>=<span class="string">"frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 使用 hashchange 事件接收来自 B 页面设置给 A 页面的 hash 值</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>HTML C</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 A 页面引入 C 页面设置的 hash 值</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash);</span><br><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">iframe.src = <span class="string">'https://www.williamife/b.html#456'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>HTML B</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 C 页面引入 B 页面设置的 hash 值设置给 A页面</span></span><br><span class="line"><span class="built_in">window</span>.parent.parent.location.hash = location.hash;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="八、document-domain"><a href="#八、document-domain" class="headerlink" title="八、document.domain"></a>八、document.domain</h1><blockquote><p>这种跨域的方式最主要的是要求主域名相同。</p></blockquote><p>页面<code>https://www.williamife.com/a.html</code>的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://williamife.com/b.html"</span> <span class="attr">id</span>=<span class="string">"myIframe"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">onload</span>=<span class="string">"test()"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'williamife.com'</span>;<span class="comment">//设置成主域</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//contentWindow 可取得子窗口的 window 对象</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>).contentWindow);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面 <code>https://williamife.com/b.html</code> 的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="comment">//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同</span></span><br><span class="line">  <span class="built_in">document</span>.domain = <span class="string">'williamife.com'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="九、图像-Ping"><a href="#九、图像-Ping" class="headerlink" title="九、图像 Ping"></a>九、图像 Ping</h1><blockquote><p>由于 img 标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以通过 img 标签的 src 属性进行跨域，这也就是图像 Ping 跨域的基本原理。</p></blockquote><p>直接通过下面的例子来说明图像 Ping 实现跨域的流程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="comment">// 通过 onload 及 onerror 事件可以知道响应是什么时候接收到的，但是不能获取响应文本</span></span><br><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求数据通过查询字符串形式发送</span></span><br><span class="line">img.src = <span class="string">'https://www.williamife.com/getinfo?name=william'</span>;</span><br></pre></td></tr></table></figure><p>优点:<br>用于实现跟踪用户点击页面或动态广告曝光次数有较大的优势。</p><p>缺点:<br>只支持 GET 请求。<br>只能浏览器与服务器的单向通信，因为浏览器不能访问服务器的响应文本。</p><p><br></p><h1 id="十、其它方案"><a href="#十、其它方案" class="headerlink" title="十、其它方案"></a>十、其它方案</h1><h2 id="1-WebServer-nginx"><a href="#1-WebServer-nginx" class="headerlink" title="1. WebServer: nginx"></a>1. WebServer: nginx</h2><figure class="highlight nginx"><figcaption><span>Nginx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="comment"># 监听9099端口</span></span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">9099</span>;</span><br><span class="line">    <span class="comment"># 域名是localhost</span></span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="comment">#凡是localhost:9099/api这个样子的，</span></span><br><span class="line">    <span class="comment">#都转发到真正的服务端地址https://www.williamife.com</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /api &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://www.williamife.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的时候直接用回前端这边的域名http://localhost:9099，这就不会跨域，</span></span><br><span class="line"><span class="comment">// 然后Nginx监听到凡是localhost:9099/api这个样子的，</span></span><br><span class="line"><span class="comment">// 都转发到真正的服务端地址https://www.williamife.com</span></span><br><span class="line">fetch( <span class="string">'http://localhost:9099/api/iframePost'</span> , &#123;</span><br><span class="line">  method: <span class="string">'POST'</span> ,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    msg: <span class="string">'helloIframePost'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-Node中间件-http-proxy-middleware"><a href="#2-Node中间件-http-proxy-middleware" class="headerlink" title="2. Node中间件: http-proxy-middleware"></a>2. Node中间件: http-proxy-middleware</h2><figure class="highlight js"><figcaption><span>node + webpack + webpack-dev-serve</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;&#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;&#125;,</span><br><span class="line">  ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://xxxxxxxx:8000'</span>, <span class="comment">// 代理服务器路径</span></span><br><span class="line">        pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">'/'</span>&#125;, <span class="comment">// 重写路径</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-canvas-getImageData-toDataURL"><a href="#3-canvas-getImageData-toDataURL" class="headerlink" title="3. canvas: getImageData,toDataURL"></a>3. canvas: getImageData,toDataURL</h2><p><a href="https://www.zhangxinxu.com/wordpress/2018/02/crossorigin-canvas-getimagedata-cors/&#39;" target="_blank" rel="noopener">可移步至张鑫旭的文章查看</a></p><p><br></p><p>参考文章：</p><ul><li><a href="https://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">HTML5 WebSocket</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">WebSocket 教程</a></li><li><a href="https://www.jianshu.com/u/eb87feba8a52" target="_blank" rel="noopener">JS跨域</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN Web Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、什么是同源策略&quot;&gt;&lt;a href=&quot;#一、什么是同源策略&quot; class=&quot;headerlink&quot; title=&quot;一、什么是同源策略&quot;&gt;&lt;/a&gt;一、什么是同源策略&lt;/h1&gt;&lt;p&gt;同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
      <category term="HTTP" scheme="https://www.williamife.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>从HTTP到WEB缓存</title>
    <link href="https://www.williamife.com/2019/03/04/%E4%BB%8EHTTP%E5%88%B0WEB%E7%BC%93%E5%AD%98/"/>
    <id>https://www.williamife.com/2019/03/04/从HTTP到WEB缓存/</id>
    <published>2019-03-04T00:00:00.000Z</published>
    <updated>2019-07-10T05:43:49.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、HTTP-概述"><a href="#一、HTTP-概述" class="headerlink" title="一、HTTP 概述"></a>一、HTTP 概述</h1><blockquote><p>HTTP是基于客户端/服务端（C/S）的架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。</p></blockquote><p>HTTP是一种能够获取如 HTML 这样的网络资源的 protocol(通讯协议)。它是在 Web 上进行数据交换的基础，是一种 client-server 协议，也就是说，请求通常是由像浏览器这样的接受方发起的。</p><p>客户端和服务端通过交换各自的消息（与数据流正好相反）进行交互。由像浏览器这样的客户端发出的消息叫做 requests，被服务端响应的消息叫做 responses。</p><h2 id="1-基本性质"><a href="#1-基本性质" class="headerlink" title="1. 基本性质"></a>1. 基本性质</h2><ul><li><code>HTTP是无连接的：</code><br>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。HTTP并不需要其底层的传输层协议是面向连接的，只需要它是可靠的，或不丢失消息的（至少返回错误）。</li><li><code>HTTP是可扩展的：</code><br>在 HTTP/1.0 中出现的 HTTP headers 让协议扩展变得非常容易。只要服务端和客户端就新 headers 达成语义一致，新功能就可以被轻松加入进来。</li><li><code>HTTP是无状态：</code><br>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>使用Cookies可以创建有状态的会话。</li></ul><h2 id="2-HTTP-消息结构"><a href="#2-HTTP-消息结构" class="headerlink" title="2. HTTP 消息结构"></a>2. HTTP 消息结构</h2><h3 id="1-请求报文"><a href="#1-请求报文" class="headerlink" title="1. 请求报文"></a>1. 请求报文</h3><pre><code>HTTP请求报文由：请求行、请求头部、空行和请求数据四个部分组成。</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/images/http3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="2-响应报文"><a href="#2-响应报文" class="headerlink" title="2. 响应报文"></a>2. 响应报文</h3><pre><code>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/images/http4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h1 id="二、HTTP-请求方法"><a href="#二、HTTP-请求方法" class="headerlink" title="二、HTTP 请求方法"></a>二、HTTP 请求方法</h1><blockquote><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p></blockquote><p>HTTP1.0定义了三种请求方法：<code>GET</code>, <code>POST</code> , <code>HEAD</code>方法。</p><p>HTTP1.1新增了五种请求方法：<code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code> , <code>CONNECT</code> 方法。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">GET</td><td style="text-align:left">请求获取Request-URI所标识的资源。</td></tr><tr><td style="text-align:left">HEAD</td><td style="text-align:left">类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头。</td></tr><tr><td style="text-align:left">POST</td><td style="text-align:left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td style="text-align:left">PUT</td><td style="text-align:left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td style="text-align:left">DELETE</td><td style="text-align:left">请求服务器删除 Request-URI 所标识的资源。</td></tr><tr><td style="text-align:left">CONNECT</td><td style="text-align:left">HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器，主要使用SSL和TLS将数据加密后通过网络隧道进行传输。</td></tr><tr><td style="text-align:left">OPTIONS</td><td style="text-align:left">使服务器传回该资源所支持的所有HTTP请求方法。用 * 来代替资源名称，向 Web 服务器发送 OPTIONS 请求，可以测试服务器功能是否正常运作。</td></tr><tr><td style="text-align:left">TRACE</td><td style="text-align:left">回显服务器收到的请求，主要用于测试或诊断。</td></tr></tbody></table><p>其中，最常见的是 GET 和 POST 方法，如果是 <code>RESful</code> 接口的话一般会用到 PUT、DELETE、GET、POST（分别对应增删查改）</p><h1 id="三、HTTP-首部"><a href="#三、HTTP-首部" class="headerlink" title="三、HTTP 首部"></a>三、HTTP 首部</h1><p>主要分为通用首部、请求首部、响应首部和实体首部四种：</p><ul><li>通用首部字段：既可以出现在请求报文中，也可以出现在响应报文中，它提供了与报文相关的最基本的信息；</li><li>请求首部字段：从客户端向服务器发送请求报文时使用的首部字段，补充了请求的附加内容，客户端信息，响应内容相关优先级等信息；</li><li>响应首部字段：从服务器向客户端返回响应报文时使用的首部字段；补充了响应的附加内容，也会要求客户端附加额外的内容信息；</li><li>实体首部字段：针对请求报文和响应报文的实体部分使用的首部，补充了资源内容的更新时间等与实体有关的信息。</li><li>其他报文字段：这些字段不是HTTP协议中定义的，但被广泛应用于HTTP请求中。</li></ul><h2 id="1-通用首部字段"><a href="#1-通用首部字段" class="headerlink" title="1. 通用首部字段"></a>1. 通用首部字段</h2><table><thead><tr><th style="text-align:left">首部字段名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Cache-Control</td><td style="text-align:left">控制缓存行为。</td></tr><tr><td style="text-align:left">Connection</td><td style="text-align:left">管理持久连接，设置其值为Keep-Alive可实现长连接。</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">创建HTTP报文的日期和时间。</td></tr><tr><td style="text-align:left">Pragma</td><td style="text-align:left">Http/1.1之前的历史遗留字段，仅作为HTTP/1.0向后兼容而定义，虽然是通用字段，当通常被使用在客户单的请求中，如Pragma: no-cache, 表示客户端在请求过程中不循序服务端返回缓存的数据。</td></tr><tr><td style="text-align:left">Trailer</td><td style="text-align:left">报文尾部的首部。</td></tr><tr><td style="text-align:left">Transfer-Encoding</td><td style="text-align:left">规定了传输报文主题时使用的传输编码，如Transfer-Encoding: chunked。</td></tr><tr><td style="text-align:left">Upgrade</td><td style="text-align:left">用于检查HTTP协议或其他协议是否有可使用的更高版本。</td></tr><tr><td style="text-align:left">Via</td><td style="text-align:left">追踪客户端和服务端之间的报文的传输路径，还可避免会环的发生，所以在经过代理时必须添加此字段。</td></tr><tr><td style="text-align:left">Warning</td><td style="text-align:left">Http/1.1的报文字段，从Http/1.0的AfterRetry演变而来，用来告知用户一些与缓存相关的警告信息。</td></tr></tbody></table><h2 id="2-请求首部字段"><a href="#2-请求首部字段" class="headerlink" title="2. 请求首部字段"></a>2. 请求首部字段</h2><table><thead><tr><th style="text-align:left">首部字段名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Accept</td><td style="text-align:left">客户端能够处理的媒体类型</td></tr><tr><td style="text-align:left">Accept-Charset</td><td style="text-align:left">表示客户端支持的字符集。例如：Accept-Charset: GB2312, ISO-8859-1</td></tr><tr><td style="text-align:left">Accept-Encoding</td><td style="text-align:left">表示客户端支持的内容编码格式。如：Accept-Encoding：gzip</td></tr><tr><td style="text-align:left">Accept-Language</td><td style="text-align:left">表示客户端支持的语言。如：Accept-Language: zh-cn, en</td></tr><tr><td style="text-align:left">Authorization</td><td style="text-align:left">表示客户端的认证信息。客户端在访问需要认证的也是时，服务器会返回401，随后客户端将认证信息加在Authorization字段中发送到服务器后，如果认证成功，则返回200</td></tr><tr><td style="text-align:left">Host</td><td style="text-align:left">表示访问资源所在的主机名，即URL中的域名部分。如：m.baidu.com</td></tr><tr><td style="text-align:left">If-Match</td><td style="text-align:left">If-Match的值与所请求资源的ETag值（实体标记，与资源相关联。资源变化，实体标记跟着变化）一致时，服务器才处理此请求</td></tr><tr><td style="text-align:left">If-Modified-Since</td><td style="text-align:left">用于确认客户端拥有的本地资源的时效性</td></tr><tr><td style="text-align:left">If-None-Match</td><td style="text-align:left">If-Match的值与所请求资源的ETag值不一致时服务器才处理此请求</td></tr><tr><td style="text-align:left">If-Range</td><td style="text-align:left">If-Range的值（ETag值或时间）与所访问资源的ETag值或时间相一致时，服务器处理此请求，并返回Range字段中设置的指定范围的数据。如果不一致，则返回所有内容。If-Range其实算是If-Match的升级版，因为它的值不匹配时，依然能够返回数据，而If-Match不匹配时，请求不会被处理，需要数据时需再次进行请求</td></tr><tr><td style="text-align:left">If-Unmodified-Since</td><td style="text-align:left">与If-Modified-Since相反，表示请求的资源在指定的时间之后未发生变化时，才处理请求，否则返回412</td></tr><tr><td style="text-align:left">Max-Forwards</td><td style="text-align:left">表示请求可经过的服务器的最大数目，请求每被转发一次，Max-Forwards减1，当Max-Forwards为0时，所在的服务器将不再转发，而是直接做出应答。通过此字段可定位通信问题</td></tr><tr><td style="text-align:left">Proxy-Authorization</td><td style="text-align:left">当客户端接收到来自代理服务器的认证质询时，客户端会将认证信息添加到Proxy-Authorization来完成认证。与Authorization类似，只不过Authorization是发生在客户端与服务端之间</td></tr><tr><td style="text-align:left">Range</td><td style="text-align:left">获取部分资源，例如：Range: bytes=500-1000表示获取指定资源的第500到1000字节之间的内容，如果服务器能够正确处理，则返回206作为应答，表示返回了部分数据，如果不能处理这种范围请求，则以200作为应答，返回完整的数据</td></tr><tr><td style="text-align:left">Referer</td><td style="text-align:left">告知服务器请求是从哪个页面发起的</td></tr><tr><td style="text-align:left">User-Agent</td><td style="text-align:left">将发起请求的浏览器和代理名称等信息发送给服务端</td></tr><tr><td style="text-align:left">Cookie</td><td style="text-align:left">在请求时添加Cookie, 以实现HTTP的状态记录</td></tr></tbody></table><h2 id="3-响应首部字段"><a href="#3-响应首部字段" class="headerlink" title="3. 响应首部字段"></a>3. 响应首部字段</h2><table><thead><tr><th style="text-align:left">首部字段名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Accept-Ranges</td><td style="text-align:left">是否接受字节范围。</td></tr><tr><td style="text-align:left">Age</td><td style="text-align:left">服务端告知客户端，源服务器（而不是缓存服务器）在多久之前创建了响应，单位为秒。</td></tr><tr><td style="text-align:left">ETag</td><td style="text-align:left">实体资源的标识，可用来请求指定的资源。</td></tr><tr><td style="text-align:left">Location</td><td style="text-align:left">请求的资源所在的新位置。</td></tr><tr><td style="text-align:left">Proxy-Authenticate</td><td style="text-align:left">将代理服务器需要的认证信息发送给客户端。</td></tr><tr><td style="text-align:left">Retry-After</td><td style="text-align:left">服务端告知客户端多久之后再重试，一般与503和3xx重定向类型的应答一起使用。</td></tr><tr><td style="text-align:left">Server</td><td style="text-align:left">告知服务端当前使用的HTTP服务器应用程序的相关信息。</td></tr><tr><td style="text-align:left">Vary</td><td style="text-align:left">代理服务器缓存的管理信息。</td></tr><tr><td style="text-align:left">WWW-Authenticate</td><td style="text-align:left">告知客户端适用于所访问资源的认证方案，如Basic或Digest。401的响应中肯定带有WWW-Authenticate字段。</td></tr><tr><td style="text-align:left">Set-Cookie</td><td style="text-align:left">服务器通过此字段给客户端传递Cookie信息。</td></tr></tbody></table><h2 id="4-实体首部字段"><a href="#4-实体首部字段" class="headerlink" title="4. 实体首部字段"></a>4. 实体首部字段</h2><table><thead><tr><th style="text-align:left">首部字段名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Allow</td><td style="text-align:left">通知客户端，服务器所支持的请求方法。</td></tr><tr><td style="text-align:left">Content-Encoding</td><td style="text-align:left">告知客户端，服务器对资源的内容编码。</td></tr><tr><td style="text-align:left">Content-Language</td><td style="text-align:left">告知客户端，资源所使用的自然语言。</td></tr><tr><td style="text-align:left">Content-Length</td><td style="text-align:left">告知客户端资源的长度</td></tr><tr><td style="text-align:left">Content-Location</td><td style="text-align:left">告知客户端资源所在的位置。</td></tr><tr><td style="text-align:left">Content-Type</td><td style="text-align:left">告知客户端资源的媒体类型，取值同请求首部字段中的Accept。</td></tr><tr><td style="text-align:left">Expires</td><td style="text-align:left">告知客户端资源的失效日期。可用于对缓存的处理。</td></tr><tr><td style="text-align:left">Last-Modified</td><td style="text-align:left">告知客户端资源最后一次修改的时间。</td></tr></tbody></table><h2 id="5-其他报文字段"><a href="#5-其他报文字段" class="headerlink" title="5. 其他报文字段"></a>5. 其他报文字段</h2><p>X-Frame-Options：首部字段X-Frame-Options属于HTTP响应首部<br>用于控制网站内容在其他Web网站的Frame标签内的显示问题，主要目的是为了防止点击劫持攻击</p><p>X-XSS-Protection：首部字段X-XSS-Protection属于HTTP响应首部<br>针对跨站脚本攻击的一种对策,用于控制浏览器XSS防护机制的开关</p><p>DNT(Do Not Track)：拒绝个人信息被收集,表示拒绝被精准广告追踪的一种方法</p><h1 id="四、HTTP-状态返回码"><a href="#四、HTTP-状态返回码" class="headerlink" title="四、HTTP 状态返回码"></a>四、HTTP 状态返回码</h1><blockquote><p>状态码负责表示客户端请求的返回结果、标记服务器端是否正常、通知出现的错误。</p></blockquote><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:left">类别</th><th style="text-align:left">分类描述</th></tr></thead><tbody><tr><td style="text-align:center">1XX</td><td style="text-align:left">Informational（信息性状态码）</td><td style="text-align:left">请求正在被处理</td></tr><tr><td style="text-align:center">2XX</td><td style="text-align:left">Success（成功状态码）</td><td style="text-align:left">请求处理成功</td></tr><tr><td style="text-align:center">3XX</td><td style="text-align:left">Redirection（重定向状态码）</td><td style="text-align:left">需要进行重定向</td></tr><tr><td style="text-align:center">4XX</td><td style="text-align:left">Client Error（客户端错误状态码）</td><td style="text-align:left">服务器无法处理请求</td></tr><tr><td style="text-align:center">5XX</td><td style="text-align:left">Server Error（服务器错误状态吗）</td><td style="text-align:left">服务器处理请求时出错</td></tr></tbody></table><p><br></p><h2 id="1-信息响应"><a href="#1-信息响应" class="headerlink" title="1. 信息响应"></a>1. 信息响应</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:left">短句</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:left">Continue</td><td style="text-align:left">继续，客户端应继续其请求</td></tr><tr><td style="text-align:center">101</td><td style="text-align:left">Switching Protocols</td><td style="text-align:left">切换协议，只能切换到更高级的协议</td></tr></tbody></table><p><br></p><h2 id="2-成功响应"><a href="#2-成功响应" class="headerlink" title="2. 成功响应"></a>2. 成功响应</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:left">短句</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:left">OK</td><td style="text-align:left">请求成功，一般用于GET与POST请求</td></tr><tr><td style="text-align:center">201</td><td style="text-align:left">Created</td><td style="text-align:left">已创建，成功请求并创建了新的资源</td></tr><tr><td style="text-align:center">202</td><td style="text-align:left">Accepted</td><td style="text-align:left">已接受，已经接受请求，但未处理完成</td></tr></tbody></table><p><br></p><h2 id="3-重定向"><a href="#3-重定向" class="headerlink" title="3. 重定向"></a>3. 重定向</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:left">短句</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">300</td><td style="text-align:left">Multiple Choices</td><td style="text-align:left">多种选择，请求的资源可包括多个位置</td></tr><tr><td style="text-align:center">301</td><td style="text-align:left">Moved Permanently</td><td style="text-align:left">永久移动</td></tr><tr><td style="text-align:center">302</td><td style="text-align:left">Found</td><td style="text-align:left">临时移动，GET 或者 HEAD 请求</td></tr><tr><td style="text-align:center">303</td><td style="text-align:left">See Other</td><td style="text-align:left">查看其它地址，与302类似。需使用GET请求查看</td></tr><tr><td style="text-align:center">304</td><td style="text-align:left">Not Modified</td><td style="text-align:left">未修改，服务器返回此状态码时，不会返回任何资源</td></tr><tr><td style="text-align:center">307</td><td style="text-align:left">Temporary Redirect</td><td style="text-align:left">临时重定向，不该改变请求方法</td></tr></tbody></table><p><br></p><h2 id="4-客户端错误"><a href="#4-客户端错误" class="headerlink" title="4. 客户端错误"></a>4. 客户端错误</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:left">短句</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">400</td><td style="text-align:left">Bad Request</td><td style="text-align:left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td style="text-align:center">401</td><td style="text-align:left">Unauthorized</td><td style="text-align:left">请求要求用户的身份认证</td></tr><tr><td style="text-align:center">402</td><td style="text-align:left">Payment Required</td><td style="text-align:left">保留，将来使用</td></tr><tr><td style="text-align:center">403</td><td style="text-align:left">Forbidden</td><td style="text-align:left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td style="text-align:center">404</td><td style="text-align:left">Not Found</td><td style="text-align:left">服务器无法根据客户端的请求找到资源（网页）</td></tr><tr><td style="text-align:center">405</td><td style="text-align:left">Method Not Allowed</td><td style="text-align:left">客户端请求中的方法被禁止</td></tr></tbody></table><p><br></p><h2 id="5-服务器错误"><a href="#5-服务器错误" class="headerlink" title="5. 服务器错误"></a>5. 服务器错误</h2><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:left">短句</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">500</td><td style="text-align:left">Internal Server Error</td><td style="text-align:left">服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:center">501</td><td style="text-align:left">Not Implemented</td><td style="text-align:left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:center">502</td><td style="text-align:left">Bad Gateway</td><td style="text-align:left">从远程服务器接收到了一个无效的响应</td></tr><tr><td style="text-align:center">503</td><td style="text-align:left">Service Unavailable</td><td style="text-align:left">服务器暂时的无法处理客户端的请求</td></tr><tr><td style="text-align:center">504</td><td style="text-align:left">Gateway Time-out</td><td style="text-align:left">未及时从远端服务器获取请求</td></tr><tr><td style="text-align:center">505</td><td style="text-align:left">HTTP Version not supported</td><td style="text-align:left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><p><br></p><h1 id="五、HTTP-内容类型"><a href="#五、HTTP-内容类型" class="headerlink" title="五、HTTP 内容类型"></a>五、HTTP 内容类型</h1><p>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件。</p><p>常见的媒体类型：<br>文本文件：text/html, text/plain, text/css, application/xml<br>图片文件：iamge/jpeg, image/gif, image/png;<br>视频文件：video/mpeg<br>应用程序使用的二进制文件：application/octet-stream, application/zip</p><p>常用的内容编码：<br>gzip: 由文件压缩程序gzip生成的编码格式；<br>compress: 由Unix文件压缩程序compress生成的编码格式；<br>deflate: 组合使用zlib和deflate压缩算法生成的编码格式；<br>identity：默认的编码格式，不执行压缩。</p><p>Cookie主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><hr><p><b>Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie渐渐被淘汰。由于服务器指定Cookie后，浏览器的每次请求都会携带Cookie数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器API已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB 。  </b></p><hr><p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></p><p>(1) 会话期Cookie<br>浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</p><p>(2) 持久性Cookie<br>和关闭浏览器便失效的会话期Cookie不同，持久性Cookie可以指定一个特定的过期时间（Expires）或有效期（Max-Age）。</p><p>(3) Secure 和 HttpOnly</p><ul><li><p><strong>标记为 <code>Secure</code> 的Cookie只应通过被HTTPS协议加密过的请求发送给服务端。</strong></p></li><li><p><strong>为避免跨域脚本 (XSS) 攻击，通过JavaScript的 Document.cookie API无法访问带有 <code>HttpOnly</code> 标记的Cookie，它们只应该发送给服务端。</strong></p></li></ul><p>(4) Cookie的作用域<br>Domain 和 Path 标识定义了Cookie的作用域：即Cookie应该发送给哪些URL。</p><h1 id="七、HTTP-1-x的连接管理"><a href="#七、HTTP-1-x的连接管理" class="headerlink" title="七、HTTP/1.x的连接管理"></a>七、HTTP/1.x的连接管理</h1><p>连接管理是一个 HTTP 的关键话题：打开和保持连接在很大程度上影响着网站和 Web 应用程序的性能。在 HTTP/1.x 里有多种模型：<code>短连接</code>, <code>长连接</code>, 和 <code>HTTP 流水线</code>。<br>  <img src="/img/images/http5.png" alt></p><p><strong>短连接</strong><br>HTTP 最早期的模型，也是  HTTP/1.0 的默认模型，是短连接。每一个 HTTP 请求都由它自己独立的连接完成；这意味着发起每一个 HTTP 请求之前都会有一次 TCP 握手，而且是连续不断的。</p><p><strong>长连接</strong><br>一个长连接会保持一段时间，重复用于发送一系列请求，节省了新建 TCP 连接握手的时间，还可以利用 TCP 的性能增强能力。当然这个连接也不会一直保留着：连接在空闲一段时间后会被关闭(服务器可以使用 <code>Keep-Alive</code> 协议头来指定一个最小的连接保持时间)。</p><p><strong>HTTP 流水线</strong><br>HTTP 流水线在现代浏览器中并不是默认被启用的<br>HTTP/2 流水线已经被更好的算法给代替，如 multiplexing</p><hr><p><strong>域名分片</strong></p><blockquote><p>除非你有紧急而迫切的需求，不要使用这一过时的技术，升级到 HTTP/2 就好了。在 HTTP/2 里，做域名分片就没必要了：HTTP/2 的连接可以很好的处理并发的无优先级的请求。域名分片甚至会影响性能。大多数 HTTP/2 的实现还会使用一种称作连接凝聚的技术去尝试合并被分片的域名。</p></blockquote><p>  <img src="/img/images/http6.png" alt></p><p>如果服务器端想要更快速的响应网站或应用程序的应答，它可以迫使客户端建立更多的连接。</p><p>浏览器有并发限制，是为了防止<code>Dos/DDoS</code>攻击。</p><p>例如，不要在同一个域名下获取所有资源，假设有个域名是<code>www.example.com</code>我们可以把它拆分成好几个域名：www1.example.com、www2.example.com<br>所有这些域名都指向同一台服务器，浏览器会同时为每个域名建立多条连接。</p><p><code>这一技术被称作域名分片（域名发散）</code></p><p><code>域名收敛</code> 就是将静态资源放在一个域名下,减少DNS解析的开销。</p><hr><h1 id="八、HTTP-缓存"><a href="#八、HTTP-缓存" class="headerlink" title="八、HTTP 缓存"></a>八、HTTP 缓存</h1><blockquote><p>重用已获取的资源能够有效的提升网站与应用的性能。Web 缓存能够减少延迟与网络阻塞，进而减少显示某个资源所用的时间。借助 HTTP 缓存，Web 站点变得更具有响应性。</p></blockquote><h2 id="1-各种类型的缓存"><a href="#1-各种类型的缓存" class="headerlink" title="1. 各种类型的缓存"></a>1. 各种类型的缓存</h2><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。</p><ul><li>缓存的种类有很多,其大致可归为两类：<code>私有与共享缓存</code>。共享缓存存储的响应能够被多个用户使用，私有缓存只能用于单独用户。</li></ul><p>下文将主要介绍<code>浏览器缓存</code>，除此之外还有代理缓存、网关缓存、CDN、反向代理缓存和负载均衡器等部署在服务器上，为站点和 web 应用提供更好的稳定性、性能和扩展性。</p><p>常见的 HTTP 缓存只能存储 <code>GET</code> 响应，对于其他类型的响应则无能为力。</p><h2 id="2-缓存规则"><a href="#2-缓存规则" class="headerlink" title="2. 缓存规则"></a>2. 缓存规则</h2><p>为了方便理解，我们认为浏览器存在一个缓存数据库，用于存储缓存信息（实际上静态资源是被缓存到了内存和磁盘中），在浏览器第一次请求数据时，此时缓存数据库没有对应的缓存数据，则需要请求服务器，服务器会将缓存规则和数据返回，浏览器将缓存规则和数据存储进缓存数据库。</p><p>我们可以将其分为两大类<code>强缓存</code>、<code>协商缓存</code></p><h3 id="2-1-强缓存"><a href="#2-1-强缓存" class="headerlink" title="2.1 强缓存"></a>2.1 强缓存</h3><p>浏览器如果判断本地缓存未过期，就直接使用，无需发起http请求<code>(200 from memory/disk cache)</code></p><p><strong>HTTP 1.0</strong></p><p>服务器使用的响应头字段为 <code>Expires</code> ，值为未来的绝对时间（时间戳），浏览器请求时的当前时间超过了 Expires 设置的时间，代表缓存失效，需要再次向服务器发送请求，否则都会直接从缓存数据库中获取数据。</p><hr><p><strong>HTTP 1.1</strong></p><p><code>Cache-Control</code> 是最重要的规则，默认为private。</p><pre>private     私有缓存public      共享缓存max-age     缓存的内容将在 xxx 秒后失效no-cache    需要使用对比缓存来验证缓存数据no-store    所有内容都不会缓存，强缓存、协商缓存都不会触发</pre><p>  <img src="/img/images/http7.png" alt></p><p><strong><em>注意：在 HTTP 1.0 版本中，<code>Expires</code> 字段的绝对时间是从服务器获取的，由于请求需要时间，所以浏览器的请求时间与服务器接收到请求所获取的时间是存在误差的，这也导致了缓存命中的误差，在 HTTP 1.1 版本中，因为 <code>Cache-Control</code> 的值 <code>max-age=xxx</code> 中的 xxx 是以秒为单位的相对时间，所以在浏览器接收到资源后开始倒计时，规避了 HTTP 1.0 中缓存命中存在误差的缺点，为了兼容低版本 HTTP 协议，正常开发中两种响应头会同时使用，<code>HTTP 1.1 版本的实现优先级高于 HTTP 1.0</code>。</em></strong></p><p><br></p><h3 id="2-2-协商缓存"><a href="#2-2-协商缓存" class="headerlink" title="2.2 协商缓存"></a>2.2 协商缓存</h3><p>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回<code>304</code>状态码，通知客户端比较成功，可以使用缓存数据。</p><p><strong>HTTP 1.0</strong></p><ul><li><strong>If-Modified-Since/Last-Modified</strong><br>这两个是成对出现的，属于协商缓存的内容，其中浏览器的头部是<code>If-Modified-Since</code>，而服务端的是<code>Last-Modified</code>，它的作用是，在发起请求时，如果If-Modified-Since和Last-Modified匹配，那么代表服务器资源并未改变，因此服务端不会返回资源实体，而是只返回头部，通知浏览器可以使用本地缓存。Last-Modified，顾名思义，指的是文件最后的修改时间，而且只能<code>精确到s</code>。</li></ul><p><strong>HTTP 1.1</strong></p><ul><li><strong>If-None-Match/E-tag</strong><br>这两个是成对出现的，属于协商缓存的内容，其中浏览器的头部是<code>If-None-Match</code>，而服务端的是<code>E-tag</code>，同样，发出请求后，如果If-None-Match和E-tag匹配，则代表内容未变，通知浏览器使用本地缓存，和Last-Modified不同，E-tag更精确，它是类似于指纹一样的东西，基于<code>FileEtag INode Mtime Size</code>生成，只要文件变，指纹就会变，而且<code>没有精确度的限制</code>。</li></ul><hr><p>  <img src="/img/images/http8.png" alt></p><p>  <img src="/img/images/http9.png" alt></p><hr><p><strong><em>为了使缓存策略更加健壮、灵活，HTTP 1.0 版本 和 HTTP 1.1 版本的缓存策略会同时使用，甚至强制缓存和协商缓存也会同时使用，对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接使用缓存，超出有效时间，执行协商缓存策略，对于协商缓存，将缓存信息中的 Etag 和 Last-Modified 通过请求头 If-None-Match 和 If-Modified-Since 发送给服务器，由服务器校验同时设置新的强制缓存，校验通过并返回 304 状态码时，浏览器直接使用缓存，如果协商缓存也未命中，则服务器重新设置协商缓存的标识。</em></strong></p><p>  <img src="/img/images/http10.png" alt></p><p><br></p><h2 id="3-带Vary头的响应"><a href="#3-带Vary头的响应" class="headerlink" title="3. 带Vary头的响应"></a>3. 带Vary头的响应</h2><blockquote><p>Vary HTTP 响应头决定了对于后续的请求头，如何判断是请求一个新的资源还是使用缓存的文件。</p></blockquote><p>当缓存服务器收到一个请求，只有当前的请求和原始（缓存）的请求头跟缓存的响应头里的Vary都匹配，才能使用缓存的响应。</p><p>使用vary头有利于内容服务的动态多样性。例如，使用Vary: User-Agent头，缓存服务器需要通过UA判断是否使用缓存的页面。如果需要区分移动端和桌面端的展示内容，利用这种方式就能避免在不同的终端展示错误的布局。另外，它可以帮助 Google 或者其他搜索引擎更好地发现页面的移动版本，并且告诉搜索引擎没有引入Cloaking。</p><p><br></p><p>参考文章：</p><ul><li><a href="https://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="noopener">彻底弄懂HTTP缓存机制及原理</a></li><li><a href="https://www.cnblogs.com/ranyonsue/p/5984001.html" target="_blank" rel="noopener">关于HTTP协议，一篇就够了</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN Web Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、HTTP-概述&quot;&gt;&lt;a href=&quot;#一、HTTP-概述&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP 概述&quot;&gt;&lt;/a&gt;一、HTTP 概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;HTTP是基于客户端/服务端（C/S）的架构模型，通过一个
      
    
    </summary>
    
    
      <category term="HTTP" scheme="https://www.williamife.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>从URL输入到页面展现到底发生什么？</title>
    <link href="https://www.williamife.com/2019/02/16/%E4%BB%8EURL%E8%BE%93%E5%85%A5%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/"/>
    <id>https://www.williamife.com/2019/02/16/从URL输入到页面展现到底发生什么/</id>
    <published>2019-02-16T08:30:00.000Z</published>
    <updated>2019-11-27T07:53:03.571Z</updated>
    
    <content type="html"><![CDATA[<p>从开发&amp;运维角度方面来看，总体来说分为以下几个过程：</p><ul><li>DNS 解析:将域名解析成 IP 地址</li><li>TCP 连接：TCP 三次握手</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>断开连接：TCP 四次挥手</li></ul><h2 id="一、什么是URL"><a href="#一、什么是URL" class="headerlink" title="一、什么是URL"></a>一、什么是URL</h2><p>URL（Uniform Resource Locator），统一资源定位符，用于定位互联网上资源，俗称网址。</p><p><code>scheme: // host.domain:port / path / filename ? abc = 123 # 456789</code></p><pre>scheme       - 定义因特网服务的类型。常见的协议有 http、https、ftp、file，               其中最常见的类型是 http，而 https 则是进行加密的网络传输。host         - 定义域主机（http 的默认主机是 www）domain       - 定义因特网域名，比如 baidu.comport         - 定义主机上的端口号（http 的默认端口号是 80）path         - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。filename     - 定义文档/资源的名称query        - 即查询参数fragment     - 即 # 后的hash值，一般用来定位到某个位置</pre><p><br></p><h2 id="二、DNS域名解析"><a href="#二、DNS域名解析" class="headerlink" title="二、DNS域名解析"></a>二、DNS域名解析</h2><p>在浏览器输入网址后，首先要经过域名解析，因为浏览器并不能直接通过域名找到对应的服务器，而是要通过 IP 地址。</p><ol><li><p>IP 地址<br>IP 地址是指互联网协议地址，是 IP Address 的缩写。IP 地址是 IP 协议提供的一种统一的地址格式，<br>它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p></li><li><p>什么是域名解析<br>DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。<br>DNS 是一个网络服务器，我们的域名解析简单来说就是在 DNS 上记录一条信息记录。</p></li><li><p>浏览器如何通过域名去查询 URL 对应的 IP 呢？<br>DNS域名解析分为递归查询和迭代查询两种方式，现一般为迭代查询。</p></li></ol><p><br></p><p>  <img src="/img/images/page1.png" alt>  </p><h3 id="DNS的优化与应用"><a href="#DNS的优化与应用" class="headerlink" title="DNS的优化与应用"></a>DNS的优化与应用</h3><ol><li><p>DNS缓存<br><code>DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种: 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</code></p></li><li><p>DNS负载均衡<br><code>(DNS重定向)DNS负载均衡技术的实现原理是在DNS服务器中为同一个主机名配置多个IP地址，在应答DNS查询时，DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。</code></p></li></ol><p><em>大家耳熟能详的CDN(Content Delivery Network)就是利用DNS的重定向技术，DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。</em></p><ol start="3"><li>dns-prefetch<br><code>DNS Prefetch 是一种 DNS 预解析技术。当你浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页中的连接时就无需进行 DNS 的解析，减少用户等待时间，提高用户体验。</code></li></ol><p><br></p><h2 id="OSI参考模型与TCP-IP四层模型"><a href="#OSI参考模型与TCP-IP四层模型" class="headerlink" title="OSI参考模型与TCP/IP四层模型"></a>OSI参考模型与TCP/IP四层模型</h2><p>  <img src="/img/images/page2.png" alt></p><p><br></p><h2 id="三、TCP三次握手"><a href="#三、TCP三次握手" class="headerlink" title="三、TCP三次握手"></a>三、TCP三次握手</h2><p>  <img src="/img/images/page3.png" alt></p><ul><li><p>客户端发送一个带 SYN=1，Seq=X 的数据包到服务器端口<code>（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</code></p></li><li><p>服务器发回一个带 SYN=1， ACK=X+1， Seq=Y 的响应包以示传达确认信息<code>（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</code></p></li><li><p>客户端再回传一个带 ACK=Y+1， Seq=Z 的数据包，代表“握手结束”<code>（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</code></p></li></ul><p><br></p><h2 id="四、发送-HTTP-请求"><a href="#四、发送-HTTP-请求" class="headerlink" title="四、发送 HTTP 请求"></a>四、发送 HTTP 请求</h2><p>TCP 三次握手结束后，开始发送 HTTP 请求报文。</p><p><code>为避免篇幅过长，http协议、缓存等相关内容请移步至：</code><a href="/2019/03/04/从HTTP到WEB缓存/">从HTTP到WEB缓存</a></p><p><br></p><h2 id="五、服务器处理请求并返回-HTTP-报文"><a href="#五、服务器处理请求并返回-HTTP-报文" class="headerlink" title="五、服务器处理请求并返回 HTTP 报文"></a>五、服务器处理请求并返回 HTTP 报文</h2><p>每台服务器上都会安装处理请求的应用——Web server。常见的web server产品有apache、nginx、IIS、Lighttpd等。</p><p><code>假装我是一个传统的MVC模型，RD同学请无视</code><br>  <img src="/img/images/page4.png" alt>  </p><h2 id="六、浏览器解析渲染页面"><a href="#六、浏览器解析渲染页面" class="headerlink" title="六、浏览器解析渲染页面"></a>六、浏览器解析渲染页面</h2><h3 id="浏览器的主要构成"><a href="#浏览器的主要构成" class="headerlink" title="浏览器的主要构成"></a>浏览器的主要构成</h3><p>  <img src="/img/images/page5.png" alt>  </p><pre>用户界面    (User Interface)    － 包括地址栏、后退/前进按钮、书签目录等，也就是你所看到的除了用来显示你所请求页面的主窗口之外的其他部分浏览器引擎  (Browser Engine)    － 用来查询及操作渲染引擎的接口渲染引擎    (Rendering Engine)  － 用来显示请求的内容，例如，如果请求内容为html，它负责解析html及css，并将解析后的结果显示出来网络        (Networking)        － 用来完成网络调用，例如http请求，它具有平台无关的接口，可以在不同平台上工作JS解释器    (JS Interpreter)    － 用来解释执行JS代码UI后端      (UI Backend)        － 用来绘制类似组合选择框及对话框等基本组件，具有不特定于某个平台的通用接口，底层使用操作系统的用户接口数据存储    (DB Persistence)    － 属于持久层，浏览器需要在硬盘中保存类似cookie的各种数据，HTML5定义了web database技术，这是一种轻量级完整的客户端存储技术</pre><h4 id="1-多进程的浏览器"><a href="#1-多进程的浏览器" class="headerlink" title="1.多进程的浏览器"></a>1.多进程的浏览器</h4><p>浏览器是多进程的，有一个主控进程，以及每一个tab页面都会新开一个进程</p><p>进程可能包括主控进程，插件进程，GPU，tab页（浏览器内核）等…</p><pre>1.Browser进程：浏览器的主进程（负责协调、主控），只有一个2.第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建3.GPU进程：最多一个，用于3D绘制4.浏览器渲染进程（内核）：默认每个Tab页面一个进程，互不影响，控制页面渲染，  脚本执行，事件处理等 (有时候会优化，如多个空白tab会合并成一个进程）</pre><h4 id="2-多线程的浏览器内核"><a href="#2-多线程的浏览器内核" class="headerlink" title="2.多线程的浏览器内核"></a>2.多线程的浏览器内核</h4><p>每一个tab页面可以看作是浏览器内核进程，然后这个进程是多线程的，它有几大类子线程：</p><pre>1. GUI线程2. JS引擎线程3. 事件触发线程4. 定时器线程5. 网络请求线程</pre><p><br></p><h3 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h3><p>浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：</p><pre>1. 解析HTML，构建DOM树2. 解析CSS，生成CSS规则树3. 合并DOM树和CSS规则，生成render树4. 布局render树（Layout/reflow），负责各元素尺寸、位置的计算5. 绘制render树（paint），绘制页面像素信息</pre><p><code>以webkit内核为例</code><br>  <img src="/img/images/page6.png" alt>  </p><p><br></p><h4 id="1-HTML解析，构建DOM"><a href="#1-HTML解析，构建DOM" class="headerlink" title="1. HTML解析，构建DOM"></a>1. HTML解析，构建DOM</h4><p>简单的理解，这一步的流程是这样的：浏览器解析HTML，构建DOM树。<br>解析HTML到构建出DOM当然过程可以简述如下：</p><pre>Bytes → characters → tokens → nodes → DOM</pre><p>  <img src="/img/images/page7.png" alt>  </p><p><code>其中比较关键的几个步骤</code><br><!-- <pre> --></p><ol><li><p>Conversion转换：浏览器将获得的HTML内容（Bytes）基于他的编码转换为单个字符</p></li><li><p>Tokenizing分词：浏览器按照HTML规范标准将这些字符转换为不同的标记token。每个token都有自己独特的含义以及规则集</p></li><li><p>Lexing词法分析：分词的结果是得到一堆的token，此时把他们转换为对象，这些对象分别定义他们的属性和规则</p></li><li><p>DOM构建：因为HTML标记定义的就是不同标签之间的关系，这个关系就像是一个树形结构一样<br>例如：body对象的父节点就是HTML对象，然后段略p对象的父节点就是body对象</p></li></ol><p><br></p><h4 id="2-解析CSS，生成CSS规则树"><a href="#2-解析CSS，生成CSS规则树" class="headerlink" title="2. 解析CSS，生成CSS规则树"></a>2. 解析CSS，生成CSS规则树</h4><p>同理，CSS规则树的生成也是类似。</p><pre>Bytes → characters → tokens → nodes → CSSOM</pre><p>  <img src="/img/images/page8.png" alt>  </p><p><br></p><h4 id="3-合并DOM树和CSS规则，生成render树"><a href="#3-合并DOM树和CSS规则，生成render树" class="headerlink" title="3. 合并DOM树和CSS规则，生成render树"></a>3. 合并DOM树和CSS规则，生成render树</h4><p>当DOM树和CSSOM都有了后，就要开始构建渲染树了</p><p>一般来说，渲染树和DOM树相对应的，但不是严格意义上的一一对应,因为有一些不可见的DOM元素不会插入到渲染树中，如head这种不可见的标签或者display: none等</p><p>  <img src="/img/images/page9.png" alt>  </p><p><br></p><h4 id="4-布局render树（Layout-Reflow），负责各元素尺寸、位置的计算"><a href="#4-布局render树（Layout-Reflow），负责各元素尺寸、位置的计算" class="headerlink" title="4. 布局render树（Layout/Reflow），负责各元素尺寸、位置的计算"></a>4. 布局render树（Layout/Reflow），负责各元素尺寸、位置的计算</h4><p>布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸。</p><p><br></p><h4 id="5-绘制render树（Paint），绘制页面像素信息"><a href="#5-绘制render树（Paint），绘制页面像素信息" class="headerlink" title="5. 绘制render树（Paint），绘制页面像素信息"></a>5. 绘制render树（Paint），绘制页面像素信息</h4><p>绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。</p><p>  <img src="/img/images/page10.png" alt>  </p><pre>这张图片中重要的四个步骤1. 计算CSS样式2. 构建渲染树3. 布局，主要定位坐标和大小，是否换行，各种position overflow z-index属性4. 绘制，将图像绘制出来</pre><ul><li>Layout，也称为Reflow，即回流。一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树</li><li>Repaint，即重绘。意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就可以了</li></ul><p><br></p><h2 id="七、断开连接"><a href="#七、断开连接" class="headerlink" title="七、断开连接"></a>七、断开连接</h2><p>当数据传送完毕，需要断开 tcp 连接，此时发起 tcp 四次挥手。</p><p>  <img src="/img/images/page11.png" alt>  </p><ul><li>发起方向被动方发送报文，Fin、Ack、Seq，表示已经没有数据传输了。并进入 FIN_WAIT_1 状态。<br><code>(第一次挥手：由浏览器发起的，发送给服务器，我请求报文发送完了，你准备关闭吧)</code></li><li>被动方发送报文，Ack、Seq，表示同意关闭请求。此时主机发起方进入 FIN_WAIT_2 状态。<br><code>(第二次挥手：由服务器发起的，告诉浏览器，我请求报文接受完了，我准备关闭了，你也准备吧)</code></li><li>被动方向发起方发送报文段，Fin、Ack、Seq，请求关闭连接。并进入 LAST_ACK 状态。<br><code>(第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完了，你准备关闭吧)</code></li><li>发起方向被动方发送报文段，Ack、Seq。然后进入等待 TIME_WAIT 状态。被动方收到发起方的报文段以后关闭连接。发起方等待一定时间未收到回复，则正常关闭。<br><code>(第四次挥手：由浏览器发起，告诉服务器，我响应报文接受完了，我准备关闭了，你也准备吧)</code></li></ul><p><br></p><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/34453198?group_id=957277541711540224" target="_blank" rel="noopener">从输入URL到页面加载的过程</a></li><li><a href="https://www.cnblogs.com/imyalost/p/6086808.html" target="_blank" rel="noopener">TCP/IP协议</a></li><li><a href="https://www.cnblogs.com/leezhxing/p/4524176.html" target="_blank" rel="noopener">TCP的三次握手与四次分手</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN Web Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从开发&amp;amp;运维角度方面来看，总体来说分为以下几个过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 解析:将域名解析成 IP 地址&lt;/li&gt;
&lt;li&gt;TCP 连接：TCP 三次握手&lt;/li&gt;
&lt;li&gt;发送 HTTP 请求&lt;/li&gt;
&lt;li&gt;服务器处理请求并返回 HTTP 报文&lt;
      
    
    </summary>
    
    
      <category term="开发" scheme="https://www.williamife.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="运维" scheme="https://www.williamife.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>关于JS隐式转换的那些小事儿</title>
    <link href="https://www.williamife.com/2018/12/23/JS%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>https://www.williamife.com/2018/12/23/JS隐式转换/</id>
    <published>2018-12-23T11:30:37.000Z</published>
    <updated>2019-07-10T05:43:49.588Z</updated>
    
    <content type="html"><![CDATA[<p>带你深入浅出的理解隐式转换时js计算中的过程</p><h2 id="一、基础概念回顾"><a href="#一、基础概念回顾" class="headerlink" title="一、基础概念回顾"></a>一、基础概念回顾</h2><h3 id="什么是隐式转换"><a href="#什么是隐式转换" class="headerlink" title="什么是隐式转换"></a>什么是隐式转换</h3><p>JavaScript 是一种弱类型或者说动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据：</p><pre>var foo = 42;     // foo is a Number nowfoo = "bar";     // foo is a String nowfoo = true;     // foo is a Boolean now</pre><ul><li>js中，当运算符在运算时，如果两边数据类型不统一，CPU就无法计算，这时我们编译器会自动将运算符两边的数据做一个数据类型转换，转成一样的数据类型再计算。这种无需程序员手动转换，而由编译器自动转换的方式就称为隐式转换。</li></ul><p><code>如：1 + &#39;1&#39;  // 执行时不会报错</code></p><p><br></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>JavaScript 中有7种数据类型，可以分为两类：原始类型、对象类型：</p></blockquote><p><code>基本数据类型(原始类型)：Undefined、 Null、 String、 Number、 Boolean、 Symbol (ES6新增)</code></p><p><code>复杂数据类型(对象类型)：Object</code></p><p><br></p><h3 id="关于-valueOf-和-toString"><a href="#关于-valueOf-和-toString" class="headerlink" title="关于 valueOf() 和 toString()"></a>关于 valueOf() 和 toString()</h3><h4 id="1、valueOf"><a href="#1、valueOf" class="headerlink" title="1、valueOf()"></a><code>1、valueOf()</code></h4><blockquote><p>默认情况下，valueOf方法由Object后面的每个对象继承。 每个内置的核心对象都会覆盖此方法以返回适当的值。如果对象没有原始值，则valueOf将返回对象本身。</p></blockquote><table><thead><tr><th style="text-align:left">对象</th><th style="text-align:left">返回值</th></tr></thead><tbody><tr><td style="text-align:left">Array</td><td style="text-align:left">返回数组对象本身。</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">布尔值。</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。</td></tr><tr><td style="text-align:left">Function</td><td style="text-align:left">函数本身。</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left">数字值。</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">对象本身。这是默认情况。</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left">字符串值。</td></tr><tr><td style="text-align:left">Symbol</td><td style="text-align:left">symbol 原始值。</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">Math 和 Error 对象没有 valueOf 方法。</td></tr></tbody></table><h4 id="2、toString"><a href="#2、toString" class="headerlink" title="2、toString()"></a><code>2、toString()</code></h4><blockquote><p>每个对象都有一个toString()方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString()方法被每个Object对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 <code>&quot;[object type]&quot;</code>，其中<code>type</code>是对象的类型。</p></blockquote><table><thead><tr><th style="text-align:left">对象</th><th style="text-align:left">返回值</th><th style="text-align:center">是否覆盖自Object的方法</th></tr></thead><tbody><tr><td style="text-align:left">Array</td><td style="text-align:left">返回一个字符串，表示指定的数组及其元素。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">返回指定的布尔对象的字符串形式。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">返回一个字符串，表示该Date对象。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Function</td><td style="text-align:left">返回一个表示当前函数源代码的字符串。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left">返回指定 Number 对象的字符串表示形式。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">返回一个表示该对象的字符串。</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left">返回指定对象的字符串形式。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Symbol</td><td style="text-align:left">symbol 对象的字符串表示。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Error</td><td style="text-align:left">返回一个指定的错误对象（Error object）的字符串表示。</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Math</td><td style="text-align:left">没有 toString 方法,方法继承自Object。</td><td style="text-align:center">否</td></tr></tbody></table><p><br><br><br></p><h2 id="二、隐式转换规则"><a href="#二、隐式转换规则" class="headerlink" title="二、隐式转换规则"></a>二、隐式转换规则</h2><blockquote><p>隐式转换中主要涉及到三种类型转换：</p></blockquote><ol><li><p>转成string类型：<br><code>+(加法运算符，字符串拼接)</code></p></li><li><p>转成number类型：<br><code>++ --(自增自减运算符) ,+ - * / %(算术运算符)</code><br><code>&gt; &lt; &gt;= &lt;= == === != !==(关系、比较运算符)</code></p></li><li><p>转成boolean类型：<br><code>&amp;&amp; || !(逻辑且或非运算符)</code></p></li></ol><p><br></p><h3 id="对象通过ToPrimitive获得原始值"><a href="#对象通过ToPrimitive获得原始值" class="headerlink" title="对象通过ToPrimitive获得原始值"></a>对象通过ToPrimitive获得原始值</h3><p><code>将值转为原始值ToPrimitive(),会执行toNumber或者toString的操作</code></p><p>js引擎内部的抽象操作ToPrimitive有着这样的签名：<code>ToPrimitive(input, PreferredType?)</code></p><p>input是要转换的值，PreferredType是可选参数，可以是Number或String类型。它只是一个转换标志，转化后的结果并不一定是这个参数所值的类型，但是转换结果一定是一个原始值（否则报错）。</p><hr><ul><li>如果PreferredType被标记为Number，则会进行下面的操作流程来转换输入的值。</li></ul><ol><li>如果输入的值已经是一个原始值，则直接返回它</li><li>否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，如果valueOf()方法的返回值是一个原始值，则返回这个原始值。</li><li>否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。</li><li>否则，抛出TypeError异常。</li></ol><hr><ul><li>如果PreferredType被标记为String，则会进行下面的操作流程来转换输入的值。</li></ul><ol><li>如果输入的值已经是一个原始值，则直接返回它</li><li>否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。</li><li>否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，如果valueOf()方法的返回值是一个原始值，则返回这个原始值。</li><li>否则，抛出TypeError异常。</li></ol><hr><ul><li>既然PreferredType是可选参数，那么如果没有这个参数时，怎么转换呢？PreferredType的值会按照这样的规则来自动设置：</li></ul><ol><li>该对象为Date类型，则PreferredType被设置为String</li><li>否则，PreferredType被设置为Number</li></ol><p><br></p><p><code>来看下面的表格</code></p><table><thead><tr><th style="text-align:left">toPrimitive</th><th style="text-align:center">Number</th><th style="text-align:center">String</th><th style="text-align:center">Boolean</th></tr></thead><tbody><tr><td style="text-align:left">false</td><td style="text-align:center">0</td><td style="text-align:center">“false”</td><td style="text-align:center">false</td></tr><tr><td style="text-align:left">true</td><td style="text-align:center">1</td><td style="text-align:center">“true”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">0</td><td style="text-align:center">0</td><td style="text-align:center">“0”</td><td style="text-align:center">false</td></tr><tr><td style="text-align:left">1</td><td style="text-align:center">1</td><td style="text-align:center">“1”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">“0”</td><td style="text-align:center">0</td><td style="text-align:center">“0”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">“1”</td><td style="text-align:center">1</td><td style="text-align:center">“1”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">NaN</td><td style="text-align:center">NaN</td><td style="text-align:center">“NaN”</td><td style="text-align:center">false</td></tr><tr><td style="text-align:left">Infinity</td><td style="text-align:center">Infinity</td><td style="text-align:center">“Infinity”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">-Infinity</td><td style="text-align:center">-Infinity</td><td style="text-align:center">“-Infinity”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">“”</td><td style="text-align:center">0</td><td style="text-align:center">“”</td><td style="text-align:center">false</td></tr><tr><td style="text-align:left">“ “</td><td style="text-align:center">0</td><td style="text-align:center">“ “</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">“2”</td><td style="text-align:center">2</td><td style="text-align:center">“2”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">“two”</td><td style="text-align:center">NaN</td><td style="text-align:center">“two”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">[ ]</td><td style="text-align:center">0</td><td style="text-align:center">“”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">[0]</td><td style="text-align:center">0</td><td style="text-align:center">“0”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">[1,2]</td><td style="text-align:center">NaN</td><td style="text-align:center">“1,2”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">[“one”]</td><td style="text-align:center">NaN</td><td style="text-align:center">“one”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">[“one”,”two”]</td><td style="text-align:center">NaN</td><td style="text-align:center">“one,two”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">function(){}</td><td style="text-align:center">NaN</td><td style="text-align:center">“function(){}”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">{ }</td><td style="text-align:center">NaN</td><td style="text-align:center">“[object Object]”</td><td style="text-align:center">true</td></tr><tr><td style="text-align:left">null</td><td style="text-align:center">0</td><td style="text-align:center">“null”</td><td style="text-align:center">false</td></tr><tr><td style="text-align:left">undefined</td><td style="text-align:center">NaN</td><td style="text-align:center">“undefined”</td><td style="text-align:center">false</td></tr></tbody></table><p><br></p><h2 id="三、举几个栗子"><a href="#三、举几个栗子" class="headerlink" title="三、举几个栗子"></a>三、举几个栗子</h2><h3 id="1、比较运算符"><a href="#1、比较运算符" class="headerlink" title="1、比较运算符"></a>1、比较运算符</h3><pre>在 ECMAScript 中，等号由双等号（==）表示，当且仅当两个运算数相等时，它返回 true。非等号由感叹号加等号（!=）表示，当且仅当两个运算数不相等时，它返回true。为确定两个运算数是否相等，这两个运算符都会进行类型转换。执行类型转换的规则如下：如果一个运算数是 Boolean值，在检查相等性之前，把它转换成数字值。如果一个运算数是字符串，另一个是数字，在检查相等性之前，要尝试把字符串转换成数字。如果一个运算数是对象，另一个是字符串，在检查相等性之前，要尝试把对象转换成字符串。如果一个运算数是对象，另一个是数字，在检查相等性之前，要尝试把对象转换成数字。在比较时，该运算符还遵守下列规则：值 null 和 undefined 相等。在检查相等性时，不能把 null 和 undefined 转换成其他值。如果某个运算数是 NaN，等号将返回 false，非等号将返回 true。如果两个运算数都是对象，那么比较的是它们的引用值。如果两个运算数指向同一对象，那么等号返回 true，否则两个运算数不等。</pre><pre>[] == 0;        true    // [] => '' => 0![] == 0;       true    // ![] => false => 0[] == ![];      true    // [] => '' => 0 , ![] => false => 0[] == [];       false   // 对比的是它们的引用值{} == !{}       false   // {} => '[object Object]' => NaN ,                        // !{} => false => 0{} == {}        false   // 对比的是它们的引用值</pre><p>如何使<code>(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)</code>成立？</p><p><code>1.转换原始值</code></p><pre>const a = {  i: 1,  valueOf: function () {    return a.i++;  },  toString: function () {    return a.i++;  }}if (a == 1 && a == 2 && a == 3) {  console.log('hello world!');}//a先会调用valueOf()方法，如有原始值则返回这个原始值//否则，调用这个对象的toString()方法//所以改写其中任一方法均可</pre><p><code>2.闭包</code></p><pre>let a = {  [Symbol.toPrimitive]: (function() {    let i = 1;    return function() {      return i++;    }  })()}</pre><p><code>3.Object.defineProperty</code></p><pre>let val = 1;Object.defineProperty(window, 'a', {  get: function() {    return val++;  }});</pre><p><code>4.数组</code></p><pre>var a = [1,2,3];a.join = a.shift;// 数组的 toString 方法返回一个字符串，// 该字符串由数组中的每个元素的 toString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</pre><p><code>这么坑的面试题，你咋不上天呢？</code></p><p>特殊情况（无视规则）：如果数据是undefined 、 null 、 NaN ， 得出固定结果</p><pre>在检查相等性时，不能把 null 和 undefined 转换成其他值。(重要)undefined == undefined          // trueundefined === undefined         // trueundefined == null               // truenull == null                    // truenull === null                   // truenull == 0                       // false   null没有转换NaN == NaN                      // falseNaN === NaN                     // falseNaN == null                     // falseNaN == undefined                // false</pre><p><br></p><h3 id="2、关系运算符"><a href="#2、关系运算符" class="headerlink" title="2、关系运算符"></a>2、关系运算符</h3><pre>"2" > 10;       // false    2 < 10"2" > "10";     // true     比较的是Unicode"abc" > "b";    // false    比较的是Unicode"abc" > "abd"   // true     比较的是Unicode,第一个相等且还有后续就对比第二个，                //          出大小的结果就终止对比了</pre><p><br></p><h3 id="3、字符串连接符与算术运算符"><a href="#3、字符串连接符与算术运算符" class="headerlink" title="3、字符串连接符与算术运算符"></a>3、字符串连接符与算术运算符</h3><pre>1 + "true";     // "1true"1 + true;       // 21 + undefined;  // NaN1 + null;       // 1</pre><p><br></p><p>等等，是不是忘了什么？</p><h2 id="四、-symbol"><a href="#四、-symbol" class="headerlink" title="四、 symbol"></a>四、 symbol</h2><p>在 JavaScript 中，虽然大多数类型的对象在某些操作下都会自动的隐式调用自身的 valueOf() 方法或者 toString() 方法来将自己转换成一个原始值，但 symbol 对象不会这么干，symbol 对象无法隐式转换成对应的原始值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>(<span class="built_in">Symbol</span>(<span class="string">"foo"</span>)) + <span class="string">"bar"</span>;</span><br><span class="line"><span class="comment">// TypeError: can't convert symbol object to primitive</span></span><br><span class="line"><span class="comment">// 无法隐式的调用 valueOf() 方法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>(<span class="built_in">Symbol</span>(<span class="string">"foo"</span>)).valueOf() + <span class="string">"bar"</span>;</span><br><span class="line"><span class="comment">// TypeError:  can't convert symbol to string</span></span><br><span class="line"><span class="comment">// 手动调用 valueOf() 方法，虽然转换成了原始值，但 symbol 原始值不能转换为字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">"foo"</span>).toString() + <span class="string">"bar"</span></span><br><span class="line"><span class="comment">// "Symbol(foo)bar"，就相当于下面的:</span></span><br><span class="line"><span class="built_in">Object</span>(<span class="built_in">Symbol</span>(<span class="string">"foo"</span>)).toString() + <span class="string">"bar"</span>;</span><br><span class="line"><span class="comment">// "Symbol(foo)bar"，需要手动调用 toString() 方法才行</span></span><br></pre></td></tr></table></figure><p>换句话说，在 Symbol.toPrimitive() 方法内部判断了值类型，根据类型进行后续不同的操作，而不是简单的调用 toString() &amp; valueOf()方法，对于 Symbol 类型，它的处理就是抛出异常。</p><p><br></p><p><code>资料查阅：MDN 、 w3school</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;带你深入浅出的理解隐式转换时js计算中的过程&lt;/p&gt;
&lt;h2 id=&quot;一、基础概念回顾&quot;&gt;&lt;a href=&quot;#一、基础概念回顾&quot; class=&quot;headerlink&quot; title=&quot;一、基础概念回顾&quot;&gt;&lt;/a&gt;一、基础概念回顾&lt;/h2&gt;&lt;h3 id=&quot;什么是隐式转换&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.williamife.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
